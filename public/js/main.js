/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/axios/index.js":
/*!*************************************!*\
  !*** ./node_modules/axios/index.js ***!
  \*************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__(/*! ./lib/axios */ "./node_modules/axios/lib/axios.js");

/***/ }),

/***/ "./node_modules/axios/lib/adapters/xhr.js":
/*!************************************************!*\
  !*** ./node_modules/axios/lib/adapters/xhr.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");
var settle = __webpack_require__(/*! ./../core/settle */ "./node_modules/axios/lib/core/settle.js");
var cookies = __webpack_require__(/*! ./../helpers/cookies */ "./node_modules/axios/lib/helpers/cookies.js");
var buildURL = __webpack_require__(/*! ./../helpers/buildURL */ "./node_modules/axios/lib/helpers/buildURL.js");
var buildFullPath = __webpack_require__(/*! ../core/buildFullPath */ "./node_modules/axios/lib/core/buildFullPath.js");
var parseHeaders = __webpack_require__(/*! ./../helpers/parseHeaders */ "./node_modules/axios/lib/helpers/parseHeaders.js");
var isURLSameOrigin = __webpack_require__(/*! ./../helpers/isURLSameOrigin */ "./node_modules/axios/lib/helpers/isURLSameOrigin.js");
var createError = __webpack_require__(/*! ../core/createError */ "./node_modules/axios/lib/core/createError.js");
var defaults = __webpack_require__(/*! ../defaults */ "./node_modules/axios/lib/defaults.js");
var Cancel = __webpack_require__(/*! ../cancel/Cancel */ "./node_modules/axios/lib/cancel/Cancel.js");

module.exports = function xhrAdapter(config) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    var requestData = config.data;
    var requestHeaders = config.headers;
    var responseType = config.responseType;
    var onCanceled;
    function done() {
      if (config.cancelToken) {
        config.cancelToken.unsubscribe(onCanceled);
      }

      if (config.signal) {
        config.signal.removeEventListener('abort', onCanceled);
      }
    }

    if (utils.isFormData(requestData)) {
      delete requestHeaders['Content-Type']; // Let the browser set it
    }

    var request = new XMLHttpRequest();

    // HTTP basic authentication
    if (config.auth) {
      var username = config.auth.username || '';
      var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';
      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
    }

    var fullPath = buildFullPath(config.baseURL, config.url);
    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);

    // Set the request timeout in MS
    request.timeout = config.timeout;

    function onloadend() {
      if (!request) {
        return;
      }
      // Prepare the response
      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
      var responseData = !responseType || responseType === 'text' ||  responseType === 'json' ?
        request.responseText : request.response;
      var response = {
        data: responseData,
        status: request.status,
        statusText: request.statusText,
        headers: responseHeaders,
        config: config,
        request: request
      };

      settle(function _resolve(value) {
        resolve(value);
        done();
      }, function _reject(err) {
        reject(err);
        done();
      }, response);

      // Clean up request
      request = null;
    }

    if ('onloadend' in request) {
      // Use onloadend if available
      request.onloadend = onloadend;
    } else {
      // Listen for ready state to emulate onloadend
      request.onreadystatechange = function handleLoad() {
        if (!request || request.readyState !== 4) {
          return;
        }

        // The request errored out and we didn't get a response, this will be
        // handled by onerror instead
        // With one exception: request that using file: protocol, most browsers
        // will return status as 0 even though it's a successful request
        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
          return;
        }
        // readystate handler is calling before onerror or ontimeout handlers,
        // so we should call onloadend on the next 'tick'
        setTimeout(onloadend);
      };
    }

    // Handle browser request cancellation (as opposed to a manual cancellation)
    request.onabort = function handleAbort() {
      if (!request) {
        return;
      }

      reject(createError('Request aborted', config, 'ECONNABORTED', request));

      // Clean up request
      request = null;
    };

    // Handle low level network errors
    request.onerror = function handleError() {
      // Real errors are hidden from us by the browser
      // onerror should only fire if it's a network error
      reject(createError('Network Error', config, null, request));

      // Clean up request
      request = null;
    };

    // Handle timeout
    request.ontimeout = function handleTimeout() {
      var timeoutErrorMessage = config.timeout ? 'timeout of ' + config.timeout + 'ms exceeded' : 'timeout exceeded';
      var transitional = config.transitional || defaults.transitional;
      if (config.timeoutErrorMessage) {
        timeoutErrorMessage = config.timeoutErrorMessage;
      }
      reject(createError(
        timeoutErrorMessage,
        config,
        transitional.clarifyTimeoutError ? 'ETIMEDOUT' : 'ECONNABORTED',
        request));

      // Clean up request
      request = null;
    };

    // Add xsrf header
    // This is only done if running in a standard browser environment.
    // Specifically not if we're in a web worker, or react-native.
    if (utils.isStandardBrowserEnv()) {
      // Add xsrf header
      var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ?
        cookies.read(config.xsrfCookieName) :
        undefined;

      if (xsrfValue) {
        requestHeaders[config.xsrfHeaderName] = xsrfValue;
      }
    }

    // Add headers to the request
    if ('setRequestHeader' in request) {
      utils.forEach(requestHeaders, function setRequestHeader(val, key) {
        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
          // Remove Content-Type if data is undefined
          delete requestHeaders[key];
        } else {
          // Otherwise add header to the request
          request.setRequestHeader(key, val);
        }
      });
    }

    // Add withCredentials to request if needed
    if (!utils.isUndefined(config.withCredentials)) {
      request.withCredentials = !!config.withCredentials;
    }

    // Add responseType to request if needed
    if (responseType && responseType !== 'json') {
      request.responseType = config.responseType;
    }

    // Handle progress if needed
    if (typeof config.onDownloadProgress === 'function') {
      request.addEventListener('progress', config.onDownloadProgress);
    }

    // Not all browsers support upload events
    if (typeof config.onUploadProgress === 'function' && request.upload) {
      request.upload.addEventListener('progress', config.onUploadProgress);
    }

    if (config.cancelToken || config.signal) {
      // Handle cancellation
      // eslint-disable-next-line func-names
      onCanceled = function(cancel) {
        if (!request) {
          return;
        }
        reject(!cancel || (cancel && cancel.type) ? new Cancel('canceled') : cancel);
        request.abort();
        request = null;
      };

      config.cancelToken && config.cancelToken.subscribe(onCanceled);
      if (config.signal) {
        config.signal.aborted ? onCanceled() : config.signal.addEventListener('abort', onCanceled);
      }
    }

    if (!requestData) {
      requestData = null;
    }

    // Send the request
    request.send(requestData);
  });
};


/***/ }),

/***/ "./node_modules/axios/lib/axios.js":
/*!*****************************************!*\
  !*** ./node_modules/axios/lib/axios.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./utils */ "./node_modules/axios/lib/utils.js");
var bind = __webpack_require__(/*! ./helpers/bind */ "./node_modules/axios/lib/helpers/bind.js");
var Axios = __webpack_require__(/*! ./core/Axios */ "./node_modules/axios/lib/core/Axios.js");
var mergeConfig = __webpack_require__(/*! ./core/mergeConfig */ "./node_modules/axios/lib/core/mergeConfig.js");
var defaults = __webpack_require__(/*! ./defaults */ "./node_modules/axios/lib/defaults.js");

/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 * @return {Axios} A new instance of Axios
 */
function createInstance(defaultConfig) {
  var context = new Axios(defaultConfig);
  var instance = bind(Axios.prototype.request, context);

  // Copy axios.prototype to instance
  utils.extend(instance, Axios.prototype, context);

  // Copy context to instance
  utils.extend(instance, context);

  // Factory for creating new instances
  instance.create = function create(instanceConfig) {
    return createInstance(mergeConfig(defaultConfig, instanceConfig));
  };

  return instance;
}

// Create the default instance to be exported
var axios = createInstance(defaults);

// Expose Axios class to allow class inheritance
axios.Axios = Axios;

// Expose Cancel & CancelToken
axios.Cancel = __webpack_require__(/*! ./cancel/Cancel */ "./node_modules/axios/lib/cancel/Cancel.js");
axios.CancelToken = __webpack_require__(/*! ./cancel/CancelToken */ "./node_modules/axios/lib/cancel/CancelToken.js");
axios.isCancel = __webpack_require__(/*! ./cancel/isCancel */ "./node_modules/axios/lib/cancel/isCancel.js");
axios.VERSION = (__webpack_require__(/*! ./env/data */ "./node_modules/axios/lib/env/data.js").version);

// Expose all/spread
axios.all = function all(promises) {
  return Promise.all(promises);
};
axios.spread = __webpack_require__(/*! ./helpers/spread */ "./node_modules/axios/lib/helpers/spread.js");

// Expose isAxiosError
axios.isAxiosError = __webpack_require__(/*! ./helpers/isAxiosError */ "./node_modules/axios/lib/helpers/isAxiosError.js");

module.exports = axios;

// Allow use of default import syntax in TypeScript
module.exports["default"] = axios;


/***/ }),

/***/ "./node_modules/axios/lib/cancel/Cancel.js":
/*!*************************************************!*\
  !*** ./node_modules/axios/lib/cancel/Cancel.js ***!
  \*************************************************/
/***/ ((module) => {

"use strict";


/**
 * A `Cancel` is an object that is thrown when an operation is canceled.
 *
 * @class
 * @param {string=} message The message.
 */
function Cancel(message) {
  this.message = message;
}

Cancel.prototype.toString = function toString() {
  return 'Cancel' + (this.message ? ': ' + this.message : '');
};

Cancel.prototype.__CANCEL__ = true;

module.exports = Cancel;


/***/ }),

/***/ "./node_modules/axios/lib/cancel/CancelToken.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/cancel/CancelToken.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Cancel = __webpack_require__(/*! ./Cancel */ "./node_modules/axios/lib/cancel/Cancel.js");

/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @class
 * @param {Function} executor The executor function.
 */
function CancelToken(executor) {
  if (typeof executor !== 'function') {
    throw new TypeError('executor must be a function.');
  }

  var resolvePromise;

  this.promise = new Promise(function promiseExecutor(resolve) {
    resolvePromise = resolve;
  });

  var token = this;

  // eslint-disable-next-line func-names
  this.promise.then(function(cancel) {
    if (!token._listeners) return;

    var i;
    var l = token._listeners.length;

    for (i = 0; i < l; i++) {
      token._listeners[i](cancel);
    }
    token._listeners = null;
  });

  // eslint-disable-next-line func-names
  this.promise.then = function(onfulfilled) {
    var _resolve;
    // eslint-disable-next-line func-names
    var promise = new Promise(function(resolve) {
      token.subscribe(resolve);
      _resolve = resolve;
    }).then(onfulfilled);

    promise.cancel = function reject() {
      token.unsubscribe(_resolve);
    };

    return promise;
  };

  executor(function cancel(message) {
    if (token.reason) {
      // Cancellation has already been requested
      return;
    }

    token.reason = new Cancel(message);
    resolvePromise(token.reason);
  });
}

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
CancelToken.prototype.throwIfRequested = function throwIfRequested() {
  if (this.reason) {
    throw this.reason;
  }
};

/**
 * Subscribe to the cancel signal
 */

CancelToken.prototype.subscribe = function subscribe(listener) {
  if (this.reason) {
    listener(this.reason);
    return;
  }

  if (this._listeners) {
    this._listeners.push(listener);
  } else {
    this._listeners = [listener];
  }
};

/**
 * Unsubscribe from the cancel signal
 */

CancelToken.prototype.unsubscribe = function unsubscribe(listener) {
  if (!this._listeners) {
    return;
  }
  var index = this._listeners.indexOf(listener);
  if (index !== -1) {
    this._listeners.splice(index, 1);
  }
};

/**
 * Returns an object that contains a new `CancelToken` and a function that, when called,
 * cancels the `CancelToken`.
 */
CancelToken.source = function source() {
  var cancel;
  var token = new CancelToken(function executor(c) {
    cancel = c;
  });
  return {
    token: token,
    cancel: cancel
  };
};

module.exports = CancelToken;


/***/ }),

/***/ "./node_modules/axios/lib/cancel/isCancel.js":
/*!***************************************************!*\
  !*** ./node_modules/axios/lib/cancel/isCancel.js ***!
  \***************************************************/
/***/ ((module) => {

"use strict";


module.exports = function isCancel(value) {
  return !!(value && value.__CANCEL__);
};


/***/ }),

/***/ "./node_modules/axios/lib/core/Axios.js":
/*!**********************************************!*\
  !*** ./node_modules/axios/lib/core/Axios.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");
var buildURL = __webpack_require__(/*! ../helpers/buildURL */ "./node_modules/axios/lib/helpers/buildURL.js");
var InterceptorManager = __webpack_require__(/*! ./InterceptorManager */ "./node_modules/axios/lib/core/InterceptorManager.js");
var dispatchRequest = __webpack_require__(/*! ./dispatchRequest */ "./node_modules/axios/lib/core/dispatchRequest.js");
var mergeConfig = __webpack_require__(/*! ./mergeConfig */ "./node_modules/axios/lib/core/mergeConfig.js");
var validator = __webpack_require__(/*! ../helpers/validator */ "./node_modules/axios/lib/helpers/validator.js");

var validators = validator.validators;
/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 */
function Axios(instanceConfig) {
  this.defaults = instanceConfig;
  this.interceptors = {
    request: new InterceptorManager(),
    response: new InterceptorManager()
  };
}

/**
 * Dispatch a request
 *
 * @param {Object} config The config specific for this request (merged with this.defaults)
 */
Axios.prototype.request = function request(configOrUrl, config) {
  /*eslint no-param-reassign:0*/
  // Allow for axios('example/url'[, config]) a la fetch API
  if (typeof configOrUrl === 'string') {
    config = config || {};
    config.url = configOrUrl;
  } else {
    config = configOrUrl || {};
  }

  if (!config.url) {
    throw new Error('Provided config url is not valid');
  }

  config = mergeConfig(this.defaults, config);

  // Set config.method
  if (config.method) {
    config.method = config.method.toLowerCase();
  } else if (this.defaults.method) {
    config.method = this.defaults.method.toLowerCase();
  } else {
    config.method = 'get';
  }

  var transitional = config.transitional;

  if (transitional !== undefined) {
    validator.assertOptions(transitional, {
      silentJSONParsing: validators.transitional(validators.boolean),
      forcedJSONParsing: validators.transitional(validators.boolean),
      clarifyTimeoutError: validators.transitional(validators.boolean)
    }, false);
  }

  // filter out skipped interceptors
  var requestInterceptorChain = [];
  var synchronousRequestInterceptors = true;
  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
    if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {
      return;
    }

    synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;

    requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
  });

  var responseInterceptorChain = [];
  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
    responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
  });

  var promise;

  if (!synchronousRequestInterceptors) {
    var chain = [dispatchRequest, undefined];

    Array.prototype.unshift.apply(chain, requestInterceptorChain);
    chain = chain.concat(responseInterceptorChain);

    promise = Promise.resolve(config);
    while (chain.length) {
      promise = promise.then(chain.shift(), chain.shift());
    }

    return promise;
  }


  var newConfig = config;
  while (requestInterceptorChain.length) {
    var onFulfilled = requestInterceptorChain.shift();
    var onRejected = requestInterceptorChain.shift();
    try {
      newConfig = onFulfilled(newConfig);
    } catch (error) {
      onRejected(error);
      break;
    }
  }

  try {
    promise = dispatchRequest(newConfig);
  } catch (error) {
    return Promise.reject(error);
  }

  while (responseInterceptorChain.length) {
    promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());
  }

  return promise;
};

Axios.prototype.getUri = function getUri(config) {
  if (!config.url) {
    throw new Error('Provided config url is not valid');
  }
  config = mergeConfig(this.defaults, config);
  return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, '');
};

// Provide aliases for supported request methods
utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, config) {
    return this.request(mergeConfig(config || {}, {
      method: method,
      url: url,
      data: (config || {}).data
    }));
  };
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, data, config) {
    return this.request(mergeConfig(config || {}, {
      method: method,
      url: url,
      data: data
    }));
  };
});

module.exports = Axios;


/***/ }),

/***/ "./node_modules/axios/lib/core/InterceptorManager.js":
/*!***********************************************************!*\
  !*** ./node_modules/axios/lib/core/InterceptorManager.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

function InterceptorManager() {
  this.handlers = [];
}

/**
 * Add a new interceptor to the stack
 *
 * @param {Function} fulfilled The function to handle `then` for a `Promise`
 * @param {Function} rejected The function to handle `reject` for a `Promise`
 *
 * @return {Number} An ID used to remove interceptor later
 */
InterceptorManager.prototype.use = function use(fulfilled, rejected, options) {
  this.handlers.push({
    fulfilled: fulfilled,
    rejected: rejected,
    synchronous: options ? options.synchronous : false,
    runWhen: options ? options.runWhen : null
  });
  return this.handlers.length - 1;
};

/**
 * Remove an interceptor from the stack
 *
 * @param {Number} id The ID that was returned by `use`
 */
InterceptorManager.prototype.eject = function eject(id) {
  if (this.handlers[id]) {
    this.handlers[id] = null;
  }
};

/**
 * Iterate over all the registered interceptors
 *
 * This method is particularly useful for skipping over any
 * interceptors that may have become `null` calling `eject`.
 *
 * @param {Function} fn The function to call for each interceptor
 */
InterceptorManager.prototype.forEach = function forEach(fn) {
  utils.forEach(this.handlers, function forEachHandler(h) {
    if (h !== null) {
      fn(h);
    }
  });
};

module.exports = InterceptorManager;


/***/ }),

/***/ "./node_modules/axios/lib/core/buildFullPath.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/core/buildFullPath.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var isAbsoluteURL = __webpack_require__(/*! ../helpers/isAbsoluteURL */ "./node_modules/axios/lib/helpers/isAbsoluteURL.js");
var combineURLs = __webpack_require__(/*! ../helpers/combineURLs */ "./node_modules/axios/lib/helpers/combineURLs.js");

/**
 * Creates a new URL by combining the baseURL with the requestedURL,
 * only when the requestedURL is not already an absolute URL.
 * If the requestURL is absolute, this function returns the requestedURL untouched.
 *
 * @param {string} baseURL The base URL
 * @param {string} requestedURL Absolute or relative URL to combine
 * @returns {string} The combined full path
 */
module.exports = function buildFullPath(baseURL, requestedURL) {
  if (baseURL && !isAbsoluteURL(requestedURL)) {
    return combineURLs(baseURL, requestedURL);
  }
  return requestedURL;
};


/***/ }),

/***/ "./node_modules/axios/lib/core/createError.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/core/createError.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var enhanceError = __webpack_require__(/*! ./enhanceError */ "./node_modules/axios/lib/core/enhanceError.js");

/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The created error.
 */
module.exports = function createError(message, config, code, request, response) {
  var error = new Error(message);
  return enhanceError(error, config, code, request, response);
};


/***/ }),

/***/ "./node_modules/axios/lib/core/dispatchRequest.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/core/dispatchRequest.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");
var transformData = __webpack_require__(/*! ./transformData */ "./node_modules/axios/lib/core/transformData.js");
var isCancel = __webpack_require__(/*! ../cancel/isCancel */ "./node_modules/axios/lib/cancel/isCancel.js");
var defaults = __webpack_require__(/*! ../defaults */ "./node_modules/axios/lib/defaults.js");
var Cancel = __webpack_require__(/*! ../cancel/Cancel */ "./node_modules/axios/lib/cancel/Cancel.js");

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }

  if (config.signal && config.signal.aborted) {
    throw new Cancel('canceled');
  }
}

/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 * @returns {Promise} The Promise to be fulfilled
 */
module.exports = function dispatchRequest(config) {
  throwIfCancellationRequested(config);

  // Ensure headers exist
  config.headers = config.headers || {};

  // Transform request data
  config.data = transformData.call(
    config,
    config.data,
    config.headers,
    config.transformRequest
  );

  // Flatten headers
  config.headers = utils.merge(
    config.headers.common || {},
    config.headers[config.method] || {},
    config.headers
  );

  utils.forEach(
    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
    function cleanHeaderConfig(method) {
      delete config.headers[method];
    }
  );

  var adapter = config.adapter || defaults.adapter;

  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config);

    // Transform response data
    response.data = transformData.call(
      config,
      response.data,
      response.headers,
      config.transformResponse
    );

    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config);

      // Transform response data
      if (reason && reason.response) {
        reason.response.data = transformData.call(
          config,
          reason.response.data,
          reason.response.headers,
          config.transformResponse
        );
      }
    }

    return Promise.reject(reason);
  });
};


/***/ }),

/***/ "./node_modules/axios/lib/core/enhanceError.js":
/*!*****************************************************!*\
  !*** ./node_modules/axios/lib/core/enhanceError.js ***!
  \*****************************************************/
/***/ ((module) => {

"use strict";


/**
 * Update an Error with the specified config, error code, and response.
 *
 * @param {Error} error The error to update.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The error.
 */
module.exports = function enhanceError(error, config, code, request, response) {
  error.config = config;
  if (code) {
    error.code = code;
  }

  error.request = request;
  error.response = response;
  error.isAxiosError = true;

  error.toJSON = function toJSON() {
    return {
      // Standard
      message: this.message,
      name: this.name,
      // Microsoft
      description: this.description,
      number: this.number,
      // Mozilla
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      // Axios
      config: this.config,
      code: this.code,
      status: this.response && this.response.status ? this.response.status : null
    };
  };
  return error;
};


/***/ }),

/***/ "./node_modules/axios/lib/core/mergeConfig.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/core/mergeConfig.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ../utils */ "./node_modules/axios/lib/utils.js");

/**
 * Config-specific merge-function which creates a new config-object
 * by merging two configuration objects together.
 *
 * @param {Object} config1
 * @param {Object} config2
 * @returns {Object} New object resulting from merging config2 to config1
 */
module.exports = function mergeConfig(config1, config2) {
  // eslint-disable-next-line no-param-reassign
  config2 = config2 || {};
  var config = {};

  function getMergedValue(target, source) {
    if (utils.isPlainObject(target) && utils.isPlainObject(source)) {
      return utils.merge(target, source);
    } else if (utils.isPlainObject(source)) {
      return utils.merge({}, source);
    } else if (utils.isArray(source)) {
      return source.slice();
    }
    return source;
  }

  // eslint-disable-next-line consistent-return
  function mergeDeepProperties(prop) {
    if (!utils.isUndefined(config2[prop])) {
      return getMergedValue(config1[prop], config2[prop]);
    } else if (!utils.isUndefined(config1[prop])) {
      return getMergedValue(undefined, config1[prop]);
    }
  }

  // eslint-disable-next-line consistent-return
  function valueFromConfig2(prop) {
    if (!utils.isUndefined(config2[prop])) {
      return getMergedValue(undefined, config2[prop]);
    }
  }

  // eslint-disable-next-line consistent-return
  function defaultToConfig2(prop) {
    if (!utils.isUndefined(config2[prop])) {
      return getMergedValue(undefined, config2[prop]);
    } else if (!utils.isUndefined(config1[prop])) {
      return getMergedValue(undefined, config1[prop]);
    }
  }

  // eslint-disable-next-line consistent-return
  function mergeDirectKeys(prop) {
    if (prop in config2) {
      return getMergedValue(config1[prop], config2[prop]);
    } else if (prop in config1) {
      return getMergedValue(undefined, config1[prop]);
    }
  }

  var mergeMap = {
    'url': valueFromConfig2,
    'method': valueFromConfig2,
    'data': valueFromConfig2,
    'baseURL': defaultToConfig2,
    'transformRequest': defaultToConfig2,
    'transformResponse': defaultToConfig2,
    'paramsSerializer': defaultToConfig2,
    'timeout': defaultToConfig2,
    'timeoutMessage': defaultToConfig2,
    'withCredentials': defaultToConfig2,
    'adapter': defaultToConfig2,
    'responseType': defaultToConfig2,
    'xsrfCookieName': defaultToConfig2,
    'xsrfHeaderName': defaultToConfig2,
    'onUploadProgress': defaultToConfig2,
    'onDownloadProgress': defaultToConfig2,
    'decompress': defaultToConfig2,
    'maxContentLength': defaultToConfig2,
    'maxBodyLength': defaultToConfig2,
    'transport': defaultToConfig2,
    'httpAgent': defaultToConfig2,
    'httpsAgent': defaultToConfig2,
    'cancelToken': defaultToConfig2,
    'socketPath': defaultToConfig2,
    'responseEncoding': defaultToConfig2,
    'validateStatus': mergeDirectKeys
  };

  utils.forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {
    var merge = mergeMap[prop] || mergeDeepProperties;
    var configValue = merge(prop);
    (utils.isUndefined(configValue) && merge !== mergeDirectKeys) || (config[prop] = configValue);
  });

  return config;
};


/***/ }),

/***/ "./node_modules/axios/lib/core/settle.js":
/*!***********************************************!*\
  !*** ./node_modules/axios/lib/core/settle.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var createError = __webpack_require__(/*! ./createError */ "./node_modules/axios/lib/core/createError.js");

/**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 */
module.exports = function settle(resolve, reject, response) {
  var validateStatus = response.config.validateStatus;
  if (!response.status || !validateStatus || validateStatus(response.status)) {
    resolve(response);
  } else {
    reject(createError(
      'Request failed with status code ' + response.status,
      response.config,
      null,
      response.request,
      response
    ));
  }
};


/***/ }),

/***/ "./node_modules/axios/lib/core/transformData.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/core/transformData.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");
var defaults = __webpack_require__(/*! ./../defaults */ "./node_modules/axios/lib/defaults.js");

/**
 * Transform the data for a request or a response
 *
 * @param {Object|String} data The data to be transformed
 * @param {Array} headers The headers for the request or response
 * @param {Array|Function} fns A single function or Array of functions
 * @returns {*} The resulting transformed data
 */
module.exports = function transformData(data, headers, fns) {
  var context = this || defaults;
  /*eslint no-param-reassign:0*/
  utils.forEach(fns, function transform(fn) {
    data = fn.call(context, data, headers);
  });

  return data;
};


/***/ }),

/***/ "./node_modules/axios/lib/defaults.js":
/*!********************************************!*\
  !*** ./node_modules/axios/lib/defaults.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var process = __webpack_require__(/*! process/browser.js */ "./node_modules/process/browser.js");


var utils = __webpack_require__(/*! ./utils */ "./node_modules/axios/lib/utils.js");
var normalizeHeaderName = __webpack_require__(/*! ./helpers/normalizeHeaderName */ "./node_modules/axios/lib/helpers/normalizeHeaderName.js");
var enhanceError = __webpack_require__(/*! ./core/enhanceError */ "./node_modules/axios/lib/core/enhanceError.js");

var DEFAULT_CONTENT_TYPE = {
  'Content-Type': 'application/x-www-form-urlencoded'
};

function setContentTypeIfUnset(headers, value) {
  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
    headers['Content-Type'] = value;
  }
}

function getDefaultAdapter() {
  var adapter;
  if (typeof XMLHttpRequest !== 'undefined') {
    // For browsers use XHR adapter
    adapter = __webpack_require__(/*! ./adapters/xhr */ "./node_modules/axios/lib/adapters/xhr.js");
  } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {
    // For node use HTTP adapter
    adapter = __webpack_require__(/*! ./adapters/http */ "./node_modules/axios/lib/adapters/xhr.js");
  }
  return adapter;
}

function stringifySafely(rawValue, parser, encoder) {
  if (utils.isString(rawValue)) {
    try {
      (parser || JSON.parse)(rawValue);
      return utils.trim(rawValue);
    } catch (e) {
      if (e.name !== 'SyntaxError') {
        throw e;
      }
    }
  }

  return (encoder || JSON.stringify)(rawValue);
}

var defaults = {

  transitional: {
    silentJSONParsing: true,
    forcedJSONParsing: true,
    clarifyTimeoutError: false
  },

  adapter: getDefaultAdapter(),

  transformRequest: [function transformRequest(data, headers) {
    normalizeHeaderName(headers, 'Accept');
    normalizeHeaderName(headers, 'Content-Type');

    if (utils.isFormData(data) ||
      utils.isArrayBuffer(data) ||
      utils.isBuffer(data) ||
      utils.isStream(data) ||
      utils.isFile(data) ||
      utils.isBlob(data)
    ) {
      return data;
    }
    if (utils.isArrayBufferView(data)) {
      return data.buffer;
    }
    if (utils.isURLSearchParams(data)) {
      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
      return data.toString();
    }
    if (utils.isObject(data) || (headers && headers['Content-Type'] === 'application/json')) {
      setContentTypeIfUnset(headers, 'application/json');
      return stringifySafely(data);
    }
    return data;
  }],

  transformResponse: [function transformResponse(data) {
    var transitional = this.transitional || defaults.transitional;
    var silentJSONParsing = transitional && transitional.silentJSONParsing;
    var forcedJSONParsing = transitional && transitional.forcedJSONParsing;
    var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';

    if (strictJSONParsing || (forcedJSONParsing && utils.isString(data) && data.length)) {
      try {
        return JSON.parse(data);
      } catch (e) {
        if (strictJSONParsing) {
          if (e.name === 'SyntaxError') {
            throw enhanceError(e, this, 'E_JSON_PARSE');
          }
          throw e;
        }
      }
    }

    return data;
  }],

  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,

  xsrfCookieName: 'XSRF-TOKEN',
  xsrfHeaderName: 'X-XSRF-TOKEN',

  maxContentLength: -1,
  maxBodyLength: -1,

  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  },

  headers: {
    common: {
      'Accept': 'application/json, text/plain, */*'
    }
  }
};

utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
  defaults.headers[method] = {};
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
});

module.exports = defaults;


/***/ }),

/***/ "./node_modules/axios/lib/env/data.js":
/*!********************************************!*\
  !*** ./node_modules/axios/lib/env/data.js ***!
  \********************************************/
/***/ ((module) => {

module.exports = {
  "version": "0.25.0"
};

/***/ }),

/***/ "./node_modules/axios/lib/helpers/bind.js":
/*!************************************************!*\
  !*** ./node_modules/axios/lib/helpers/bind.js ***!
  \************************************************/
/***/ ((module) => {

"use strict";


module.exports = function bind(fn, thisArg) {
  return function wrap() {
    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }
    return fn.apply(thisArg, args);
  };
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/buildURL.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/helpers/buildURL.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

function encode(val) {
  return encodeURIComponent(val).
    replace(/%3A/gi, ':').
    replace(/%24/g, '$').
    replace(/%2C/gi, ',').
    replace(/%20/g, '+').
    replace(/%5B/gi, '[').
    replace(/%5D/gi, ']');
}

/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @returns {string} The formatted url
 */
module.exports = function buildURL(url, params, paramsSerializer) {
  /*eslint no-param-reassign:0*/
  if (!params) {
    return url;
  }

  var serializedParams;
  if (paramsSerializer) {
    serializedParams = paramsSerializer(params);
  } else if (utils.isURLSearchParams(params)) {
    serializedParams = params.toString();
  } else {
    var parts = [];

    utils.forEach(params, function serialize(val, key) {
      if (val === null || typeof val === 'undefined') {
        return;
      }

      if (utils.isArray(val)) {
        key = key + '[]';
      } else {
        val = [val];
      }

      utils.forEach(val, function parseValue(v) {
        if (utils.isDate(v)) {
          v = v.toISOString();
        } else if (utils.isObject(v)) {
          v = JSON.stringify(v);
        }
        parts.push(encode(key) + '=' + encode(v));
      });
    });

    serializedParams = parts.join('&');
  }

  if (serializedParams) {
    var hashmarkIndex = url.indexOf('#');
    if (hashmarkIndex !== -1) {
      url = url.slice(0, hashmarkIndex);
    }

    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
  }

  return url;
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/combineURLs.js":
/*!*******************************************************!*\
  !*** ./node_modules/axios/lib/helpers/combineURLs.js ***!
  \*******************************************************/
/***/ ((module) => {

"use strict";


/**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 * @returns {string} The combined URL
 */
module.exports = function combineURLs(baseURL, relativeURL) {
  return relativeURL
    ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '')
    : baseURL;
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/cookies.js":
/*!***************************************************!*\
  !*** ./node_modules/axios/lib/helpers/cookies.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

module.exports = (
  utils.isStandardBrowserEnv() ?

  // Standard browser envs support document.cookie
    (function standardBrowserEnv() {
      return {
        write: function write(name, value, expires, path, domain, secure) {
          var cookie = [];
          cookie.push(name + '=' + encodeURIComponent(value));

          if (utils.isNumber(expires)) {
            cookie.push('expires=' + new Date(expires).toGMTString());
          }

          if (utils.isString(path)) {
            cookie.push('path=' + path);
          }

          if (utils.isString(domain)) {
            cookie.push('domain=' + domain);
          }

          if (secure === true) {
            cookie.push('secure');
          }

          document.cookie = cookie.join('; ');
        },

        read: function read(name) {
          var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
          return (match ? decodeURIComponent(match[3]) : null);
        },

        remove: function remove(name) {
          this.write(name, '', Date.now() - 86400000);
        }
      };
    })() :

  // Non standard browser env (web workers, react-native) lack needed support.
    (function nonStandardBrowserEnv() {
      return {
        write: function write() {},
        read: function read() { return null; },
        remove: function remove() {}
      };
    })()
);


/***/ }),

/***/ "./node_modules/axios/lib/helpers/isAbsoluteURL.js":
/*!*********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isAbsoluteURL.js ***!
  \*********************************************************/
/***/ ((module) => {

"use strict";


/**
 * Determines whether the specified URL is absolute
 *
 * @param {string} url The URL to test
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 */
module.exports = function isAbsoluteURL(url) {
  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
  // by any combination of letters, digits, plus, period, or hyphen.
  return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/isAxiosError.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isAxiosError.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

/**
 * Determines whether the payload is an error thrown by Axios
 *
 * @param {*} payload The value to test
 * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
 */
module.exports = function isAxiosError(payload) {
  return utils.isObject(payload) && (payload.isAxiosError === true);
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/isURLSameOrigin.js":
/*!***********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isURLSameOrigin.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

module.exports = (
  utils.isStandardBrowserEnv() ?

  // Standard browser envs have full support of the APIs needed to test
  // whether the request URL is of the same origin as current location.
    (function standardBrowserEnv() {
      var msie = /(msie|trident)/i.test(navigator.userAgent);
      var urlParsingNode = document.createElement('a');
      var originURL;

      /**
    * Parse a URL to discover it's components
    *
    * @param {String} url The URL to be parsed
    * @returns {Object}
    */
      function resolveURL(url) {
        var href = url;

        if (msie) {
        // IE needs attribute set twice to normalize properties
          urlParsingNode.setAttribute('href', href);
          href = urlParsingNode.href;
        }

        urlParsingNode.setAttribute('href', href);

        // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
        return {
          href: urlParsingNode.href,
          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
          host: urlParsingNode.host,
          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
          hostname: urlParsingNode.hostname,
          port: urlParsingNode.port,
          pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
            urlParsingNode.pathname :
            '/' + urlParsingNode.pathname
        };
      }

      originURL = resolveURL(window.location.href);

      /**
    * Determine if a URL shares the same origin as the current location
    *
    * @param {String} requestURL The URL to test
    * @returns {boolean} True if URL shares the same origin, otherwise false
    */
      return function isURLSameOrigin(requestURL) {
        var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
        return (parsed.protocol === originURL.protocol &&
            parsed.host === originURL.host);
      };
    })() :

  // Non standard browser envs (web workers, react-native) lack needed support.
    (function nonStandardBrowserEnv() {
      return function isURLSameOrigin() {
        return true;
      };
    })()
);


/***/ }),

/***/ "./node_modules/axios/lib/helpers/normalizeHeaderName.js":
/*!***************************************************************!*\
  !*** ./node_modules/axios/lib/helpers/normalizeHeaderName.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ../utils */ "./node_modules/axios/lib/utils.js");

module.exports = function normalizeHeaderName(headers, normalizedName) {
  utils.forEach(headers, function processHeader(value, name) {
    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
      headers[normalizedName] = value;
      delete headers[name];
    }
  });
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/parseHeaders.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/parseHeaders.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

// Headers whose duplicates are ignored by node
// c.f. https://nodejs.org/api/http.html#http_message_headers
var ignoreDuplicateOf = [
  'age', 'authorization', 'content-length', 'content-type', 'etag',
  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
  'last-modified', 'location', 'max-forwards', 'proxy-authorization',
  'referer', 'retry-after', 'user-agent'
];

/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} headers Headers needing to be parsed
 * @returns {Object} Headers parsed into an object
 */
module.exports = function parseHeaders(headers) {
  var parsed = {};
  var key;
  var val;
  var i;

  if (!headers) { return parsed; }

  utils.forEach(headers.split('\n'), function parser(line) {
    i = line.indexOf(':');
    key = utils.trim(line.substr(0, i)).toLowerCase();
    val = utils.trim(line.substr(i + 1));

    if (key) {
      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
        return;
      }
      if (key === 'set-cookie') {
        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
      } else {
        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
      }
    }
  });

  return parsed;
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/spread.js":
/*!**************************************************!*\
  !*** ./node_modules/axios/lib/helpers/spread.js ***!
  \**************************************************/
/***/ ((module) => {

"use strict";


/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 * @returns {Function}
 */
module.exports = function spread(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/validator.js":
/*!*****************************************************!*\
  !*** ./node_modules/axios/lib/helpers/validator.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var VERSION = (__webpack_require__(/*! ../env/data */ "./node_modules/axios/lib/env/data.js").version);

var validators = {};

// eslint-disable-next-line func-names
['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach(function(type, i) {
  validators[type] = function validator(thing) {
    return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;
  };
});

var deprecatedWarnings = {};

/**
 * Transitional option validator
 * @param {function|boolean?} validator - set to false if the transitional option has been removed
 * @param {string?} version - deprecated version / removed since version
 * @param {string?} message - some message with additional info
 * @returns {function}
 */
validators.transitional = function transitional(validator, version, message) {
  function formatMessage(opt, desc) {
    return '[Axios v' + VERSION + '] Transitional option \'' + opt + '\'' + desc + (message ? '. ' + message : '');
  }

  // eslint-disable-next-line func-names
  return function(value, opt, opts) {
    if (validator === false) {
      throw new Error(formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')));
    }

    if (version && !deprecatedWarnings[opt]) {
      deprecatedWarnings[opt] = true;
      // eslint-disable-next-line no-console
      console.warn(
        formatMessage(
          opt,
          ' has been deprecated since v' + version + ' and will be removed in the near future'
        )
      );
    }

    return validator ? validator(value, opt, opts) : true;
  };
};

/**
 * Assert object's properties type
 * @param {object} options
 * @param {object} schema
 * @param {boolean?} allowUnknown
 */

function assertOptions(options, schema, allowUnknown) {
  if (typeof options !== 'object') {
    throw new TypeError('options must be an object');
  }
  var keys = Object.keys(options);
  var i = keys.length;
  while (i-- > 0) {
    var opt = keys[i];
    var validator = schema[opt];
    if (validator) {
      var value = options[opt];
      var result = value === undefined || validator(value, opt, options);
      if (result !== true) {
        throw new TypeError('option ' + opt + ' must be ' + result);
      }
      continue;
    }
    if (allowUnknown !== true) {
      throw Error('Unknown option ' + opt);
    }
  }
}

module.exports = {
  assertOptions: assertOptions,
  validators: validators
};


/***/ }),

/***/ "./node_modules/axios/lib/utils.js":
/*!*****************************************!*\
  !*** ./node_modules/axios/lib/utils.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var bind = __webpack_require__(/*! ./helpers/bind */ "./node_modules/axios/lib/helpers/bind.js");

// utils is a library of generic helper functions non-specific to axios

var toString = Object.prototype.toString;

/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Array, otherwise false
 */
function isArray(val) {
  return Array.isArray(val);
}

/**
 * Determine if a value is undefined
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if the value is undefined, otherwise false
 */
function isUndefined(val) {
  return typeof val === 'undefined';
}

/**
 * Determine if a value is a Buffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Buffer, otherwise false
 */
function isBuffer(val) {
  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)
    && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);
}

/**
 * Determine if a value is an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */
function isArrayBuffer(val) {
  return toString.call(val) === '[object ArrayBuffer]';
}

/**
 * Determine if a value is a FormData
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an FormData, otherwise false
 */
function isFormData(val) {
  return toString.call(val) === '[object FormData]';
}

/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */
function isArrayBufferView(val) {
  var result;
  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
    result = ArrayBuffer.isView(val);
  } else {
    result = (val) && (val.buffer) && (isArrayBuffer(val.buffer));
  }
  return result;
}

/**
 * Determine if a value is a String
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a String, otherwise false
 */
function isString(val) {
  return typeof val === 'string';
}

/**
 * Determine if a value is a Number
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Number, otherwise false
 */
function isNumber(val) {
  return typeof val === 'number';
}

/**
 * Determine if a value is an Object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Object, otherwise false
 */
function isObject(val) {
  return val !== null && typeof val === 'object';
}

/**
 * Determine if a value is a plain Object
 *
 * @param {Object} val The value to test
 * @return {boolean} True if value is a plain Object, otherwise false
 */
function isPlainObject(val) {
  if (toString.call(val) !== '[object Object]') {
    return false;
  }

  var prototype = Object.getPrototypeOf(val);
  return prototype === null || prototype === Object.prototype;
}

/**
 * Determine if a value is a Date
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Date, otherwise false
 */
function isDate(val) {
  return toString.call(val) === '[object Date]';
}

/**
 * Determine if a value is a File
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a File, otherwise false
 */
function isFile(val) {
  return toString.call(val) === '[object File]';
}

/**
 * Determine if a value is a Blob
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Blob, otherwise false
 */
function isBlob(val) {
  return toString.call(val) === '[object Blob]';
}

/**
 * Determine if a value is a Function
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */
function isFunction(val) {
  return toString.call(val) === '[object Function]';
}

/**
 * Determine if a value is a Stream
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Stream, otherwise false
 */
function isStream(val) {
  return isObject(val) && isFunction(val.pipe);
}

/**
 * Determine if a value is a URLSearchParams object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */
function isURLSearchParams(val) {
  return toString.call(val) === '[object URLSearchParams]';
}

/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 * @returns {String} The String freed of excess whitespace
 */
function trim(str) {
  return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, '');
}

/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 * nativescript
 *  navigator.product -> 'NativeScript' or 'NS'
 */
function isStandardBrowserEnv() {
  if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' ||
                                           navigator.product === 'NativeScript' ||
                                           navigator.product === 'NS')) {
    return false;
  }
  return (
    typeof window !== 'undefined' &&
    typeof document !== 'undefined'
  );
}

/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 */
function forEach(obj, fn) {
  // Don't bother if no value provided
  if (obj === null || typeof obj === 'undefined') {
    return;
  }

  // Force an array if not already something iterable
  if (typeof obj !== 'object') {
    /*eslint no-param-reassign:0*/
    obj = [obj];
  }

  if (isArray(obj)) {
    // Iterate over array values
    for (var i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    // Iterate over object keys
    for (var key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) {
        fn.call(null, obj[key], key, obj);
      }
    }
  }
}

/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */
function merge(/* obj1, obj2, obj3, ... */) {
  var result = {};
  function assignValue(val, key) {
    if (isPlainObject(result[key]) && isPlainObject(val)) {
      result[key] = merge(result[key], val);
    } else if (isPlainObject(val)) {
      result[key] = merge({}, val);
    } else if (isArray(val)) {
      result[key] = val.slice();
    } else {
      result[key] = val;
    }
  }

  for (var i = 0, l = arguments.length; i < l; i++) {
    forEach(arguments[i], assignValue);
  }
  return result;
}

/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 * @return {Object} The resulting value of object a
 */
function extend(a, b, thisArg) {
  forEach(b, function assignValue(val, key) {
    if (thisArg && typeof val === 'function') {
      a[key] = bind(val, thisArg);
    } else {
      a[key] = val;
    }
  });
  return a;
}

/**
 * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
 *
 * @param {string} content with BOM
 * @return {string} content value without BOM
 */
function stripBOM(content) {
  if (content.charCodeAt(0) === 0xFEFF) {
    content = content.slice(1);
  }
  return content;
}

module.exports = {
  isArray: isArray,
  isArrayBuffer: isArrayBuffer,
  isBuffer: isBuffer,
  isFormData: isFormData,
  isArrayBufferView: isArrayBufferView,
  isString: isString,
  isNumber: isNumber,
  isObject: isObject,
  isPlainObject: isPlainObject,
  isUndefined: isUndefined,
  isDate: isDate,
  isFile: isFile,
  isBlob: isBlob,
  isFunction: isFunction,
  isStream: isStream,
  isURLSearchParams: isURLSearchParams,
  isStandardBrowserEnv: isStandardBrowserEnv,
  forEach: forEach,
  merge: merge,
  extend: extend,
  trim: trim,
  stripBOM: stripBOM
};


/***/ }),

/***/ "./resources/js/bootstrap.js":
/*!***********************************!*\
  !*** ./resources/js/bootstrap.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

window._ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/**
 * We'll load the axios HTTP library which allows us to easily issue requests
 * to our Laravel back-end. This library automatically handles sending the
 * CSRF token as a header based on the value of the "XSRF" token cookie.
 */

window.axios = __webpack_require__(/*! axios */ "./node_modules/axios/index.js");
window.axios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';
/**
 * Echo exposes an expressive API for subscribing to channels and listening
 * for events that are broadcast by Laravel. Echo and event broadcasting
 * allows your team to easily build robust real-time web applications.
 */
// import Echo from 'laravel-echo';
// window.Pusher = require('pusher-js');
// window.Echo = new Echo({
//     broadcaster: 'pusher',
//     key: process.env.MIX_PUSHER_APP_KEY,
//     cluster: process.env.MIX_PUSHER_APP_CLUSTER,
//     forceTLS: true
// });

/***/ }),

/***/ "./node_modules/lodash/lodash.js":
/*!***************************************!*\
  !*** ./node_modules/lodash/lodash.js ***!
  \***************************************/
/***/ (function(module, exports, __webpack_require__) {

/* module decorator */ module = __webpack_require__.nmd(module);
var __WEBPACK_AMD_DEFINE_RESULT__;/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
;(function() {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined;

  /** Used as the semantic version number. */
  var VERSION = '4.17.21';

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /** Error message constants. */
  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
      FUNC_ERROR_TEXT = 'Expected a function',
      INVALID_TEMPL_VAR_ERROR_TEXT = 'Invalid `variable` option passed into `_.template`';

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  /** Used as the maximum memoize cache size. */
  var MAX_MEMOIZE_SIZE = 500;

  /** Used as the internal argument placeholder. */
  var PLACEHOLDER = '__lodash_placeholder__';

  /** Used to compose bitmasks for cloning. */
  var CLONE_DEEP_FLAG = 1,
      CLONE_FLAT_FLAG = 2,
      CLONE_SYMBOLS_FLAG = 4;

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG = 1,
      COMPARE_UNORDERED_FLAG = 2;

  /** Used to compose bitmasks for function metadata. */
  var WRAP_BIND_FLAG = 1,
      WRAP_BIND_KEY_FLAG = 2,
      WRAP_CURRY_BOUND_FLAG = 4,
      WRAP_CURRY_FLAG = 8,
      WRAP_CURRY_RIGHT_FLAG = 16,
      WRAP_PARTIAL_FLAG = 32,
      WRAP_PARTIAL_RIGHT_FLAG = 64,
      WRAP_ARY_FLAG = 128,
      WRAP_REARG_FLAG = 256,
      WRAP_FLIP_FLAG = 512;

  /** Used as default options for `_.truncate`. */
  var DEFAULT_TRUNC_LENGTH = 30,
      DEFAULT_TRUNC_OMISSION = '...';

  /** Used to detect hot functions by number of calls within a span of milliseconds. */
  var HOT_COUNT = 800,
      HOT_SPAN = 16;

  /** Used to indicate the type of lazy iteratees. */
  var LAZY_FILTER_FLAG = 1,
      LAZY_MAP_FLAG = 2,
      LAZY_WHILE_FLAG = 3;

  /** Used as references for various `Number` constants. */
  var INFINITY = 1 / 0,
      MAX_SAFE_INTEGER = 9007199254740991,
      MAX_INTEGER = 1.7976931348623157e+308,
      NAN = 0 / 0;

  /** Used as references for the maximum length and index of an array. */
  var MAX_ARRAY_LENGTH = 4294967295,
      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

  /** Used to associate wrap methods with their bit flags. */
  var wrapFlags = [
    ['ary', WRAP_ARY_FLAG],
    ['bind', WRAP_BIND_FLAG],
    ['bindKey', WRAP_BIND_KEY_FLAG],
    ['curry', WRAP_CURRY_FLAG],
    ['curryRight', WRAP_CURRY_RIGHT_FLAG],
    ['flip', WRAP_FLIP_FLAG],
    ['partial', WRAP_PARTIAL_FLAG],
    ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
    ['rearg', WRAP_REARG_FLAG]
  ];

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      asyncTag = '[object AsyncFunction]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      domExcTag = '[object DOMException]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      nullTag = '[object Null]',
      objectTag = '[object Object]',
      promiseTag = '[object Promise]',
      proxyTag = '[object Proxy]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]',
      undefinedTag = '[object Undefined]',
      weakMapTag = '[object WeakMap]',
      weakSetTag = '[object WeakSet]';

  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /** Used to match empty string literals in compiled template source. */
  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

  /** Used to match HTML entities and HTML characters. */
  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
      reUnescapedHtml = /[&<>"']/g,
      reHasEscapedHtml = RegExp(reEscapedHtml.source),
      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

  /** Used to match template delimiters. */
  var reEscape = /<%-([\s\S]+?)%>/g,
      reEvaluate = /<%([\s\S]+?)%>/g,
      reInterpolate = /<%=([\s\S]+?)%>/g;

  /** Used to match property names within property paths. */
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/,
      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

  /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
      reHasRegExpChar = RegExp(reRegExpChar.source);

  /** Used to match leading whitespace. */
  var reTrimStart = /^\s+/;

  /** Used to match a single whitespace character. */
  var reWhitespace = /\s/;

  /** Used to match wrap detail comments. */
  var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
      reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
      reSplitDetails = /,? & /;

  /** Used to match words composed of alphanumeric characters. */
  var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

  /**
   * Used to validate the `validate` option in `_.template` variable.
   *
   * Forbids characters which could potentially change the meaning of the function argument definition:
   * - "()," (modification of function parameters)
   * - "=" (default value)
   * - "[]{}" (destructuring of function parameters)
   * - "/" (beginning of a comment)
   * - whitespace
   */
  var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;

  /** Used to match backslashes in property paths. */
  var reEscapeChar = /\\(\\)?/g;

  /**
   * Used to match
   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
   */
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;

  /** Used to detect bad signed hexadecimal string values. */
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

  /** Used to detect binary string values. */
  var reIsBinary = /^0b[01]+$/i;

  /** Used to detect host constructors (Safari). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  /** Used to detect octal string values. */
  var reIsOctal = /^0o[0-7]+$/i;

  /** Used to detect unsigned integer values. */
  var reIsUint = /^(?:0|[1-9]\d*)$/;

  /** Used to match Latin Unicode letters (excluding mathematical operators). */
  var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

  /** Used to ensure capturing order of template delimiters. */
  var reNoMatch = /($^)/;

  /** Used to match unescaped characters in compiled string literals. */
  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

  /** Used to compose unicode character classes. */
  var rsAstralRange = '\\ud800-\\udfff',
      rsComboMarksRange = '\\u0300-\\u036f',
      reComboHalfMarksRange = '\\ufe20-\\ufe2f',
      rsComboSymbolsRange = '\\u20d0-\\u20ff',
      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
      rsDingbatRange = '\\u2700-\\u27bf',
      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
      rsPunctuationRange = '\\u2000-\\u206f',
      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
      rsVarRange = '\\ufe0e\\ufe0f',
      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

  /** Used to compose unicode capture groups. */
  var rsApos = "['\u2019]",
      rsAstral = '[' + rsAstralRange + ']',
      rsBreak = '[' + rsBreakRange + ']',
      rsCombo = '[' + rsComboRange + ']',
      rsDigits = '\\d+',
      rsDingbat = '[' + rsDingbatRange + ']',
      rsLower = '[' + rsLowerRange + ']',
      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
      rsFitz = '\\ud83c[\\udffb-\\udfff]',
      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
      rsNonAstral = '[^' + rsAstralRange + ']',
      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
      rsUpper = '[' + rsUpperRange + ']',
      rsZWJ = '\\u200d';

  /** Used to compose unicode regexes. */
  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
      reOptMod = rsModifier + '?',
      rsOptVar = '[' + rsVarRange + ']?',
      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
      rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
      rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
      rsSeq = rsOptVar + reOptMod + rsOptJoin,
      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

  /** Used to match apostrophes. */
  var reApos = RegExp(rsApos, 'g');

  /**
   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
   */
  var reComboMark = RegExp(rsCombo, 'g');

  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

  /** Used to match complex or compound words. */
  var reUnicodeWord = RegExp([
    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
    rsUpper + '+' + rsOptContrUpper,
    rsOrdUpper,
    rsOrdLower,
    rsDigits,
    rsEmoji
  ].join('|'), 'g');

  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

  /** Used to detect strings that need a more robust regexp to match words. */
  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

  /** Used to assign default `context` object properties. */
  var contextProps = [
    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
  ];

  /** Used to make template sourceURLs easier to identify. */
  var templateCounter = -1;

  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
  typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
  typedArrayTags[errorTag] = typedArrayTags[funcTag] =
  typedArrayTags[mapTag] = typedArrayTags[numberTag] =
  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
  typedArrayTags[setTag] = typedArrayTags[stringTag] =
  typedArrayTags[weakMapTag] = false;

  /** Used to identify `toStringTag` values supported by `_.clone`. */
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] =
  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
  cloneableTags[boolTag] = cloneableTags[dateTag] =
  cloneableTags[float32Tag] = cloneableTags[float64Tag] =
  cloneableTags[int8Tag] = cloneableTags[int16Tag] =
  cloneableTags[int32Tag] = cloneableTags[mapTag] =
  cloneableTags[numberTag] = cloneableTags[objectTag] =
  cloneableTags[regexpTag] = cloneableTags[setTag] =
  cloneableTags[stringTag] = cloneableTags[symbolTag] =
  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] =
  cloneableTags[weakMapTag] = false;

  /** Used to map Latin Unicode letters to basic Latin letters. */
  var deburredLetters = {
    // Latin-1 Supplement block.
    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
    '\xc7': 'C',  '\xe7': 'c',
    '\xd0': 'D',  '\xf0': 'd',
    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
    '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
    '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
    '\xd1': 'N',  '\xf1': 'n',
    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
    '\xc6': 'Ae', '\xe6': 'ae',
    '\xde': 'Th', '\xfe': 'th',
    '\xdf': 'ss',
    // Latin Extended-A block.
    '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
    '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
    '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
    '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
    '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
    '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
    '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
    '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
    '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
    '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
    '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
    '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
    '\u0134': 'J',  '\u0135': 'j',
    '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
    '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
    '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
    '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
    '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
    '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
    '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
    '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
    '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
    '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
    '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
    '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
    '\u0163': 't',  '\u0165': 't', '\u0167': 't',
    '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
    '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
    '\u0174': 'W',  '\u0175': 'w',
    '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
    '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
    '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
    '\u0132': 'IJ', '\u0133': 'ij',
    '\u0152': 'Oe', '\u0153': 'oe',
    '\u0149': "'n", '\u017f': 's'
  };

  /** Used to map characters to HTML entities. */
  var htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;'
  };

  /** Used to map HTML entities to characters. */
  var htmlUnescapes = {
    '&amp;': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&#39;': "'"
  };

  /** Used to escape characters for inclusion in compiled string literals. */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  /** Built-in method references without a dependency on `root`. */
  var freeParseFloat = parseFloat,
      freeParseInt = parseInt;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = typeof __webpack_require__.g == 'object' && __webpack_require__.g && __webpack_require__.g.Object === Object && __webpack_require__.g;

  /** Detect free variable `self`. */
  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

  /** Used as a reference to the global object. */
  var root = freeGlobal || freeSelf || Function('return this')();

  /** Detect free variable `exports`. */
  var freeExports =  true && exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = freeExports && "object" == 'object' && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports;

  /** Detect free variable `process` from Node.js. */
  var freeProcess = moduleExports && freeGlobal.process;

  /** Used to access faster Node.js helpers. */
  var nodeUtil = (function() {
    try {
      // Use `util.types` for Node.js 10+.
      var types = freeModule && freeModule.require && freeModule.require('util').types;

      if (types) {
        return types;
      }

      // Legacy `process.binding('util')` for Node.js < 10.
      return freeProcess && freeProcess.binding && freeProcess.binding('util');
    } catch (e) {}
  }());

  /* Node.js helper references. */
  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
      nodeIsDate = nodeUtil && nodeUtil.isDate,
      nodeIsMap = nodeUtil && nodeUtil.isMap,
      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
      nodeIsSet = nodeUtil && nodeUtil.isSet,
      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

  /*--------------------------------------------------------------------------*/

  /**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} args The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */
  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0: return func.call(thisArg);
      case 1: return func.call(thisArg, args[0]);
      case 2: return func.call(thisArg, args[0], args[1]);
      case 3: return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }

  /**
   * A specialized version of `baseAggregator` for arrays.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} setter The function to set `accumulator` values.
   * @param {Function} iteratee The iteratee to transform keys.
   * @param {Object} accumulator The initial aggregated object.
   * @returns {Function} Returns `accumulator`.
   */
  function arrayAggregator(array, setter, iteratee, accumulator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      var value = array[index];
      setter(accumulator, value, iteratee(value), array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEach(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.forEachRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEachRight(array, iteratee) {
    var length = array == null ? 0 : array.length;

    while (length--) {
      if (iteratee(array[length], length, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.every` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if all elements pass the predicate check,
   *  else `false`.
   */
  function arrayEvery(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (!predicate(array[index], index, array)) {
        return false;
      }
    }
    return true;
  }

  /**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */
  function arrayFilter(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }
    return result;
  }

  /**
   * A specialized version of `_.includes` for arrays without support for
   * specifying an index to search from.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludes(array, value) {
    var length = array == null ? 0 : array.length;
    return !!length && baseIndexOf(array, value, 0) > -1;
  }

  /**
   * This function is like `arrayIncludes` except that it accepts a comparator.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludesWith(array, value, comparator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (comparator(value, array[index])) {
        return true;
      }
    }
    return false;
  }

  /**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */
  function arrayMap(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }

  /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */
  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }

  /**
   * A specialized version of `_.reduce` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the first element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduce(array, iteratee, accumulator, initAccum) {
    var index = -1,
        length = array == null ? 0 : array.length;

    if (initAccum && length) {
      accumulator = array[++index];
    }
    while (++index < length) {
      accumulator = iteratee(accumulator, array[index], index, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.reduceRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the last element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduceRight(array, iteratee, accumulator, initAccum) {
    var length = array == null ? 0 : array.length;
    if (initAccum && length) {
      accumulator = array[--length];
    }
    while (length--) {
      accumulator = iteratee(accumulator, array[length], length, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */
  function arraySome(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  }

  /**
   * Gets the size of an ASCII `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  var asciiSize = baseProperty('length');

  /**
   * Converts an ASCII `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function asciiToArray(string) {
    return string.split('');
  }

  /**
   * Splits an ASCII `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function asciiWords(string) {
    return string.match(reAsciiWord) || [];
  }

  /**
   * The base implementation of methods like `_.findKey` and `_.findLastKey`,
   * without support for iteratee shorthands, which iterates over `collection`
   * using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the found element or its key, else `undefined`.
   */
  function baseFindKey(collection, predicate, eachFunc) {
    var result;
    eachFunc(collection, function(value, key, collection) {
      if (predicate(value, key, collection)) {
        result = key;
        return false;
      }
    });
    return result;
  }

  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseFindIndex(array, predicate, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 1 : -1);

    while ((fromRight ? index-- : ++index < length)) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    return value === value
      ? strictIndexOf(array, value, fromIndex)
      : baseFindIndex(array, baseIsNaN, fromIndex);
  }

  /**
   * This function is like `baseIndexOf` except that it accepts a comparator.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOfWith(array, value, fromIndex, comparator) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (comparator(array[index], value)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.isNaN` without support for number objects.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
   */
  function baseIsNaN(value) {
    return value !== value;
  }

  /**
   * The base implementation of `_.mean` and `_.meanBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the mean.
   */
  function baseMean(array, iteratee) {
    var length = array == null ? 0 : array.length;
    return length ? (baseSum(array, iteratee) / length) : NAN;
  }

  /**
   * The base implementation of `_.property` without support for deep paths.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @returns {Function} Returns the new accessor function.
   */
  function baseProperty(key) {
    return function(object) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.propertyOf` without support for deep paths.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Function} Returns the new accessor function.
   */
  function basePropertyOf(object) {
    return function(key) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.reduce` and `_.reduceRight`, without support
   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} accumulator The initial value.
   * @param {boolean} initAccum Specify using the first or last element of
   *  `collection` as the initial value.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the accumulated value.
   */
  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
    eachFunc(collection, function(value, index, collection) {
      accumulator = initAccum
        ? (initAccum = false, value)
        : iteratee(accumulator, value, index, collection);
    });
    return accumulator;
  }

  /**
   * The base implementation of `_.sortBy` which uses `comparer` to define the
   * sort order of `array` and replaces criteria objects with their corresponding
   * values.
   *
   * @private
   * @param {Array} array The array to sort.
   * @param {Function} comparer The function to define sort order.
   * @returns {Array} Returns `array`.
   */
  function baseSortBy(array, comparer) {
    var length = array.length;

    array.sort(comparer);
    while (length--) {
      array[length] = array[length].value;
    }
    return array;
  }

  /**
   * The base implementation of `_.sum` and `_.sumBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the sum.
   */
  function baseSum(array, iteratee) {
    var result,
        index = -1,
        length = array.length;

    while (++index < length) {
      var current = iteratee(array[index]);
      if (current !== undefined) {
        result = result === undefined ? current : (result + current);
      }
    }
    return result;
  }

  /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */
  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }

  /**
   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
   * of key-value pairs for `object` corresponding to the property names of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the key-value pairs.
   */
  function baseToPairs(object, props) {
    return arrayMap(props, function(key) {
      return [key, object[key]];
    });
  }

  /**
   * The base implementation of `_.trim`.
   *
   * @private
   * @param {string} string The string to trim.
   * @returns {string} Returns the trimmed string.
   */
  function baseTrim(string) {
    return string
      ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')
      : string;
  }

  /**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */
  function baseUnary(func) {
    return function(value) {
      return func(value);
    };
  }

  /**
   * The base implementation of `_.values` and `_.valuesIn` which creates an
   * array of `object` property values corresponding to the property names
   * of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the array of property values.
   */
  function baseValues(object, props) {
    return arrayMap(props, function(key) {
      return object[key];
    });
  }

  /**
   * Checks if a `cache` value for `key` exists.
   *
   * @private
   * @param {Object} cache The cache to query.
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function cacheHas(cache, key) {
    return cache.has(key);
  }

  /**
   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the first unmatched string symbol.
   */
  function charsStartIndex(strSymbols, chrSymbols) {
    var index = -1,
        length = strSymbols.length;

    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the last unmatched string symbol.
   */
  function charsEndIndex(strSymbols, chrSymbols) {
    var index = strSymbols.length;

    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Gets the number of `placeholder` occurrences in `array`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} placeholder The placeholder to search for.
   * @returns {number} Returns the placeholder count.
   */
  function countHolders(array, placeholder) {
    var length = array.length,
        result = 0;

    while (length--) {
      if (array[length] === placeholder) {
        ++result;
      }
    }
    return result;
  }

  /**
   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
   * letters to basic Latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */
  var deburrLetter = basePropertyOf(deburredLetters);

  /**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  var escapeHtmlChar = basePropertyOf(htmlEscapes);

  /**
   * Used by `_.template` to escape characters for inclusion in compiled string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeStringChar(chr) {
    return '\\' + stringEscapes[chr];
  }

  /**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function getValue(object, key) {
    return object == null ? undefined : object[key];
  }

  /**
   * Checks if `string` contains Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
   */
  function hasUnicode(string) {
    return reHasUnicode.test(string);
  }

  /**
   * Checks if `string` contains a word composed of Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a word is found, else `false`.
   */
  function hasUnicodeWord(string) {
    return reHasUnicodeWord.test(string);
  }

  /**
   * Converts `iterator` to an array.
   *
   * @private
   * @param {Object} iterator The iterator to convert.
   * @returns {Array} Returns the converted array.
   */
  function iteratorToArray(iterator) {
    var data,
        result = [];

    while (!(data = iterator.next()).done) {
      result.push(data.value);
    }
    return result;
  }

  /**
   * Converts `map` to its key-value pairs.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the key-value pairs.
   */
  function mapToArray(map) {
    var index = -1,
        result = Array(map.size);

    map.forEach(function(value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  /**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */
  function overArg(func, transform) {
    return function(arg) {
      return func(transform(arg));
    };
  }

  /**
   * Replaces all `placeholder` elements in `array` with an internal placeholder
   * and returns an array of their indexes.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {*} placeholder The placeholder to replace.
   * @returns {Array} Returns the new array of placeholder indexes.
   */
  function replaceHolders(array, placeholder) {
    var index = -1,
        length = array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (value === placeholder || value === PLACEHOLDER) {
        array[index] = PLACEHOLDER;
        result[resIndex++] = index;
      }
    }
    return result;
  }

  /**
   * Converts `set` to an array of its values.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the values.
   */
  function setToArray(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = value;
    });
    return result;
  }

  /**
   * Converts `set` to its value-value pairs.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the value-value pairs.
   */
  function setToPairs(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = [value, value];
    });
    return result;
  }

  /**
   * A specialized version of `_.indexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictIndexOf(array, value, fromIndex) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  /**
   * A specialized version of `_.lastIndexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictLastIndexOf(array, value, fromIndex) {
    var index = fromIndex + 1;
    while (index--) {
      if (array[index] === value) {
        return index;
      }
    }
    return index;
  }

  /**
   * Gets the number of symbols in `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the string size.
   */
  function stringSize(string) {
    return hasUnicode(string)
      ? unicodeSize(string)
      : asciiSize(string);
  }

  /**
   * Converts `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function stringToArray(string) {
    return hasUnicode(string)
      ? unicodeToArray(string)
      : asciiToArray(string);
  }

  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
   * character of `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the index of the last non-whitespace character.
   */
  function trimmedEndIndex(string) {
    var index = string.length;

    while (index-- && reWhitespace.test(string.charAt(index))) {}
    return index;
  }

  /**
   * Used by `_.unescape` to convert HTML entities to characters.
   *
   * @private
   * @param {string} chr The matched character to unescape.
   * @returns {string} Returns the unescaped character.
   */
  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

  /**
   * Gets the size of a Unicode `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  function unicodeSize(string) {
    var result = reUnicode.lastIndex = 0;
    while (reUnicode.test(string)) {
      ++result;
    }
    return result;
  }

  /**
   * Converts a Unicode `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function unicodeToArray(string) {
    return string.match(reUnicode) || [];
  }

  /**
   * Splits a Unicode `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function unicodeWords(string) {
    return string.match(reUnicodeWord) || [];
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Create a new pristine `lodash` function using the `context` object.
   *
   * @static
   * @memberOf _
   * @since 1.1.0
   * @category Util
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns a new `lodash` function.
   * @example
   *
   * _.mixin({ 'foo': _.constant('foo') });
   *
   * var lodash = _.runInContext();
   * lodash.mixin({ 'bar': lodash.constant('bar') });
   *
   * _.isFunction(_.foo);
   * // => true
   * _.isFunction(_.bar);
   * // => false
   *
   * lodash.isFunction(lodash.foo);
   * // => false
   * lodash.isFunction(lodash.bar);
   * // => true
   *
   * // Create a suped-up `defer` in Node.js.
   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
   */
  var runInContext = (function runInContext(context) {
    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));

    /** Built-in constructor references. */
    var Array = context.Array,
        Date = context.Date,
        Error = context.Error,
        Function = context.Function,
        Math = context.Math,
        Object = context.Object,
        RegExp = context.RegExp,
        String = context.String,
        TypeError = context.TypeError;

    /** Used for built-in method references. */
    var arrayProto = Array.prototype,
        funcProto = Function.prototype,
        objectProto = Object.prototype;

    /** Used to detect overreaching core-js shims. */
    var coreJsData = context['__core-js_shared__'];

    /** Used to resolve the decompiled source of functions. */
    var funcToString = funcProto.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /** Used to generate unique IDs. */
    var idCounter = 0;

    /** Used to detect methods masquerading as native. */
    var maskSrcKey = (function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
      return uid ? ('Symbol(src)_1.' + uid) : '';
    }());

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var nativeObjectToString = objectProto.toString;

    /** Used to infer the `Object` constructor. */
    var objectCtorString = funcToString.call(Object);

    /** Used to restore the original `_` reference in `_.noConflict`. */
    var oldDash = root._;

    /** Used to detect if a method is native. */
    var reIsNative = RegExp('^' +
      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    );

    /** Built-in value references. */
    var Buffer = moduleExports ? context.Buffer : undefined,
        Symbol = context.Symbol,
        Uint8Array = context.Uint8Array,
        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
        getPrototype = overArg(Object.getPrototypeOf, Object),
        objectCreate = Object.create,
        propertyIsEnumerable = objectProto.propertyIsEnumerable,
        splice = arrayProto.splice,
        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,
        symIterator = Symbol ? Symbol.iterator : undefined,
        symToStringTag = Symbol ? Symbol.toStringTag : undefined;

    var defineProperty = (function() {
      try {
        var func = getNative(Object, 'defineProperty');
        func({}, '', {});
        return func;
      } catch (e) {}
    }());

    /** Mocked built-ins. */
    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
        ctxNow = Date && Date.now !== root.Date.now && Date.now,
        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeCeil = Math.ceil,
        nativeFloor = Math.floor,
        nativeGetSymbols = Object.getOwnPropertySymbols,
        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
        nativeIsFinite = context.isFinite,
        nativeJoin = arrayProto.join,
        nativeKeys = overArg(Object.keys, Object),
        nativeMax = Math.max,
        nativeMin = Math.min,
        nativeNow = Date.now,
        nativeParseInt = context.parseInt,
        nativeRandom = Math.random,
        nativeReverse = arrayProto.reverse;

    /* Built-in method references that are verified to be native. */
    var DataView = getNative(context, 'DataView'),
        Map = getNative(context, 'Map'),
        Promise = getNative(context, 'Promise'),
        Set = getNative(context, 'Set'),
        WeakMap = getNative(context, 'WeakMap'),
        nativeCreate = getNative(Object, 'create');

    /** Used to store function metadata. */
    var metaMap = WeakMap && new WeakMap;

    /** Used to lookup unminified function names. */
    var realNames = {};

    /** Used to detect maps, sets, and weakmaps. */
    var dataViewCtorString = toSource(DataView),
        mapCtorString = toSource(Map),
        promiseCtorString = toSource(Promise),
        setCtorString = toSource(Set),
        weakMapCtorString = toSource(WeakMap);

    /** Used to convert symbols to primitives and strings. */
    var symbolProto = Symbol ? Symbol.prototype : undefined,
        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
        symbolToString = symbolProto ? symbolProto.toString : undefined;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object which wraps `value` to enable implicit method
     * chain sequences. Methods that operate on and return arrays, collections,
     * and functions can be chained together. Methods that retrieve a single value
     * or may return a primitive value will automatically end the chain sequence
     * and return the unwrapped value. Otherwise, the value must be unwrapped
     * with `_#value`.
     *
     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
     * enabled using `_.chain`.
     *
     * The execution of chained methods is lazy, that is, it's deferred until
     * `_#value` is implicitly or explicitly called.
     *
     * Lazy evaluation allows several methods to support shortcut fusion.
     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
     * the creation of intermediate arrays and can greatly reduce the number of
     * iteratee executions. Sections of a chain sequence qualify for shortcut
     * fusion if the section is applied to an array and iteratees accept only
     * one argument. The heuristic for whether a section qualifies for shortcut
     * fusion is subject to change.
     *
     * Chaining is supported in custom builds as long as the `_#value` method is
     * directly or indirectly included in the build.
     *
     * In addition to lodash methods, wrappers have `Array` and `String` methods.
     *
     * The wrapper `Array` methods are:
     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
     *
     * The wrapper `String` methods are:
     * `replace` and `split`
     *
     * The wrapper methods that support shortcut fusion are:
     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
     *
     * The chainable wrapper methods are:
     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
     * `zipObject`, `zipObjectDeep`, and `zipWith`
     *
     * The wrapper methods that are **not** chainable by default are:
     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
     * `upperFirst`, `value`, and `words`
     *
     * @name _
     * @constructor
     * @category Seq
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // Returns an unwrapped value.
     * wrapped.reduce(_.add);
     * // => 6
     *
     * // Returns a wrapped value.
     * var squares = wrapped.map(square);
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */
    function lodash(value) {
      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
        if (value instanceof LodashWrapper) {
          return value;
        }
        if (hasOwnProperty.call(value, '__wrapped__')) {
          return wrapperClone(value);
        }
      }
      return new LodashWrapper(value);
    }

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} proto The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    var baseCreate = (function() {
      function object() {}
      return function(proto) {
        if (!isObject(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object.prototype = proto;
        var result = new object;
        object.prototype = undefined;
        return result;
      };
    }());

    /**
     * The function whose prototype chain sequence wrappers inherit from.
     *
     * @private
     */
    function baseLodash() {
      // No operation performed.
    }

    /**
     * The base constructor for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap.
     * @param {boolean} [chainAll] Enable explicit method chain sequences.
     */
    function LodashWrapper(value, chainAll) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__chain__ = !!chainAll;
      this.__index__ = 0;
      this.__values__ = undefined;
    }

    /**
     * By default, the template delimiters used by lodash are like those in
     * embedded Ruby (ERB) as well as ES2015 template strings. Change the
     * following template settings to use alternative delimiters.
     *
     * @static
     * @memberOf _
     * @type {Object}
     */
    lodash.templateSettings = {

      /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'escape': reEscape,

      /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'evaluate': reEvaluate,

      /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'interpolate': reInterpolate,

      /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type {string}
       */
      'variable': '',

      /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type {Object}
       */
      'imports': {

        /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type {Function}
         */
        '_': lodash
      }
    };

    // Ensure wrappers are instances of `baseLodash`.
    lodash.prototype = baseLodash.prototype;
    lodash.prototype.constructor = lodash;

    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
    LodashWrapper.prototype.constructor = LodashWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
     *
     * @private
     * @constructor
     * @param {*} value The value to wrap.
     */
    function LazyWrapper(value) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__dir__ = 1;
      this.__filtered__ = false;
      this.__iteratees__ = [];
      this.__takeCount__ = MAX_ARRAY_LENGTH;
      this.__views__ = [];
    }

    /**
     * Creates a clone of the lazy wrapper object.
     *
     * @private
     * @name clone
     * @memberOf LazyWrapper
     * @returns {Object} Returns the cloned `LazyWrapper` object.
     */
    function lazyClone() {
      var result = new LazyWrapper(this.__wrapped__);
      result.__actions__ = copyArray(this.__actions__);
      result.__dir__ = this.__dir__;
      result.__filtered__ = this.__filtered__;
      result.__iteratees__ = copyArray(this.__iteratees__);
      result.__takeCount__ = this.__takeCount__;
      result.__views__ = copyArray(this.__views__);
      return result;
    }

    /**
     * Reverses the direction of lazy iteration.
     *
     * @private
     * @name reverse
     * @memberOf LazyWrapper
     * @returns {Object} Returns the new reversed `LazyWrapper` object.
     */
    function lazyReverse() {
      if (this.__filtered__) {
        var result = new LazyWrapper(this);
        result.__dir__ = -1;
        result.__filtered__ = true;
      } else {
        result = this.clone();
        result.__dir__ *= -1;
      }
      return result;
    }

    /**
     * Extracts the unwrapped value from its lazy wrapper.
     *
     * @private
     * @name value
     * @memberOf LazyWrapper
     * @returns {*} Returns the unwrapped value.
     */
    function lazyValue() {
      var array = this.__wrapped__.value(),
          dir = this.__dir__,
          isArr = isArray(array),
          isRight = dir < 0,
          arrLength = isArr ? array.length : 0,
          view = getView(0, arrLength, this.__views__),
          start = view.start,
          end = view.end,
          length = end - start,
          index = isRight ? end : (start - 1),
          iteratees = this.__iteratees__,
          iterLength = iteratees.length,
          resIndex = 0,
          takeCount = nativeMin(length, this.__takeCount__);

      if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
        return baseWrapperValue(array, this.__actions__);
      }
      var result = [];

      outer:
      while (length-- && resIndex < takeCount) {
        index += dir;

        var iterIndex = -1,
            value = array[index];

        while (++iterIndex < iterLength) {
          var data = iteratees[iterIndex],
              iteratee = data.iteratee,
              type = data.type,
              computed = iteratee(value);

          if (type == LAZY_MAP_FLAG) {
            value = computed;
          } else if (!computed) {
            if (type == LAZY_FILTER_FLAG) {
              continue outer;
            } else {
              break outer;
            }
          }
        }
        result[resIndex++] = value;
      }
      return result;
    }

    // Ensure `LazyWrapper` is an instance of `baseLodash`.
    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
    LazyWrapper.prototype.constructor = LazyWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a hash object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Hash(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the hash.
     *
     * @private
     * @name clear
     * @memberOf Hash
     */
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the hash.
     *
     * @private
     * @name delete
     * @memberOf Hash
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the hash value for `key`.
     *
     * @private
     * @name get
     * @memberOf Hash
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? undefined : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : undefined;
    }

    /**
     * Checks if a hash value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Hash
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
    }

    /**
     * Sets the hash `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Hash
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the hash instance.
     */
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
      return this;
    }

    // Add methods to `Hash`.
    Hash.prototype.clear = hashClear;
    Hash.prototype['delete'] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an list cache object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function ListCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the list cache.
     *
     * @private
     * @name clear
     * @memberOf ListCache
     */
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the list cache.
     *
     * @private
     * @name delete
     * @memberOf ListCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function listCacheDelete(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }

    /**
     * Gets the list cache value for `key`.
     *
     * @private
     * @name get
     * @memberOf ListCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function listCacheGet(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      return index < 0 ? undefined : data[index][1];
    }

    /**
     * Checks if a list cache value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf ListCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }

    /**
     * Sets the list cache `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf ListCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the list cache instance.
     */
    function listCacheSet(key, value) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }

    // Add methods to `ListCache`.
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype['delete'] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a map cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function MapCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the map.
     *
     * @private
     * @name clear
     * @memberOf MapCache
     */
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        'hash': new Hash,
        'map': new (Map || ListCache),
        'string': new Hash
      };
    }

    /**
     * Removes `key` and its value from the map.
     *
     * @private
     * @name delete
     * @memberOf MapCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function mapCacheDelete(key) {
      var result = getMapData(this, key)['delete'](key);
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the map value for `key`.
     *
     * @private
     * @name get
     * @memberOf MapCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }

    /**
     * Checks if a map value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf MapCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }

    /**
     * Sets the map `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf MapCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the map cache instance.
     */
    function mapCacheSet(key, value) {
      var data = getMapData(this, key),
          size = data.size;

      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }

    // Add methods to `MapCache`.
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype['delete'] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     *
     * Creates an array cache object to store unique values.
     *
     * @private
     * @constructor
     * @param {Array} [values] The values to cache.
     */
    function SetCache(values) {
      var index = -1,
          length = values == null ? 0 : values.length;

      this.__data__ = new MapCache;
      while (++index < length) {
        this.add(values[index]);
      }
    }

    /**
     * Adds `value` to the array cache.
     *
     * @private
     * @name add
     * @memberOf SetCache
     * @alias push
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache instance.
     */
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }

    /**
     * Checks if `value` is in the array cache.
     *
     * @private
     * @name has
     * @memberOf SetCache
     * @param {*} value The value to search for.
     * @returns {number} Returns `true` if `value` is found, else `false`.
     */
    function setCacheHas(value) {
      return this.__data__.has(value);
    }

    // Add methods to `SetCache`.
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a stack cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Stack(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }

    /**
     * Removes all key-value entries from the stack.
     *
     * @private
     * @name clear
     * @memberOf Stack
     */
    function stackClear() {
      this.__data__ = new ListCache;
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the stack.
     *
     * @private
     * @name delete
     * @memberOf Stack
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function stackDelete(key) {
      var data = this.__data__,
          result = data['delete'](key);

      this.size = data.size;
      return result;
    }

    /**
     * Gets the stack value for `key`.
     *
     * @private
     * @name get
     * @memberOf Stack
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function stackGet(key) {
      return this.__data__.get(key);
    }

    /**
     * Checks if a stack value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Stack
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function stackHas(key) {
      return this.__data__.has(key);
    }

    /**
     * Sets the stack `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Stack
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the stack cache instance.
     */
    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }

    // Add methods to `Stack`.
    Stack.prototype.clear = stackClear;
    Stack.prototype['delete'] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of the enumerable property names of the array-like `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @param {boolean} inherited Specify returning inherited property names.
     * @returns {Array} Returns the array of property names.
     */
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value),
          isArg = !isArr && isArguments(value),
          isBuff = !isArr && !isArg && isBuffer(value),
          isType = !isArr && !isArg && !isBuff && isTypedArray(value),
          skipIndexes = isArr || isArg || isBuff || isType,
          result = skipIndexes ? baseTimes(value.length, String) : [],
          length = result.length;

      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) &&
            !(skipIndexes && (
               // Safari 9 has enumerable `arguments.length` in strict mode.
               key == 'length' ||
               // Node.js 0.10 has enumerable non-index properties on buffers.
               (isBuff && (key == 'offset' || key == 'parent')) ||
               // PhantomJS 2 has enumerable non-index properties on typed arrays.
               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
               // Skip index properties.
               isIndex(key, length)
            ))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.sample` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @returns {*} Returns the random element.
     */
    function arraySample(array) {
      var length = array.length;
      return length ? array[baseRandom(0, length - 1)] : undefined;
    }

    /**
     * A specialized version of `_.sampleSize` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function arraySampleSize(array, n) {
      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
    }

    /**
     * A specialized version of `_.shuffle` for arrays.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function arrayShuffle(array) {
      return shuffleSelf(copyArray(array));
    }

    /**
     * This function is like `assignValue` except that it doesn't assign
     * `undefined` values.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignMergeValue(object, key, value) {
      if ((value !== undefined && !eq(object[key], value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Assigns `value` to `key` of `object` if the existing value is not equivalent
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Gets the index at which the `key` is found in `array` of key-value pairs.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} key The key to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }

    /**
     * Aggregates elements of `collection` on `accumulator` with keys transformed
     * by `iteratee` and values set by `setter`.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform keys.
     * @param {Object} accumulator The initial aggregated object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseAggregator(collection, setter, iteratee, accumulator) {
      baseEach(collection, function(value, key, collection) {
        setter(accumulator, value, iteratee(value), collection);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.assign` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssign(object, source) {
      return object && copyObject(source, keys(source), object);
    }

    /**
     * The base implementation of `_.assignIn` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssignIn(object, source) {
      return object && copyObject(source, keysIn(source), object);
    }

    /**
     * The base implementation of `assignValue` and `assignMergeValue` without
     * value checks.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function baseAssignValue(object, key, value) {
      if (key == '__proto__' && defineProperty) {
        defineProperty(object, key, {
          'configurable': true,
          'enumerable': true,
          'value': value,
          'writable': true
        });
      } else {
        object[key] = value;
      }
    }

    /**
     * The base implementation of `_.at` without support for individual paths.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {string[]} paths The property paths to pick.
     * @returns {Array} Returns the picked elements.
     */
    function baseAt(object, paths) {
      var index = -1,
          length = paths.length,
          result = Array(length),
          skip = object == null;

      while (++index < length) {
        result[index] = skip ? undefined : get(object, paths[index]);
      }
      return result;
    }

    /**
     * The base implementation of `_.clamp` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     */
    function baseClamp(number, lower, upper) {
      if (number === number) {
        if (upper !== undefined) {
          number = number <= upper ? number : upper;
        }
        if (lower !== undefined) {
          number = number >= lower ? number : lower;
        }
      }
      return number;
    }

    /**
     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
     * traversed objects.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Deep clone
     *  2 - Flatten inherited properties
     *  4 - Clone symbols
     * @param {Function} [customizer] The function to customize cloning.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The parent object of `value`.
     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone(value, bitmask, customizer, key, object, stack) {
      var result,
          isDeep = bitmask & CLONE_DEEP_FLAG,
          isFlat = bitmask & CLONE_FLAT_FLAG,
          isFull = bitmask & CLONE_SYMBOLS_FLAG;

      if (customizer) {
        result = object ? customizer(value, key, object, stack) : customizer(value);
      }
      if (result !== undefined) {
        return result;
      }
      if (!isObject(value)) {
        return value;
      }
      var isArr = isArray(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return copyArray(value, result);
        }
      } else {
        var tag = getTag(value),
            isFunc = tag == funcTag || tag == genTag;

        if (isBuffer(value)) {
          return cloneBuffer(value, isDeep);
        }
        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
          result = (isFlat || isFunc) ? {} : initCloneObject(value);
          if (!isDeep) {
            return isFlat
              ? copySymbolsIn(value, baseAssignIn(result, value))
              : copySymbols(value, baseAssign(result, value));
          }
        } else {
          if (!cloneableTags[tag]) {
            return object ? value : {};
          }
          result = initCloneByTag(value, tag, isDeep);
        }
      }
      // Check for circular references and return its corresponding clone.
      stack || (stack = new Stack);
      var stacked = stack.get(value);
      if (stacked) {
        return stacked;
      }
      stack.set(value, result);

      if (isSet(value)) {
        value.forEach(function(subValue) {
          result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
        });
      } else if (isMap(value)) {
        value.forEach(function(subValue, key) {
          result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
        });
      }

      var keysFunc = isFull
        ? (isFlat ? getAllKeysIn : getAllKeys)
        : (isFlat ? keysIn : keys);

      var props = isArr ? undefined : keysFunc(value);
      arrayEach(props || value, function(subValue, key) {
        if (props) {
          key = subValue;
          subValue = value[key];
        }
        // Recursively populate clone (susceptible to call stack limits).
        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
      });
      return result;
    }

    /**
     * The base implementation of `_.conforms` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     */
    function baseConforms(source) {
      var props = keys(source);
      return function(object) {
        return baseConformsTo(object, source, props);
      };
    }

    /**
     * The base implementation of `_.conformsTo` which accepts `props` to check.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     */
    function baseConformsTo(object, source, props) {
      var length = props.length;
      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (length--) {
        var key = props[length],
            predicate = source[key],
            value = object[key];

        if ((value === undefined && !(key in object)) || !predicate(value)) {
          return false;
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.delay` and `_.defer` which accepts `args`
     * to provide to `func`.
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {Array} args The arguments to provide to `func`.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    function baseDelay(func, wait, args) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return setTimeout(function() { func.apply(undefined, args); }, wait);
    }

    /**
     * The base implementation of methods like `_.difference` without support
     * for excluding multiple arrays or iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Array} values The values to exclude.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     */
    function baseDifference(array, values, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          isCommon = true,
          length = array.length,
          result = [],
          valuesLength = values.length;

      if (!length) {
        return result;
      }
      if (iteratee) {
        values = arrayMap(values, baseUnary(iteratee));
      }
      if (comparator) {
        includes = arrayIncludesWith;
        isCommon = false;
      }
      else if (values.length >= LARGE_ARRAY_SIZE) {
        includes = cacheHas;
        isCommon = false;
        values = new SetCache(values);
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee == null ? value : iteratee(value);

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var valuesIndex = valuesLength;
          while (valuesIndex--) {
            if (values[valuesIndex] === computed) {
              continue outer;
            }
          }
          result.push(value);
        }
        else if (!includes(values, computed, comparator)) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.forEach` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEach = createBaseEach(baseForOwn);

    /**
     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEachRight = createBaseEach(baseForOwnRight, true);

    /**
     * The base implementation of `_.every` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`
     */
    function baseEvery(collection, predicate) {
      var result = true;
      baseEach(collection, function(value, index, collection) {
        result = !!predicate(value, index, collection);
        return result;
      });
      return result;
    }

    /**
     * The base implementation of methods like `_.max` and `_.min` which accepts a
     * `comparator` to determine the extremum value.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The iteratee invoked per iteration.
     * @param {Function} comparator The comparator used to compare values.
     * @returns {*} Returns the extremum value.
     */
    function baseExtremum(array, iteratee, comparator) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        var value = array[index],
            current = iteratee(value);

        if (current != null && (computed === undefined
              ? (current === current && !isSymbol(current))
              : comparator(current, computed)
            )) {
          var computed = current,
              result = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.fill` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     */
    function baseFill(array, value, start, end) {
      var length = array.length;

      start = toInteger(start);
      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = (end === undefined || end > length) ? length : toInteger(end);
      if (end < 0) {
        end += length;
      }
      end = start > end ? 0 : toLength(end);
      while (start < end) {
        array[start++] = value;
      }
      return array;
    }

    /**
     * The base implementation of `_.filter` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function baseFilter(collection, predicate) {
      var result = [];
      baseEach(collection, function(value, index, collection) {
        if (predicate(value, index, collection)) {
          result.push(value);
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.flatten` with support for restricting flattening.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {number} depth The maximum recursion depth.
     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
     * @param {Array} [result=[]] The initial result value.
     * @returns {Array} Returns the new flattened array.
     */
    function baseFlatten(array, depth, predicate, isStrict, result) {
      var index = -1,
          length = array.length;

      predicate || (predicate = isFlattenable);
      result || (result = []);

      while (++index < length) {
        var value = array[index];
        if (depth > 0 && predicate(value)) {
          if (depth > 1) {
            // Recursively flatten arrays (susceptible to call stack limits).
            baseFlatten(value, depth - 1, predicate, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `baseForOwn` which iterates over `object`
     * properties returned by `keysFunc` and invokes `iteratee` for each property.
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseFor = createBaseFor();

    /**
     * This function is like `baseFor` except that it iterates over properties
     * in the opposite order.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseForRight = createBaseFor(true);

    /**
     * The base implementation of `_.forOwn` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwn(object, iteratee) {
      return object && baseFor(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwnRight(object, iteratee) {
      return object && baseForRight(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.functions` which creates an array of
     * `object` function property names filtered from `props`.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} props The property names to filter.
     * @returns {Array} Returns the function names.
     */
    function baseFunctions(object, props) {
      return arrayFilter(props, function(key) {
        return isFunction(object[key]);
      });
    }

    /**
     * The base implementation of `_.get` without support for default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @returns {*} Returns the resolved value.
     */
    function baseGet(object, path) {
      path = castPath(path, object);

      var index = 0,
          length = path.length;

      while (object != null && index < length) {
        object = object[toKey(path[index++])];
      }
      return (index && index == length) ? object : undefined;
    }

    /**
     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @param {Function} symbolsFunc The function to get the symbols of `object`.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    }

    /**
     * The base implementation of `getTag` without fallbacks for buggy environments.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    function baseGetTag(value) {
      if (value == null) {
        return value === undefined ? undefinedTag : nullTag;
      }
      return (symToStringTag && symToStringTag in Object(value))
        ? getRawTag(value)
        : objectToString(value);
    }

    /**
     * The base implementation of `_.gt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     */
    function baseGt(value, other) {
      return value > other;
    }

    /**
     * The base implementation of `_.has` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHas(object, key) {
      return object != null && hasOwnProperty.call(object, key);
    }

    /**
     * The base implementation of `_.hasIn` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHasIn(object, key) {
      return object != null && key in Object(object);
    }

    /**
     * The base implementation of `_.inRange` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to check.
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     */
    function baseInRange(number, start, end) {
      return number >= nativeMin(start, end) && number < nativeMax(start, end);
    }

    /**
     * The base implementation of methods like `_.intersection`, without support
     * for iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of shared values.
     */
    function baseIntersection(arrays, iteratee, comparator) {
      var includes = comparator ? arrayIncludesWith : arrayIncludes,
          length = arrays[0].length,
          othLength = arrays.length,
          othIndex = othLength,
          caches = Array(othLength),
          maxLength = Infinity,
          result = [];

      while (othIndex--) {
        var array = arrays[othIndex];
        if (othIndex && iteratee) {
          array = arrayMap(array, baseUnary(iteratee));
        }
        maxLength = nativeMin(array.length, maxLength);
        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
          ? new SetCache(othIndex && array)
          : undefined;
      }
      array = arrays[0];

      var index = -1,
          seen = caches[0];

      outer:
      while (++index < length && result.length < maxLength) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (!(seen
              ? cacheHas(seen, computed)
              : includes(result, computed, comparator)
            )) {
          othIndex = othLength;
          while (--othIndex) {
            var cache = caches[othIndex];
            if (!(cache
                  ? cacheHas(cache, computed)
                  : includes(arrays[othIndex], computed, comparator))
                ) {
              continue outer;
            }
          }
          if (seen) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.invert` and `_.invertBy` which inverts
     * `object` with values transformed by `iteratee` and set by `setter`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform values.
     * @param {Object} accumulator The initial inverted object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseInverter(object, setter, iteratee, accumulator) {
      baseForOwn(object, function(value, key, object) {
        setter(accumulator, iteratee(value), key, object);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.invoke` without support for individual
     * method arguments.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {Array} args The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     */
    function baseInvoke(object, path, args) {
      path = castPath(path, object);
      object = parent(object, path);
      var func = object == null ? object : object[toKey(last(path))];
      return func == null ? undefined : apply(func, object, args);
    }

    /**
     * The base implementation of `_.isArguments`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     */
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }

    /**
     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     */
    function baseIsArrayBuffer(value) {
      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
    }

    /**
     * The base implementation of `_.isDate` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     */
    function baseIsDate(value) {
      return isObjectLike(value) && baseGetTag(value) == dateTag;
    }

    /**
     * The base implementation of `_.isEqual` which supports partial comparisons
     * and tracks traversed objects.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Unordered comparison
     *  2 - Partial comparison
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(value, other, bitmask, customizer, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
    }

    /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray(object),
          othIsArr = isArray(other),
          objTag = objIsArr ? arrayTag : getTag(object),
          othTag = othIsArr ? arrayTag : getTag(other);

      objTag = objTag == argsTag ? objectTag : objTag;
      othTag = othTag == argsTag ? objectTag : othTag;

      var objIsObj = objTag == objectTag,
          othIsObj = othTag == objectTag,
          isSameTag = objTag == othTag;

      if (isSameTag && isBuffer(object)) {
        if (!isBuffer(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack);
        return (objIsArr || isTypedArray(object))
          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object,
              othUnwrapped = othIsWrapped ? other.value() : other;

          stack || (stack = new Stack);
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack);
      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    }

    /**
     * The base implementation of `_.isMap` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     */
    function baseIsMap(value) {
      return isObjectLike(value) && getTag(value) == mapTag;
    }

    /**
     * The base implementation of `_.isMatch` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Array} matchData The property names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */
    function baseIsMatch(object, source, matchData, customizer) {
      var index = matchData.length,
          length = index,
          noCustomizer = !customizer;

      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index--) {
        var data = matchData[index];
        if ((noCustomizer && data[2])
              ? data[1] !== object[data[0]]
              : !(data[0] in object)
            ) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0],
            objValue = object[key],
            srcValue = data[1];

        if (noCustomizer && data[2]) {
          if (objValue === undefined && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack;
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object, source, stack);
          }
          if (!(result === undefined
                ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
                : result
              )) {
            return false;
          }
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.isNative` without bad shim checks.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     */
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }

    /**
     * The base implementation of `_.isRegExp` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     */
    function baseIsRegExp(value) {
      return isObjectLike(value) && baseGetTag(value) == regexpTag;
    }

    /**
     * The base implementation of `_.isSet` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     */
    function baseIsSet(value) {
      return isObjectLike(value) && getTag(value) == setTag;
    }

    /**
     * The base implementation of `_.isTypedArray` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     */
    function baseIsTypedArray(value) {
      return isObjectLike(value) &&
        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }

    /**
     * The base implementation of `_.iteratee`.
     *
     * @private
     * @param {*} [value=_.identity] The value to convert to an iteratee.
     * @returns {Function} Returns the iteratee.
     */
    function baseIteratee(value) {
      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
      if (typeof value == 'function') {
        return value;
      }
      if (value == null) {
        return identity;
      }
      if (typeof value == 'object') {
        return isArray(value)
          ? baseMatchesProperty(value[0], value[1])
          : baseMatches(value);
      }
      return property(value);
    }

    /**
     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != 'constructor') {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeysIn(object) {
      if (!isObject(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype(object),
          result = [];

      for (var key in object) {
        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.lt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     */
    function baseLt(value, other) {
      return value < other;
    }

    /**
     * The base implementation of `_.map` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function baseMap(collection, iteratee) {
      var index = -1,
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value, key, collection) {
        result[++index] = iteratee(value, key, collection);
      });
      return result;
    }

    /**
     * The base implementation of `_.matches` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
      }
      return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }

    /**
     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatchesProperty(path, srcValue) {
      if (isKey(path) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey(path), srcValue);
      }
      return function(object) {
        var objValue = get(object, path);
        return (objValue === undefined && objValue === srcValue)
          ? hasIn(object, path)
          : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
      };
    }

    /**
     * The base implementation of `_.merge` without support for multiple sources.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMerge(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      baseFor(source, function(srcValue, key) {
        stack || (stack = new Stack);
        if (isObject(srcValue)) {
          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        }
        else {
          var newValue = customizer
            ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
            : undefined;

          if (newValue === undefined) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      }, keysIn);
    }

    /**
     * A specialized version of `baseMerge` for arrays and objects which performs
     * deep merges and tracks traversed objects enabling objects with circular
     * references to be merged.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {string} key The key of the value to merge.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} mergeFunc The function to merge values.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = safeGet(object, key),
          srcValue = safeGet(source, key),
          stacked = stack.get(srcValue);

      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }
      var newValue = customizer
        ? customizer(objValue, srcValue, (key + ''), object, source, stack)
        : undefined;

      var isCommon = newValue === undefined;

      if (isCommon) {
        var isArr = isArray(srcValue),
            isBuff = !isArr && isBuffer(srcValue),
            isTyped = !isArr && !isBuff && isTypedArray(srcValue);

        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
          if (isArray(objValue)) {
            newValue = objValue;
          }
          else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          }
          else if (isBuff) {
            isCommon = false;
            newValue = cloneBuffer(srcValue, true);
          }
          else if (isTyped) {
            isCommon = false;
            newValue = cloneTypedArray(srcValue, true);
          }
          else {
            newValue = [];
          }
        }
        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          newValue = objValue;
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          }
          else if (!isObject(objValue) || isFunction(objValue)) {
            newValue = initCloneObject(srcValue);
          }
        }
        else {
          isCommon = false;
        }
      }
      if (isCommon) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack['delete'](srcValue);
      }
      assignMergeValue(object, key, newValue);
    }

    /**
     * The base implementation of `_.nth` which doesn't coerce arguments.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {number} n The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     */
    function baseNth(array, n) {
      var length = array.length;
      if (!length) {
        return;
      }
      n += n < 0 ? length : 0;
      return isIndex(n, length) ? array[n] : undefined;
    }

    /**
     * The base implementation of `_.orderBy` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {string[]} orders The sort orders of `iteratees`.
     * @returns {Array} Returns the new sorted array.
     */
    function baseOrderBy(collection, iteratees, orders) {
      if (iteratees.length) {
        iteratees = arrayMap(iteratees, function(iteratee) {
          if (isArray(iteratee)) {
            return function(value) {
              return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);
            }
          }
          return iteratee;
        });
      } else {
        iteratees = [identity];
      }

      var index = -1;
      iteratees = arrayMap(iteratees, baseUnary(getIteratee()));

      var result = baseMap(collection, function(value, key, collection) {
        var criteria = arrayMap(iteratees, function(iteratee) {
          return iteratee(value);
        });
        return { 'criteria': criteria, 'index': ++index, 'value': value };
      });

      return baseSortBy(result, function(object, other) {
        return compareMultiple(object, other, orders);
      });
    }

    /**
     * The base implementation of `_.pick` without support for individual
     * property identifiers.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @returns {Object} Returns the new object.
     */
    function basePick(object, paths) {
      return basePickBy(object, paths, function(value, path) {
        return hasIn(object, path);
      });
    }

    /**
     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @param {Function} predicate The function invoked per property.
     * @returns {Object} Returns the new object.
     */
    function basePickBy(object, paths, predicate) {
      var index = -1,
          length = paths.length,
          result = {};

      while (++index < length) {
        var path = paths[index],
            value = baseGet(object, path);

        if (predicate(value, path)) {
          baseSet(result, castPath(path, object), value);
        }
      }
      return result;
    }

    /**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     */
    function basePropertyDeep(path) {
      return function(object) {
        return baseGet(object, path);
      };
    }

    /**
     * The base implementation of `_.pullAllBy` without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     */
    function basePullAll(array, values, iteratee, comparator) {
      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
          index = -1,
          length = values.length,
          seen = array;

      if (array === values) {
        values = copyArray(values);
      }
      if (iteratee) {
        seen = arrayMap(array, baseUnary(iteratee));
      }
      while (++index < length) {
        var fromIndex = 0,
            value = values[index],
            computed = iteratee ? iteratee(value) : value;

        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
          if (seen !== array) {
            splice.call(seen, fromIndex, 1);
          }
          splice.call(array, fromIndex, 1);
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.pullAt` without support for individual
     * indexes or capturing the removed elements.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {number[]} indexes The indexes of elements to remove.
     * @returns {Array} Returns `array`.
     */
    function basePullAt(array, indexes) {
      var length = array ? indexes.length : 0,
          lastIndex = length - 1;

      while (length--) {
        var index = indexes[length];
        if (length == lastIndex || index !== previous) {
          var previous = index;
          if (isIndex(index)) {
            splice.call(array, index, 1);
          } else {
            baseUnset(array, index);
          }
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.random` without support for returning
     * floating-point numbers.
     *
     * @private
     * @param {number} lower The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the random number.
     */
    function baseRandom(lower, upper) {
      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
    }

    /**
     * The base implementation of `_.range` and `_.rangeRight` which doesn't
     * coerce arguments.
     *
     * @private
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @param {number} step The value to increment or decrement by.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the range of numbers.
     */
    function baseRange(start, end, step, fromRight) {
      var index = -1,
          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
          result = Array(length);

      while (length--) {
        result[fromRight ? length : ++index] = start;
        start += step;
      }
      return result;
    }

    /**
     * The base implementation of `_.repeat` which doesn't coerce arguments.
     *
     * @private
     * @param {string} string The string to repeat.
     * @param {number} n The number of times to repeat the string.
     * @returns {string} Returns the repeated string.
     */
    function baseRepeat(string, n) {
      var result = '';
      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
        return result;
      }
      // Leverage the exponentiation by squaring algorithm for a faster repeat.
      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
      do {
        if (n % 2) {
          result += string;
        }
        n = nativeFloor(n / 2);
        if (n) {
          string += string;
        }
      } while (n);

      return result;
    }

    /**
     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     */
    function baseRest(func, start) {
      return setToString(overRest(func, start, identity), func + '');
    }

    /**
     * The base implementation of `_.sample`.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     */
    function baseSample(collection) {
      return arraySample(values(collection));
    }

    /**
     * The base implementation of `_.sampleSize` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function baseSampleSize(collection, n) {
      var array = values(collection);
      return shuffleSelf(array, baseClamp(n, 0, array.length));
    }

    /**
     * The base implementation of `_.set`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseSet(object, path, value, customizer) {
      if (!isObject(object)) {
        return object;
      }
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          lastIndex = length - 1,
          nested = object;

      while (nested != null && ++index < length) {
        var key = toKey(path[index]),
            newValue = value;

        if (key === '__proto__' || key === 'constructor' || key === 'prototype') {
          return object;
        }

        if (index != lastIndex) {
          var objValue = nested[key];
          newValue = customizer ? customizer(objValue, key, nested) : undefined;
          if (newValue === undefined) {
            newValue = isObject(objValue)
              ? objValue
              : (isIndex(path[index + 1]) ? [] : {});
          }
        }
        assignValue(nested, key, newValue);
        nested = nested[key];
      }
      return object;
    }

    /**
     * The base implementation of `setData` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var baseSetData = !metaMap ? identity : function(func, data) {
      metaMap.set(func, data);
      return func;
    };

    /**
     * The base implementation of `setToString` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var baseSetToString = !defineProperty ? identity : function(func, string) {
      return defineProperty(func, 'toString', {
        'configurable': true,
        'enumerable': false,
        'value': constant(string),
        'writable': true
      });
    };

    /**
     * The base implementation of `_.shuffle`.
     *
     * @private
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function baseShuffle(collection) {
      return shuffleSelf(values(collection));
    }

    /**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseSlice(array, start, end) {
      var index = -1,
          length = array.length;

      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = end > length ? length : end;
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : ((end - start) >>> 0);
      start >>>= 0;

      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }

    /**
     * The base implementation of `_.some` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function baseSome(collection, predicate) {
      var result;

      baseEach(collection, function(value, index, collection) {
        result = predicate(value, index, collection);
        return !result;
      });
      return !!result;
    }

    /**
     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
     * performs a binary search of `array` to determine the index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndex(array, value, retHighest) {
      var low = 0,
          high = array == null ? low : array.length;

      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
        while (low < high) {
          var mid = (low + high) >>> 1,
              computed = array[mid];

          if (computed !== null && !isSymbol(computed) &&
              (retHighest ? (computed <= value) : (computed < value))) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return high;
      }
      return baseSortedIndexBy(array, value, identity, retHighest);
    }

    /**
     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
     * which invokes `iteratee` for `value` and each element of `array` to compute
     * their sort ranking. The iteratee is invoked with one argument; (value).
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} iteratee The iteratee invoked per element.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndexBy(array, value, iteratee, retHighest) {
      var low = 0,
          high = array == null ? 0 : array.length;
      if (high === 0) {
        return 0;
      }

      value = iteratee(value);
      var valIsNaN = value !== value,
          valIsNull = value === null,
          valIsSymbol = isSymbol(value),
          valIsUndefined = value === undefined;

      while (low < high) {
        var mid = nativeFloor((low + high) / 2),
            computed = iteratee(array[mid]),
            othIsDefined = computed !== undefined,
            othIsNull = computed === null,
            othIsReflexive = computed === computed,
            othIsSymbol = isSymbol(computed);

        if (valIsNaN) {
          var setLow = retHighest || othIsReflexive;
        } else if (valIsUndefined) {
          setLow = othIsReflexive && (retHighest || othIsDefined);
        } else if (valIsNull) {
          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
        } else if (valIsSymbol) {
          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
        } else if (othIsNull || othIsSymbol) {
          setLow = false;
        } else {
          setLow = retHighest ? (computed <= value) : (computed < value);
        }
        if (setLow) {
          low = mid + 1;
        } else {
          high = mid;
        }
      }
      return nativeMin(high, MAX_ARRAY_INDEX);
    }

    /**
     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
     * support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseSortedUniq(array, iteratee) {
      var index = -1,
          length = array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        if (!index || !eq(computed, seen)) {
          var seen = computed;
          result[resIndex++] = value === 0 ? 0 : value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.toNumber` which doesn't ensure correct
     * conversions of binary, hexadecimal, or octal string values.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     */
    function baseToNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      return +value;
    }

    /**
     * The base implementation of `_.toString` which doesn't convert nullish
     * values to empty strings.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     */
    function baseToString(value) {
      // Exit early for strings to avoid a performance hit in some environments.
      if (typeof value == 'string') {
        return value;
      }
      if (isArray(value)) {
        // Recursively convert values (susceptible to call stack limits).
        return arrayMap(value, baseToString) + '';
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : '';
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseUniq(array, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          length = array.length,
          isCommon = true,
          result = [],
          seen = result;

      if (comparator) {
        isCommon = false;
        includes = arrayIncludesWith;
      }
      else if (length >= LARGE_ARRAY_SIZE) {
        var set = iteratee ? null : createSet(array);
        if (set) {
          return setToArray(set);
        }
        isCommon = false;
        includes = cacheHas;
        seen = new SetCache;
      }
      else {
        seen = iteratee ? [] : result;
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var seenIndex = seen.length;
          while (seenIndex--) {
            if (seen[seenIndex] === computed) {
              continue outer;
            }
          }
          if (iteratee) {
            seen.push(computed);
          }
          result.push(value);
        }
        else if (!includes(seen, computed, comparator)) {
          if (seen !== result) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.unset`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The property path to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     */
    function baseUnset(object, path) {
      path = castPath(path, object);
      object = parent(object, path);
      return object == null || delete object[toKey(last(path))];
    }

    /**
     * The base implementation of `_.update`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to update.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseUpdate(object, path, updater, customizer) {
      return baseSet(object, path, updater(baseGet(object, path)), customizer);
    }

    /**
     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
     * without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {Function} predicate The function invoked per iteration.
     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseWhile(array, predicate, isDrop, fromRight) {
      var length = array.length,
          index = fromRight ? length : -1;

      while ((fromRight ? index-- : ++index < length) &&
        predicate(array[index], index, array)) {}

      return isDrop
        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
    }

    /**
     * The base implementation of `wrapperValue` which returns the result of
     * performing a sequence of actions on the unwrapped `value`, where each
     * successive action is supplied the return value of the previous.
     *
     * @private
     * @param {*} value The unwrapped value.
     * @param {Array} actions Actions to perform to resolve the unwrapped value.
     * @returns {*} Returns the resolved value.
     */
    function baseWrapperValue(value, actions) {
      var result = value;
      if (result instanceof LazyWrapper) {
        result = result.value();
      }
      return arrayReduce(actions, function(result, action) {
        return action.func.apply(action.thisArg, arrayPush([result], action.args));
      }, result);
    }

    /**
     * The base implementation of methods like `_.xor`, without support for
     * iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of values.
     */
    function baseXor(arrays, iteratee, comparator) {
      var length = arrays.length;
      if (length < 2) {
        return length ? baseUniq(arrays[0]) : [];
      }
      var index = -1,
          result = Array(length);

      while (++index < length) {
        var array = arrays[index],
            othIndex = -1;

        while (++othIndex < length) {
          if (othIndex != index) {
            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
          }
        }
      }
      return baseUniq(baseFlatten(result, 1), iteratee, comparator);
    }

    /**
     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
     *
     * @private
     * @param {Array} props The property identifiers.
     * @param {Array} values The property values.
     * @param {Function} assignFunc The function to assign values.
     * @returns {Object} Returns the new object.
     */
    function baseZipObject(props, values, assignFunc) {
      var index = -1,
          length = props.length,
          valsLength = values.length,
          result = {};

      while (++index < length) {
        var value = index < valsLength ? values[index] : undefined;
        assignFunc(result, props[index], value);
      }
      return result;
    }

    /**
     * Casts `value` to an empty array if it's not an array like object.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Array|Object} Returns the cast array-like object.
     */
    function castArrayLikeObject(value) {
      return isArrayLikeObject(value) ? value : [];
    }

    /**
     * Casts `value` to `identity` if it's not a function.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Function} Returns cast function.
     */
    function castFunction(value) {
      return typeof value == 'function' ? value : identity;
    }

    /**
     * Casts `value` to a path array if it's not one.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {Object} [object] The object to query keys on.
     * @returns {Array} Returns the cast property path array.
     */
    function castPath(value, object) {
      if (isArray(value)) {
        return value;
      }
      return isKey(value, object) ? [value] : stringToPath(toString(value));
    }

    /**
     * A `baseRest` alias which can be replaced with `identity` by module
     * replacement plugins.
     *
     * @private
     * @type {Function}
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    var castRest = baseRest;

    /**
     * Casts `array` to a slice if it's needed.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {number} start The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the cast slice.
     */
    function castSlice(array, start, end) {
      var length = array.length;
      end = end === undefined ? length : end;
      return (!start && end >= length) ? array : baseSlice(array, start, end);
    }

    /**
     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
     *
     * @private
     * @param {number|Object} id The timer id or timeout object of the timer to clear.
     */
    var clearTimeout = ctxClearTimeout || function(id) {
      return root.clearTimeout(id);
    };

    /**
     * Creates a clone of  `buffer`.
     *
     * @private
     * @param {Buffer} buffer The buffer to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Buffer} Returns the cloned buffer.
     */
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length,
          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

      buffer.copy(result);
      return result;
    }

    /**
     * Creates a clone of `arrayBuffer`.
     *
     * @private
     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
      return result;
    }

    /**
     * Creates a clone of `dataView`.
     *
     * @private
     * @param {Object} dataView The data view to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned data view.
     */
    function cloneDataView(dataView, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
    }

    /**
     * Creates a clone of `regexp`.
     *
     * @private
     * @param {Object} regexp The regexp to clone.
     * @returns {Object} Returns the cloned regexp.
     */
    function cloneRegExp(regexp) {
      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
      result.lastIndex = regexp.lastIndex;
      return result;
    }

    /**
     * Creates a clone of the `symbol` object.
     *
     * @private
     * @param {Object} symbol The symbol object to clone.
     * @returns {Object} Returns the cloned symbol object.
     */
    function cloneSymbol(symbol) {
      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
    }

    /**
     * Creates a clone of `typedArray`.
     *
     * @private
     * @param {Object} typedArray The typed array to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned typed array.
     */
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }

    /**
     * Compares values to sort them in ascending order.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {number} Returns the sort order indicator for `value`.
     */
    function compareAscending(value, other) {
      if (value !== other) {
        var valIsDefined = value !== undefined,
            valIsNull = value === null,
            valIsReflexive = value === value,
            valIsSymbol = isSymbol(value);

        var othIsDefined = other !== undefined,
            othIsNull = other === null,
            othIsReflexive = other === other,
            othIsSymbol = isSymbol(other);

        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
            (valIsNull && othIsDefined && othIsReflexive) ||
            (!valIsDefined && othIsReflexive) ||
            !valIsReflexive) {
          return 1;
        }
        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
            (othIsNull && valIsDefined && valIsReflexive) ||
            (!othIsDefined && valIsReflexive) ||
            !othIsReflexive) {
          return -1;
        }
      }
      return 0;
    }

    /**
     * Used by `_.orderBy` to compare multiple properties of a value to another
     * and stable sort them.
     *
     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
     * specify an order of "desc" for descending or "asc" for ascending sort order
     * of corresponding values.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {boolean[]|string[]} orders The order to sort by for each property.
     * @returns {number} Returns the sort order indicator for `object`.
     */
    function compareMultiple(object, other, orders) {
      var index = -1,
          objCriteria = object.criteria,
          othCriteria = other.criteria,
          length = objCriteria.length,
          ordersLength = orders.length;

      while (++index < length) {
        var result = compareAscending(objCriteria[index], othCriteria[index]);
        if (result) {
          if (index >= ordersLength) {
            return result;
          }
          var order = orders[index];
          return result * (order == 'desc' ? -1 : 1);
        }
      }
      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
      // that causes it, under certain circumstances, to provide the same value for
      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
      // for more details.
      //
      // This also ensures a stable sort in V8 and other engines.
      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
      return object.index - other.index;
    }

    /**
     * Creates an array that is the composition of partially applied arguments,
     * placeholders, and provided arguments into a single array of arguments.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to prepend to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgs(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersLength = holders.length,
          leftIndex = -1,
          leftLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(leftLength + rangeLength),
          isUncurried = !isCurried;

      while (++leftIndex < leftLength) {
        result[leftIndex] = partials[leftIndex];
      }
      while (++argsIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[holders[argsIndex]] = args[argsIndex];
        }
      }
      while (rangeLength--) {
        result[leftIndex++] = args[argsIndex++];
      }
      return result;
    }

    /**
     * This function is like `composeArgs` except that the arguments composition
     * is tailored for `_.partialRight`.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to append to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgsRight(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersIndex = -1,
          holdersLength = holders.length,
          rightIndex = -1,
          rightLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(rangeLength + rightLength),
          isUncurried = !isCurried;

      while (++argsIndex < rangeLength) {
        result[argsIndex] = args[argsIndex];
      }
      var offset = argsIndex;
      while (++rightIndex < rightLength) {
        result[offset + rightIndex] = partials[rightIndex];
      }
      while (++holdersIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[offset + holders[holdersIndex]] = args[argsIndex++];
        }
      }
      return result;
    }

    /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */
    function copyArray(source, array) {
      var index = -1,
          length = source.length;

      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }

    /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property identifiers to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @param {Function} [customizer] The function to customize copied values.
     * @returns {Object} Returns `object`.
     */
    function copyObject(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});

      var index = -1,
          length = props.length;

      while (++index < length) {
        var key = props[index];

        var newValue = customizer
          ? customizer(object[key], source[key], key, object, source)
          : undefined;

        if (newValue === undefined) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue(object, key, newValue);
        } else {
          assignValue(object, key, newValue);
        }
      }
      return object;
    }

    /**
     * Copies own symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbols(source, object) {
      return copyObject(source, getSymbols(source), object);
    }

    /**
     * Copies own and inherited symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbolsIn(source, object) {
      return copyObject(source, getSymbolsIn(source), object);
    }

    /**
     * Creates a function like `_.groupBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} [initializer] The accumulator object initializer.
     * @returns {Function} Returns the new aggregator function.
     */
    function createAggregator(setter, initializer) {
      return function(collection, iteratee) {
        var func = isArray(collection) ? arrayAggregator : baseAggregator,
            accumulator = initializer ? initializer() : {};

        return func(collection, setter, getIteratee(iteratee, 2), accumulator);
      };
    }

    /**
     * Creates a function like `_.assign`.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */
    function createAssigner(assigner) {
      return baseRest(function(object, sources) {
        var index = -1,
            length = sources.length,
            customizer = length > 1 ? sources[length - 1] : undefined,
            guard = length > 2 ? sources[2] : undefined;

        customizer = (assigner.length > 3 && typeof customizer == 'function')
          ? (length--, customizer)
          : undefined;

        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? undefined : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, index, customizer);
          }
        }
        return object;
      });
    }

    /**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseEach(eachFunc, fromRight) {
      return function(collection, iteratee) {
        if (collection == null) {
          return collection;
        }
        if (!isArrayLike(collection)) {
          return eachFunc(collection, iteratee);
        }
        var length = collection.length,
            index = fromRight ? length : -1,
            iterable = Object(collection);

        while ((fromRight ? index-- : ++index < length)) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }

    /**
     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index = -1,
            iterable = Object(object),
            props = keysFunc(object),
            length = props.length;

        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }

    /**
     * Creates a function that wraps `func` to invoke it with the optional `this`
     * binding of `thisArg`.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createBind(func, bitmask, thisArg) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return fn.apply(isBind ? thisArg : this, arguments);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.lowerFirst`.
     *
     * @private
     * @param {string} methodName The name of the `String` case method to use.
     * @returns {Function} Returns the new case function.
     */
    function createCaseFirst(methodName) {
      return function(string) {
        string = toString(string);

        var strSymbols = hasUnicode(string)
          ? stringToArray(string)
          : undefined;

        var chr = strSymbols
          ? strSymbols[0]
          : string.charAt(0);

        var trailing = strSymbols
          ? castSlice(strSymbols, 1).join('')
          : string.slice(1);

        return chr[methodName]() + trailing;
      };
    }

    /**
     * Creates a function like `_.camelCase`.
     *
     * @private
     * @param {Function} callback The function to combine each word.
     * @returns {Function} Returns the new compounder function.
     */
    function createCompounder(callback) {
      return function(string) {
        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
      };
    }

    /**
     * Creates a function that produces an instance of `Ctor` regardless of
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
     *
     * @private
     * @param {Function} Ctor The constructor to wrap.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCtor(Ctor) {
      return function() {
        // Use a `switch` statement to work with class constructors. See
        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
        // for more details.
        var args = arguments;
        switch (args.length) {
          case 0: return new Ctor;
          case 1: return new Ctor(args[0]);
          case 2: return new Ctor(args[0], args[1]);
          case 3: return new Ctor(args[0], args[1], args[2]);
          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
        }
        var thisBinding = baseCreate(Ctor.prototype),
            result = Ctor.apply(thisBinding, args);

        // Mimic the constructor's `return` behavior.
        // See https://es5.github.io/#x13.2.2 for more details.
        return isObject(result) ? result : thisBinding;
      };
    }

    /**
     * Creates a function that wraps `func` to enable currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {number} arity The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCurry(func, bitmask, arity) {
      var Ctor = createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length,
            placeholder = getHolder(wrapper);

        while (index--) {
          args[index] = arguments[index];
        }
        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
          ? []
          : replaceHolders(args, placeholder);

        length -= holders.length;
        if (length < arity) {
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, undefined,
            args, holders, undefined, undefined, arity - length);
        }
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return apply(fn, this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.find` or `_.findLast` function.
     *
     * @private
     * @param {Function} findIndexFunc The function to find the collection index.
     * @returns {Function} Returns the new find function.
     */
    function createFind(findIndexFunc) {
      return function(collection, predicate, fromIndex) {
        var iterable = Object(collection);
        if (!isArrayLike(collection)) {
          var iteratee = getIteratee(predicate, 3);
          collection = keys(collection);
          predicate = function(key) { return iteratee(iterable[key], key, iterable); };
        }
        var index = findIndexFunc(collection, predicate, fromIndex);
        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
      };
    }

    /**
     * Creates a `_.flow` or `_.flowRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new flow function.
     */
    function createFlow(fromRight) {
      return flatRest(function(funcs) {
        var length = funcs.length,
            index = length,
            prereq = LodashWrapper.prototype.thru;

        if (fromRight) {
          funcs.reverse();
        }
        while (index--) {
          var func = funcs[index];
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
            var wrapper = new LodashWrapper([], true);
          }
        }
        index = wrapper ? index : length;
        while (++index < length) {
          func = funcs[index];

          var funcName = getFuncName(func),
              data = funcName == 'wrapper' ? getData(func) : undefined;

          if (data && isLaziable(data[0]) &&
                data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
                !data[4].length && data[9] == 1
              ) {
            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
          } else {
            wrapper = (func.length == 1 && isLaziable(func))
              ? wrapper[funcName]()
              : wrapper.thru(func);
          }
        }
        return function() {
          var args = arguments,
              value = args[0];

          if (wrapper && args.length == 1 && isArray(value)) {
            return wrapper.plant(value).value();
          }
          var index = 0,
              result = length ? funcs[index].apply(this, args) : value;

          while (++index < length) {
            result = funcs[index].call(this, result);
          }
          return result;
        };
      });
    }

    /**
     * Creates a function that wraps `func` to invoke it with optional `this`
     * binding of `thisArg`, partial application, and currying.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [partialsRight] The arguments to append to those provided
     *  to the new function.
     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
      var isAry = bitmask & WRAP_ARY_FLAG,
          isBind = bitmask & WRAP_BIND_FLAG,
          isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
          isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
          isFlip = bitmask & WRAP_FLIP_FLAG,
          Ctor = isBindKey ? undefined : createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length;

        while (index--) {
          args[index] = arguments[index];
        }
        if (isCurried) {
          var placeholder = getHolder(wrapper),
              holdersCount = countHolders(args, placeholder);
        }
        if (partials) {
          args = composeArgs(args, partials, holders, isCurried);
        }
        if (partialsRight) {
          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
        }
        length -= holdersCount;
        if (isCurried && length < arity) {
          var newHolders = replaceHolders(args, placeholder);
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, thisArg,
            args, newHolders, argPos, ary, arity - length
          );
        }
        var thisBinding = isBind ? thisArg : this,
            fn = isBindKey ? thisBinding[func] : func;

        length = args.length;
        if (argPos) {
          args = reorder(args, argPos);
        } else if (isFlip && length > 1) {
          args.reverse();
        }
        if (isAry && ary < length) {
          args.length = ary;
        }
        if (this && this !== root && this instanceof wrapper) {
          fn = Ctor || createCtor(fn);
        }
        return fn.apply(thisBinding, args);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.invertBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} toIteratee The function to resolve iteratees.
     * @returns {Function} Returns the new inverter function.
     */
    function createInverter(setter, toIteratee) {
      return function(object, iteratee) {
        return baseInverter(object, setter, toIteratee(iteratee), {});
      };
    }

    /**
     * Creates a function that performs a mathematical operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @param {number} [defaultValue] The value used for `undefined` arguments.
     * @returns {Function} Returns the new mathematical operation function.
     */
    function createMathOperation(operator, defaultValue) {
      return function(value, other) {
        var result;
        if (value === undefined && other === undefined) {
          return defaultValue;
        }
        if (value !== undefined) {
          result = value;
        }
        if (other !== undefined) {
          if (result === undefined) {
            return other;
          }
          if (typeof value == 'string' || typeof other == 'string') {
            value = baseToString(value);
            other = baseToString(other);
          } else {
            value = baseToNumber(value);
            other = baseToNumber(other);
          }
          result = operator(value, other);
        }
        return result;
      };
    }

    /**
     * Creates a function like `_.over`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over iteratees.
     * @returns {Function} Returns the new over function.
     */
    function createOver(arrayFunc) {
      return flatRest(function(iteratees) {
        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
        return baseRest(function(args) {
          var thisArg = this;
          return arrayFunc(iteratees, function(iteratee) {
            return apply(iteratee, thisArg, args);
          });
        });
      });
    }

    /**
     * Creates the padding for `string` based on `length`. The `chars` string
     * is truncated if the number of characters exceeds `length`.
     *
     * @private
     * @param {number} length The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padding for `string`.
     */
    function createPadding(length, chars) {
      chars = chars === undefined ? ' ' : baseToString(chars);

      var charsLength = chars.length;
      if (charsLength < 2) {
        return charsLength ? baseRepeat(chars, length) : chars;
      }
      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
      return hasUnicode(chars)
        ? castSlice(stringToArray(result), 0, length).join('')
        : result.slice(0, length);
    }

    /**
     * Creates a function that wraps `func` to invoke it with the `this` binding
     * of `thisArg` and `partials` prepended to the arguments it receives.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} partials The arguments to prepend to those provided to
     *  the new function.
     * @returns {Function} Returns the new wrapped function.
     */
    function createPartial(func, bitmask, thisArg, partials) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var argsIndex = -1,
            argsLength = arguments.length,
            leftIndex = -1,
            leftLength = partials.length,
            args = Array(leftLength + argsLength),
            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

        while (++leftIndex < leftLength) {
          args[leftIndex] = partials[leftIndex];
        }
        while (argsLength--) {
          args[leftIndex++] = arguments[++argsIndex];
        }
        return apply(fn, isBind ? thisArg : this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.range` or `_.rangeRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new range function.
     */
    function createRange(fromRight) {
      return function(start, end, step) {
        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
          end = step = undefined;
        }
        // Ensure the sign of `-0` is preserved.
        start = toFinite(start);
        if (end === undefined) {
          end = start;
          start = 0;
        } else {
          end = toFinite(end);
        }
        step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);
        return baseRange(start, end, step, fromRight);
      };
    }

    /**
     * Creates a function that performs a relational operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @returns {Function} Returns the new relational operation function.
     */
    function createRelationalOperation(operator) {
      return function(value, other) {
        if (!(typeof value == 'string' && typeof other == 'string')) {
          value = toNumber(value);
          other = toNumber(other);
        }
        return operator(value, other);
      };
    }

    /**
     * Creates a function that wraps `func` to continue currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {Function} wrapFunc The function to create the `func` wrapper.
     * @param {*} placeholder The placeholder value.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
      var isCurry = bitmask & WRAP_CURRY_FLAG,
          newHolders = isCurry ? holders : undefined,
          newHoldersRight = isCurry ? undefined : holders,
          newPartials = isCurry ? partials : undefined,
          newPartialsRight = isCurry ? undefined : partials;

      bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

      if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
      }
      var newData = [
        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
        newHoldersRight, argPos, ary, arity
      ];

      var result = wrapFunc.apply(undefined, newData);
      if (isLaziable(func)) {
        setData(result, newData);
      }
      result.placeholder = placeholder;
      return setWrapToString(result, func, bitmask);
    }

    /**
     * Creates a function like `_.round`.
     *
     * @private
     * @param {string} methodName The name of the `Math` method to use when rounding.
     * @returns {Function} Returns the new round function.
     */
    function createRound(methodName) {
      var func = Math[methodName];
      return function(number, precision) {
        number = toNumber(number);
        precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
        if (precision && nativeIsFinite(number)) {
          // Shift with exponential notation to avoid floating-point issues.
          // See [MDN](https://mdn.io/round#Examples) for more details.
          var pair = (toString(number) + 'e').split('e'),
              value = func(pair[0] + 'e' + (+pair[1] + precision));

          pair = (toString(value) + 'e').split('e');
          return +(pair[0] + 'e' + (+pair[1] - precision));
        }
        return func(number);
      };
    }

    /**
     * Creates a set object of `values`.
     *
     * @private
     * @param {Array} values The values to add to the set.
     * @returns {Object} Returns the new set.
     */
    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
      return new Set(values);
    };

    /**
     * Creates a `_.toPairs` or `_.toPairsIn` function.
     *
     * @private
     * @param {Function} keysFunc The function to get the keys of a given object.
     * @returns {Function} Returns the new pairs function.
     */
    function createToPairs(keysFunc) {
      return function(object) {
        var tag = getTag(object);
        if (tag == mapTag) {
          return mapToArray(object);
        }
        if (tag == setTag) {
          return setToPairs(object);
        }
        return baseToPairs(object, keysFunc(object));
      };
    }

    /**
     * Creates a function that either curries or invokes `func` with optional
     * `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags.
     *    1 - `_.bind`
     *    2 - `_.bindKey`
     *    4 - `_.curry` or `_.curryRight` of a bound function
     *    8 - `_.curry`
     *   16 - `_.curryRight`
     *   32 - `_.partial`
     *   64 - `_.partialRight`
     *  128 - `_.rearg`
     *  256 - `_.ary`
     *  512 - `_.flip`
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to be partially applied.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
      if (!isBindKey && typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var length = partials ? partials.length : 0;
      if (!length) {
        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
        partials = holders = undefined;
      }
      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
      arity = arity === undefined ? arity : toInteger(arity);
      length -= holders ? holders.length : 0;

      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
        var partialsRight = partials,
            holdersRight = holders;

        partials = holders = undefined;
      }
      var data = isBindKey ? undefined : getData(func);

      var newData = [
        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
        argPos, ary, arity
      ];

      if (data) {
        mergeData(newData, data);
      }
      func = newData[0];
      bitmask = newData[1];
      thisArg = newData[2];
      partials = newData[3];
      holders = newData[4];
      arity = newData[9] = newData[9] === undefined
        ? (isBindKey ? 0 : func.length)
        : nativeMax(newData[9] - length, 0);

      if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
      }
      if (!bitmask || bitmask == WRAP_BIND_FLAG) {
        var result = createBind(func, bitmask, thisArg);
      } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
        result = createCurry(func, bitmask, arity);
      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
        result = createPartial(func, bitmask, thisArg, partials);
      } else {
        result = createHybrid.apply(undefined, newData);
      }
      var setter = data ? baseSetData : setData;
      return setWrapToString(setter(result, newData), func, bitmask);
    }

    /**
     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
     * of source objects to the destination object for all destination properties
     * that resolve to `undefined`.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to assign.
     * @param {Object} object The parent object of `objValue`.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsAssignIn(objValue, srcValue, key, object) {
      if (objValue === undefined ||
          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
        return srcValue;
      }
      return objValue;
    }

    /**
     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
     * objects into destination objects that are passed thru.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to merge.
     * @param {Object} object The parent object of `objValue`.
     * @param {Object} source The parent object of `srcValue`.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
      if (isObject(objValue) && isObject(srcValue)) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, objValue);
        baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
        stack['delete'](srcValue);
      }
      return objValue;
    }

    /**
     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
     * objects.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {string} key The key of the property to inspect.
     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
     */
    function customOmitClone(value) {
      return isPlainObject(value) ? undefined : value;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `array` and `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */
    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          arrLength = array.length,
          othLength = other.length;

      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      // Check that cyclic values are equal.
      var arrStacked = stack.get(array);
      var othStacked = stack.get(other);
      if (arrStacked && othStacked) {
        return arrStacked == other && othStacked == array;
      }
      var index = -1,
          result = true,
          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

      stack.set(array, other);
      stack.set(other, array);

      // Ignore non-index properties.
      while (++index < arrLength) {
        var arrValue = array[index],
            othValue = other[index];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, arrValue, index, other, array, stack)
            : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== undefined) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        // Recursively compare arrays (susceptible to call stack limits).
        if (seen) {
          if (!arraySome(other, function(othValue, othIndex) {
                if (!cacheHas(seen, othIndex) &&
                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                  return seen.push(othIndex);
                }
              })) {
            result = false;
            break;
          }
        } else if (!(
              arrValue === othValue ||
                equalFunc(arrValue, othValue, bitmask, customizer, stack)
            )) {
          result = false;
          break;
        }
      }
      stack['delete'](array);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
      switch (tag) {
        case dataViewTag:
          if ((object.byteLength != other.byteLength) ||
              (object.byteOffset != other.byteOffset)) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;

        case arrayBufferTag:
          if ((object.byteLength != other.byteLength) ||
              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
            return false;
          }
          return true;

        case boolTag:
        case dateTag:
        case numberTag:
          // Coerce booleans to `1` or `0` and dates to milliseconds.
          // Invalid dates are coerced to `NaN`.
          return eq(+object, +other);

        case errorTag:
          return object.name == other.name && object.message == other.message;

        case regexpTag:
        case stringTag:
          // Coerce regexes to strings and treat strings, primitives and objects,
          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
          // for more details.
          return object == (other + '');

        case mapTag:
          var convert = mapToArray;

        case setTag:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
          convert || (convert = setToArray);

          if (object.size != other.size && !isPartial) {
            return false;
          }
          // Assume cyclic values are equal.
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG;

          // Recursively compare objects (susceptible to call stack limits).
          stack.set(object, other);
          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
          stack['delete'](object);
          return result;

        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          objProps = getAllKeys(object),
          objLength = objProps.length,
          othProps = getAllKeys(other),
          othLength = othProps.length;

      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      }
      // Check that cyclic values are equal.
      var objStacked = stack.get(object);
      var othStacked = stack.get(other);
      if (objStacked && othStacked) {
        return objStacked == other && othStacked == object;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);

      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key],
            othValue = other[key];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, objValue, key, other, object, stack)
            : customizer(objValue, othValue, key, object, other, stack);
        }
        // Recursively compare objects (susceptible to call stack limits).
        if (!(compared === undefined
              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
              : compared
            )) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == 'constructor');
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor,
            othCtor = other.constructor;

        // Non `Object` object instances with different constructors are not equal.
        if (objCtor != othCtor &&
            ('constructor' in object && 'constructor' in other) &&
            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack['delete'](object);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseRest` which flattens the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    function flatRest(func) {
      return setToString(overRest(func, undefined, flatten), func + '');
    }

    /**
     * Creates an array of own enumerable property names and symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeys(object) {
      return baseGetAllKeys(object, keys, getSymbols);
    }

    /**
     * Creates an array of own and inherited enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeysIn(object) {
      return baseGetAllKeys(object, keysIn, getSymbolsIn);
    }

    /**
     * Gets metadata for `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {*} Returns the metadata for `func`.
     */
    var getData = !metaMap ? noop : function(func) {
      return metaMap.get(func);
    };

    /**
     * Gets the name of `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {string} Returns the function name.
     */
    function getFuncName(func) {
      var result = (func.name + ''),
          array = realNames[result],
          length = hasOwnProperty.call(realNames, result) ? array.length : 0;

      while (length--) {
        var data = array[length],
            otherFunc = data.func;
        if (otherFunc == null || otherFunc == func) {
          return data.name;
        }
      }
      return result;
    }

    /**
     * Gets the argument placeholder value for `func`.
     *
     * @private
     * @param {Function} func The function to inspect.
     * @returns {*} Returns the placeholder value.
     */
    function getHolder(func) {
      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
      return object.placeholder;
    }

    /**
     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
     * this function returns the custom method, otherwise it returns `baseIteratee`.
     * If arguments are provided, the chosen function is invoked with them and
     * its result is returned.
     *
     * @private
     * @param {*} [value] The value to convert to an iteratee.
     * @param {number} [arity] The arity of the created iteratee.
     * @returns {Function} Returns the chosen function or its result.
     */
    function getIteratee() {
      var result = lodash.iteratee || iteratee;
      result = result === iteratee ? baseIteratee : result;
      return arguments.length ? result(arguments[0], arguments[1]) : result;
    }

    /**
     * Gets the data for `map`.
     *
     * @private
     * @param {Object} map The map to query.
     * @param {string} key The reference key.
     * @returns {*} Returns the map data.
     */
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key)
        ? data[typeof key == 'string' ? 'string' : 'hash']
        : data.map;
    }

    /**
     * Gets the property names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */
    function getMatchData(object) {
      var result = keys(object),
          length = result.length;

      while (length--) {
        var key = result[length],
            value = object[key];

        result[length] = [key, value, isStrictComparable(value)];
      }
      return result;
    }

    /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : undefined;
    }

    /**
     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the raw `toStringTag`.
     */
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag),
          tag = value[symToStringTag];

      try {
        value[symToStringTag] = undefined;
        var unmasked = true;
      } catch (e) {}

      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }

    /**
     * Creates an array of the own enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
      if (object == null) {
        return [];
      }
      object = Object(object);
      return arrayFilter(nativeGetSymbols(object), function(symbol) {
        return propertyIsEnumerable.call(object, symbol);
      });
    };

    /**
     * Creates an array of the own and inherited enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
      var result = [];
      while (object) {
        arrayPush(result, getSymbols(object));
        object = getPrototype(object);
      }
      return result;
    };

    /**
     * Gets the `toStringTag` of `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    var getTag = baseGetTag;

    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
        (Map && getTag(new Map) != mapTag) ||
        (Promise && getTag(Promise.resolve()) != promiseTag) ||
        (Set && getTag(new Set) != setTag) ||
        (WeakMap && getTag(new WeakMap) != weakMapTag)) {
      getTag = function(value) {
        var result = baseGetTag(value),
            Ctor = result == objectTag ? value.constructor : undefined,
            ctorString = Ctor ? toSource(Ctor) : '';

        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString: return dataViewTag;
            case mapCtorString: return mapTag;
            case promiseCtorString: return promiseTag;
            case setCtorString: return setTag;
            case weakMapCtorString: return weakMapTag;
          }
        }
        return result;
      };
    }

    /**
     * Gets the view, applying any `transforms` to the `start` and `end` positions.
     *
     * @private
     * @param {number} start The start of the view.
     * @param {number} end The end of the view.
     * @param {Array} transforms The transformations to apply to the view.
     * @returns {Object} Returns an object containing the `start` and `end`
     *  positions of the view.
     */
    function getView(start, end, transforms) {
      var index = -1,
          length = transforms.length;

      while (++index < length) {
        var data = transforms[index],
            size = data.size;

        switch (data.type) {
          case 'drop':      start += size; break;
          case 'dropRight': end -= size; break;
          case 'take':      end = nativeMin(end, start + size); break;
          case 'takeRight': start = nativeMax(start, end - size); break;
        }
      }
      return { 'start': start, 'end': end };
    }

    /**
     * Extracts wrapper details from the `source` body comment.
     *
     * @private
     * @param {string} source The source to inspect.
     * @returns {Array} Returns the wrapper details.
     */
    function getWrapDetails(source) {
      var match = source.match(reWrapDetails);
      return match ? match[1].split(reSplitDetails) : [];
    }

    /**
     * Checks if `path` exists on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @param {Function} hasFunc The function to check properties.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     */
    function hasPath(object, path, hasFunc) {
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          result = false;

      while (++index < length) {
        var key = toKey(path[index]);
        if (!(result = object != null && hasFunc(object, key))) {
          break;
        }
        object = object[key];
      }
      if (result || ++index != length) {
        return result;
      }
      length = object == null ? 0 : object.length;
      return !!length && isLength(length) && isIndex(key, length) &&
        (isArray(object) || isArguments(object));
    }

    /**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */
    function initCloneArray(array) {
      var length = array.length,
          result = new array.constructor(length);

      // Add properties assigned by `RegExp#exec`.
      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }

    /**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneObject(object) {
      return (typeof object.constructor == 'function' && !isPrototype(object))
        ? baseCreate(getPrototype(object))
        : {};
    }

    /**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneByTag(object, tag, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag:
          return cloneArrayBuffer(object);

        case boolTag:
        case dateTag:
          return new Ctor(+object);

        case dataViewTag:
          return cloneDataView(object, isDeep);

        case float32Tag: case float64Tag:
        case int8Tag: case int16Tag: case int32Tag:
        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
          return cloneTypedArray(object, isDeep);

        case mapTag:
          return new Ctor;

        case numberTag:
        case stringTag:
          return new Ctor(object);

        case regexpTag:
          return cloneRegExp(object);

        case setTag:
          return new Ctor;

        case symbolTag:
          return cloneSymbol(object);
      }
    }

    /**
     * Inserts wrapper `details` in a comment at the top of the `source` body.
     *
     * @private
     * @param {string} source The source to modify.
     * @returns {Array} details The details to insert.
     * @returns {string} Returns the modified source.
     */
    function insertWrapDetails(source, details) {
      var length = details.length;
      if (!length) {
        return source;
      }
      var lastIndex = length - 1;
      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
      details = details.join(length > 2 ? ', ' : ' ');
      return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
    }

    /**
     * Checks if `value` is a flattenable `arguments` object or array.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
     */
    function isFlattenable(value) {
      return isArray(value) || isArguments(value) ||
        !!(spreadableSymbol && value && value[spreadableSymbol]);
    }

    /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */
    function isIndex(value, length) {
      var type = typeof value;
      length = length == null ? MAX_SAFE_INTEGER : length;

      return !!length &&
        (type == 'number' ||
          (type != 'symbol' && reIsUint.test(value))) &&
            (value > -1 && value % 1 == 0 && value < length);
    }

    /**
     * Checks if the given arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
     *  else `false`.
     */
    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index;
      if (type == 'number'
            ? (isArrayLike(object) && isIndex(index, object.length))
            : (type == 'string' && index in object)
          ) {
        return eq(object[index], value);
      }
      return false;
    }

    /**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */
    function isKey(value, object) {
      if (isArray(value)) {
        return false;
      }
      var type = typeof value;
      if (type == 'number' || type == 'symbol' || type == 'boolean' ||
          value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
        (object != null && value in Object(object));
    }

    /**
     * Checks if `value` is suitable for use as unique object key.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
     */
    function isKeyable(value) {
      var type = typeof value;
      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
        ? (value !== '__proto__')
        : (value === null);
    }

    /**
     * Checks if `func` has a lazy counterpart.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
     *  else `false`.
     */
    function isLaziable(func) {
      var funcName = getFuncName(func),
          other = lodash[funcName];

      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
        return false;
      }
      if (func === other) {
        return true;
      }
      var data = getData(other);
      return !!data && func === data[0];
    }

    /**
     * Checks if `func` has its source masked.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
     */
    function isMasked(func) {
      return !!maskSrcKey && (maskSrcKey in func);
    }

    /**
     * Checks if `func` is capable of being masked.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
     */
    var isMaskable = coreJsData ? isFunction : stubFalse;

    /**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */
    function isPrototype(value) {
      var Ctor = value && value.constructor,
          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

      return value === proto;
    }

    /**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */
    function isStrictComparable(value) {
      return value === value && !isObject(value);
    }

    /**
     * A specialized version of `matchesProperty` for source values suitable
     * for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function matchesStrictComparable(key, srcValue) {
      return function(object) {
        if (object == null) {
          return false;
        }
        return object[key] === srcValue &&
          (srcValue !== undefined || (key in Object(object)));
      };
    }

    /**
     * A specialized version of `_.memoize` which clears the memoized function's
     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
     *
     * @private
     * @param {Function} func The function to have its output memoized.
     * @returns {Function} Returns the new memoized function.
     */
    function memoizeCapped(func) {
      var result = memoize(func, function(key) {
        if (cache.size === MAX_MEMOIZE_SIZE) {
          cache.clear();
        }
        return key;
      });

      var cache = result.cache;
      return result;
    }

    /**
     * Merges the function metadata of `source` into `data`.
     *
     * Merging metadata reduces the number of wrappers used to invoke a function.
     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
     * may be applied regardless of execution order. Methods like `_.ary` and
     * `_.rearg` modify function arguments, making the order in which they are
     * executed important, preventing the merging of metadata. However, we make
     * an exception for a safe combined case where curried functions have `_.ary`
     * and or `_.rearg` applied.
     *
     * @private
     * @param {Array} data The destination metadata.
     * @param {Array} source The source metadata.
     * @returns {Array} Returns `data`.
     */
    function mergeData(data, source) {
      var bitmask = data[1],
          srcBitmask = source[1],
          newBitmask = bitmask | srcBitmask,
          isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

      var isCombo =
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
        ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));

      // Exit early if metadata can't be merged.
      if (!(isCommon || isCombo)) {
        return data;
      }
      // Use source `thisArg` if available.
      if (srcBitmask & WRAP_BIND_FLAG) {
        data[2] = source[2];
        // Set when currying a bound function.
        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
      }
      // Compose partial arguments.
      var value = source[3];
      if (value) {
        var partials = data[3];
        data[3] = partials ? composeArgs(partials, value, source[4]) : value;
        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
      }
      // Compose partial right arguments.
      value = source[5];
      if (value) {
        partials = data[5];
        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
      }
      // Use source `argPos` if available.
      value = source[7];
      if (value) {
        data[7] = value;
      }
      // Use source `ary` if it's smaller.
      if (srcBitmask & WRAP_ARY_FLAG) {
        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
      }
      // Use source `arity` if one is not provided.
      if (data[9] == null) {
        data[9] = source[9];
      }
      // Use source `func` and merge bitmasks.
      data[0] = source[0];
      data[1] = newBitmask;

      return data;
    }

    /**
     * This function is like
     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * except that it includes inherited enumerable properties.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * Converts `value` to a string using `Object.prototype.toString`.
     *
     * @private
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     */
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }

    /**
     * A specialized version of `baseRest` which transforms the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @param {Function} transform The rest array transform.
     * @returns {Function} Returns the new function.
     */
    function overRest(func, start, transform) {
      start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
      return function() {
        var args = arguments,
            index = -1,
            length = nativeMax(args.length - start, 0),
            array = Array(length);

        while (++index < length) {
          array[index] = args[start + index];
        }
        index = -1;
        var otherArgs = Array(start + 1);
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = transform(array);
        return apply(func, this, otherArgs);
      };
    }

    /**
     * Gets the parent value at `path` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} path The path to get the parent value of.
     * @returns {*} Returns the parent value.
     */
    function parent(object, path) {
      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
    }

    /**
     * Reorder `array` according to the specified indexes where the element at
     * the first index is assigned as the first element, the element at
     * the second index is assigned as the second element, and so on.
     *
     * @private
     * @param {Array} array The array to reorder.
     * @param {Array} indexes The arranged array indexes.
     * @returns {Array} Returns `array`.
     */
    function reorder(array, indexes) {
      var arrLength = array.length,
          length = nativeMin(indexes.length, arrLength),
          oldArray = copyArray(array);

      while (length--) {
        var index = indexes[length];
        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
      }
      return array;
    }

    /**
     * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the property to get.
     * @returns {*} Returns the property value.
     */
    function safeGet(object, key) {
      if (key === 'constructor' && typeof object[key] === 'function') {
        return;
      }

      if (key == '__proto__') {
        return;
      }

      return object[key];
    }

    /**
     * Sets metadata for `func`.
     *
     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
     * period of time, it will trip its breaker and transition to an identity
     * function to avoid garbage collection pauses in V8. See
     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
     * for more details.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var setData = shortOut(baseSetData);

    /**
     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    var setTimeout = ctxSetTimeout || function(func, wait) {
      return root.setTimeout(func, wait);
    };

    /**
     * Sets the `toString` method of `func` to return `string`.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var setToString = shortOut(baseSetToString);

    /**
     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
     * with wrapper details in a comment at the top of the source body.
     *
     * @private
     * @param {Function} wrapper The function to modify.
     * @param {Function} reference The reference function.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Function} Returns `wrapper`.
     */
    function setWrapToString(wrapper, reference, bitmask) {
      var source = (reference + '');
      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
    }

    /**
     * Creates a function that'll short out and invoke `identity` instead
     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
     * milliseconds.
     *
     * @private
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new shortable function.
     */
    function shortOut(func) {
      var count = 0,
          lastCalled = 0;

      return function() {
        var stamp = nativeNow(),
            remaining = HOT_SPAN - (stamp - lastCalled);

        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func.apply(undefined, arguments);
      };
    }

    /**
     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @param {number} [size=array.length] The size of `array`.
     * @returns {Array} Returns `array`.
     */
    function shuffleSelf(array, size) {
      var index = -1,
          length = array.length,
          lastIndex = length - 1;

      size = size === undefined ? length : size;
      while (++index < size) {
        var rand = baseRandom(index, lastIndex),
            value = array[rand];

        array[rand] = array[index];
        array[index] = value;
      }
      array.length = size;
      return array;
    }

    /**
     * Converts `string` to a property path array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the property path array.
     */
    var stringToPath = memoizeCapped(function(string) {
      var result = [];
      if (string.charCodeAt(0) === 46 /* . */) {
        result.push('');
      }
      string.replace(rePropName, function(match, number, quote, subString) {
        result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
      });
      return result;
    });

    /**
     * Converts `value` to a string key if it's not a string or symbol.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {string|symbol} Returns the key.
     */
    function toKey(value) {
      if (typeof value == 'string' || isSymbol(value)) {
        return value;
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * Converts `func` to its source code.
     *
     * @private
     * @param {Function} func The function to convert.
     * @returns {string} Returns the source code.
     */
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {}
        try {
          return (func + '');
        } catch (e) {}
      }
      return '';
    }

    /**
     * Updates wrapper `details` based on `bitmask` flags.
     *
     * @private
     * @returns {Array} details The details to modify.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Array} Returns `details`.
     */
    function updateWrapDetails(details, bitmask) {
      arrayEach(wrapFlags, function(pair) {
        var value = '_.' + pair[0];
        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
          details.push(value);
        }
      });
      return details.sort();
    }

    /**
     * Creates a clone of `wrapper`.
     *
     * @private
     * @param {Object} wrapper The wrapper to clone.
     * @returns {Object} Returns the cloned wrapper.
     */
    function wrapperClone(wrapper) {
      if (wrapper instanceof LazyWrapper) {
        return wrapper.clone();
      }
      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
      result.__actions__ = copyArray(wrapper.__actions__);
      result.__index__  = wrapper.__index__;
      result.__values__ = wrapper.__values__;
      return result;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of elements split into groups the length of `size`.
     * If `array` can't be split evenly, the final chunk will be the remaining
     * elements.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to process.
     * @param {number} [size=1] The length of each chunk
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the new array of chunks.
     * @example
     *
     * _.chunk(['a', 'b', 'c', 'd'], 2);
     * // => [['a', 'b'], ['c', 'd']]
     *
     * _.chunk(['a', 'b', 'c', 'd'], 3);
     * // => [['a', 'b', 'c'], ['d']]
     */
    function chunk(array, size, guard) {
      if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {
        size = 1;
      } else {
        size = nativeMax(toInteger(size), 0);
      }
      var length = array == null ? 0 : array.length;
      if (!length || size < 1) {
        return [];
      }
      var index = 0,
          resIndex = 0,
          result = Array(nativeCeil(length / size));

      while (index < length) {
        result[resIndex++] = baseSlice(array, index, (index += size));
      }
      return result;
    }

    /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are falsey.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to compact.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */
    function compact(array) {
      var index = -1,
          length = array == null ? 0 : array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value) {
          result[resIndex++] = value;
        }
      }
      return result;
    }

    /**
     * Creates a new array concatenating `array` with any additional arrays
     * and/or values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to concatenate.
     * @param {...*} [values] The values to concatenate.
     * @returns {Array} Returns the new concatenated array.
     * @example
     *
     * var array = [1];
     * var other = _.concat(array, 2, [3], [[4]]);
     *
     * console.log(other);
     * // => [1, 2, 3, [4]]
     *
     * console.log(array);
     * // => [1]
     */
    function concat() {
      var length = arguments.length;
      if (!length) {
        return [];
      }
      var args = Array(length - 1),
          array = arguments[0],
          index = length;

      while (index--) {
        args[index - 1] = arguments[index];
      }
      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
    }

    /**
     * Creates an array of `array` values not included in the other given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * **Note:** Unlike `_.pullAll`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.without, _.xor
     * @example
     *
     * _.difference([2, 1], [2, 3]);
     * // => [1]
     */
    var difference = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `iteratee` which
     * is invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var differenceBy = baseRest(function(array, values) {
      var iteratee = last(values);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `comparator`
     * which is invoked to compare elements of `array` to `values`. The order and
     * references of result values are determined by the first array. The comparator
     * is invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     *
     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }]
     */
    var differenceWith = baseRest(function(array, values) {
      var comparator = last(values);
      if (isArrayLikeObject(comparator)) {
        comparator = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)
        : [];
    });

    /**
     * Creates a slice of `array` with `n` elements dropped from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.drop([1, 2, 3]);
     * // => [2, 3]
     *
     * _.drop([1, 2, 3], 2);
     * // => [3]
     *
     * _.drop([1, 2, 3], 5);
     * // => []
     *
     * _.drop([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function drop(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with `n` elements dropped from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRight([1, 2, 3]);
     * // => [1, 2]
     *
     * _.dropRight([1, 2, 3], 2);
     * // => [1]
     *
     * _.dropRight([1, 2, 3], 5);
     * // => []
     *
     * _.dropRight([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function dropRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the end.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.dropRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropRightWhile(users, ['active', false]);
     * // => objects for ['barney']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropRightWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true, true)
        : [];
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the beginning.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.dropWhile(users, function(o) { return !o.active; });
     * // => objects for ['pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropWhile(users, ['active', false]);
     * // => objects for ['pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true)
        : [];
    }

    /**
     * Fills elements of `array` with `value` from `start` up to, but not
     * including, `end`.
     *
     * **Note:** This method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Array
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.fill(array, 'a');
     * console.log(array);
     * // => ['a', 'a', 'a']
     *
     * _.fill(Array(3), 2);
     * // => [2, 2, 2]
     *
     * _.fill([4, 6, 8, 10], '*', 1, 3);
     * // => [4, '*', '*', 10]
     */
    function fill(array, value, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
        start = 0;
        end = length;
      }
      return baseFill(array, value, start, end);
    }

    /**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.findIndex(users, function(o) { return o.user == 'barney'; });
     * // => 0
     *
     * // The `_.matches` iteratee shorthand.
     * _.findIndex(users, { 'user': 'fred', 'active': false });
     * // => 1
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findIndex(users, ['active', false]);
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.findIndex(users, 'active');
     * // => 2
     */
    function findIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index);
    }

    /**
     * This method is like `_.findIndex` except that it iterates over elements
     * of `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
     * // => 2
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
     * // => 0
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastIndex(users, ['active', false]);
     * // => 2
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastIndex(users, 'active');
     * // => 0
     */
    function findLastIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length - 1;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = fromIndex < 0
          ? nativeMax(length + index, 0)
          : nativeMin(index, length - 1);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index, true);
    }

    /**
     * Flattens `array` a single level deep.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, [3, [4]], 5]]);
     * // => [1, 2, [3, [4]], 5]
     */
    function flatten(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, 1) : [];
    }

    /**
     * Recursively flattens `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flattenDeep([1, [2, [3, [4]], 5]]);
     * // => [1, 2, 3, 4, 5]
     */
    function flattenDeep(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, INFINITY) : [];
    }

    /**
     * Recursively flatten `array` up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * var array = [1, [2, [3, [4]], 5]];
     *
     * _.flattenDepth(array, 1);
     * // => [1, 2, [3, [4]], 5]
     *
     * _.flattenDepth(array, 2);
     * // => [1, 2, 3, [4], 5]
     */
    function flattenDepth(array, depth) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(array, depth);
    }

    /**
     * The inverse of `_.toPairs`; this method returns an object composed
     * from key-value `pairs`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} pairs The key-value pairs.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.fromPairs([['a', 1], ['b', 2]]);
     * // => { 'a': 1, 'b': 2 }
     */
    function fromPairs(pairs) {
      var index = -1,
          length = pairs == null ? 0 : pairs.length,
          result = {};

      while (++index < length) {
        var pair = pairs[index];
        result[pair[0]] = pair[1];
      }
      return result;
    }

    /**
     * Gets the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias first
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the first element of `array`.
     * @example
     *
     * _.head([1, 2, 3]);
     * // => 1
     *
     * _.head([]);
     * // => undefined
     */
    function head(array) {
      return (array && array.length) ? array[0] : undefined;
    }

    /**
     * Gets the index at which the first occurrence of `value` is found in `array`
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it's used as the
     * offset from the end of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.indexOf([1, 2, 1, 2], 2);
     * // => 1
     *
     * // Search from the `fromIndex`.
     * _.indexOf([1, 2, 1, 2], 2, 2);
     * // => 3
     */
    function indexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseIndexOf(array, value, index);
    }

    /**
     * Gets all but the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     */
    function initial(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 0, -1) : [];
    }

    /**
     * Creates an array of unique values that are included in all given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersection([2, 1], [2, 3]);
     * // => [2]
     */
    var intersection = baseRest(function(arrays) {
      var mapped = arrayMap(arrays, castArrayLikeObject);
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped)
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `iteratee`
     * which is invoked for each element of each `arrays` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [2.1]
     *
     * // The `_.property` iteratee shorthand.
     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }]
     */
    var intersectionBy = baseRest(function(arrays) {
      var iteratee = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      if (iteratee === last(mapped)) {
        iteratee = undefined;
      } else {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `comparator`
     * which is invoked to compare elements of `arrays`. The order and references
     * of result values are determined by the first array. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.intersectionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }]
     */
    var intersectionWith = baseRest(function(arrays) {
      var comparator = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      comparator = typeof comparator == 'function' ? comparator : undefined;
      if (comparator) {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, undefined, comparator)
        : [];
    });

    /**
     * Converts all elements in `array` into a string separated by `separator`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to convert.
     * @param {string} [separator=','] The element separator.
     * @returns {string} Returns the joined string.
     * @example
     *
     * _.join(['a', 'b', 'c'], '~');
     * // => 'a~b~c'
     */
    function join(array, separator) {
      return array == null ? '' : nativeJoin.call(array, separator);
    }

    /**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */
    function last(array) {
      var length = array == null ? 0 : array.length;
      return length ? array[length - 1] : undefined;
    }

    /**
     * This method is like `_.indexOf` except that it iterates over elements of
     * `array` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 1, 2], 2);
     * // => 3
     *
     * // Search from the `fromIndex`.
     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
     * // => 1
     */
    function lastIndexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
      }
      return value === value
        ? strictLastIndexOf(array, value, index)
        : baseFindIndex(array, baseIsNaN, index, true);
    }

    /**
     * Gets the element at index `n` of `array`. If `n` is negative, the nth
     * element from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.11.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=0] The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     *
     * _.nth(array, 1);
     * // => 'b'
     *
     * _.nth(array, -2);
     * // => 'c';
     */
    function nth(array, n) {
      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;
    }

    /**
     * Removes all given values from `array` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
     * to remove elements from an array by predicate.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...*} [values] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pull(array, 'a', 'c');
     * console.log(array);
     * // => ['b', 'b']
     */
    var pull = baseRest(pullAll);

    /**
     * This method is like `_.pull` except that it accepts an array of values to remove.
     *
     * **Note:** Unlike `_.difference`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pullAll(array, ['a', 'c']);
     * console.log(array);
     * // => ['b', 'b']
     */
    function pullAll(array, values) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values)
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `iteratee` which is
     * invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The iteratee is invoked with one argument: (value).
     *
     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
     *
     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
     * console.log(array);
     * // => [{ 'x': 2 }]
     */
    function pullAllBy(array, values, iteratee) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, getIteratee(iteratee, 2))
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `comparator` which
     * is invoked to compare elements of `array` to `values`. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
     *
     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
     * console.log(array);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
     */
    function pullAllWith(array, values, comparator) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, undefined, comparator)
        : array;
    }

    /**
     * Removes elements from `array` corresponding to `indexes` and returns an
     * array of removed elements.
     *
     * **Note:** Unlike `_.at`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     * var pulled = _.pullAt(array, [1, 3]);
     *
     * console.log(array);
     * // => ['a', 'c']
     *
     * console.log(pulled);
     * // => ['b', 'd']
     */
    var pullAt = flatRest(function(array, indexes) {
      var length = array == null ? 0 : array.length,
          result = baseAt(array, indexes);

      basePullAt(array, arrayMap(indexes, function(index) {
        return isIndex(index, length) ? +index : index;
      }).sort(compareAscending));

      return result;
    });

    /**
     * Removes all elements from `array` that `predicate` returns truthy for
     * and returns an array of the removed elements. The predicate is invoked
     * with three arguments: (value, index, array).
     *
     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
     * to pull elements from an array by value.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4];
     * var evens = _.remove(array, function(n) {
     *   return n % 2 == 0;
     * });
     *
     * console.log(array);
     * // => [1, 3]
     *
     * console.log(evens);
     * // => [2, 4]
     */
    function remove(array, predicate) {
      var result = [];
      if (!(array && array.length)) {
        return result;
      }
      var index = -1,
          indexes = [],
          length = array.length;

      predicate = getIteratee(predicate, 3);
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result.push(value);
          indexes.push(index);
        }
      }
      basePullAt(array, indexes);
      return result;
    }

    /**
     * Reverses `array` so that the first element becomes the last, the second
     * element becomes the second to last, and so on.
     *
     * **Note:** This method mutates `array` and is based on
     * [`Array#reverse`](https://mdn.io/Array/reverse).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.reverse(array);
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function reverse(array) {
      return array == null ? array : nativeReverse.call(array);
    }

    /**
     * Creates a slice of `array` from `start` up to, but not including, `end`.
     *
     * **Note:** This method is used instead of
     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
     * returned.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function slice(array, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
        start = 0;
        end = length;
      }
      else {
        start = start == null ? 0 : toInteger(start);
        end = end === undefined ? length : toInteger(end);
      }
      return baseSlice(array, start, end);
    }

    /**
     * Uses a binary search to determine the lowest index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([30, 50], 40);
     * // => 1
     */
    function sortedIndex(array, value) {
      return baseSortedIndex(array, value);
    }

    /**
     * This method is like `_.sortedIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
     * // => 0
     */
    function sortedIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
    }

    /**
     * This method is like `_.indexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
     * // => 1
     */
    function sortedIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value);
        if (index < length && eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.sortedIndex` except that it returns the highest
     * index at which `value` should be inserted into `array` in order to
     * maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
     * // => 4
     */
    function sortedLastIndex(array, value) {
      return baseSortedIndex(array, value, true);
    }

    /**
     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 1
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
     * // => 1
     */
    function sortedLastIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
    }

    /**
     * This method is like `_.lastIndexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
     * // => 3
     */
    function sortedLastIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value, true) - 1;
        if (eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.uniq` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniq([1, 1, 2]);
     * // => [1, 2]
     */
    function sortedUniq(array) {
      return (array && array.length)
        ? baseSortedUniq(array)
        : [];
    }

    /**
     * This method is like `_.uniqBy` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
     * // => [1.1, 2.3]
     */
    function sortedUniqBy(array, iteratee) {
      return (array && array.length)
        ? baseSortedUniq(array, getIteratee(iteratee, 2))
        : [];
    }

    /**
     * Gets all but the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.tail([1, 2, 3]);
     * // => [2, 3]
     */
    function tail(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 1, length) : [];
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.take([1, 2, 3]);
     * // => [1]
     *
     * _.take([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.take([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.take([1, 2, 3], 0);
     * // => []
     */
    function take(array, n, guard) {
      if (!(array && array.length)) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRight([1, 2, 3]);
     * // => [3]
     *
     * _.takeRight([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.takeRight([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.takeRight([1, 2, 3], 0);
     * // => []
     */
    function takeRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with elements taken from the end. Elements are
     * taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.takeRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeRightWhile(users, ['active', false]);
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeRightWhile(users, 'active');
     * // => []
     */
    function takeRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), false, true)
        : [];
    }

    /**
     * Creates a slice of `array` with elements taken from the beginning. Elements
     * are taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.takeWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeWhile(users, ['active', false]);
     * // => objects for ['barney', 'fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeWhile(users, 'active');
     * // => []
     */
    function takeWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3))
        : [];
    }

    /**
     * Creates an array of unique values, in order, from all given arrays using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.union([2], [1, 2]);
     * // => [2, 1]
     */
    var union = baseRest(function(arrays) {
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
    });

    /**
     * This method is like `_.union` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which uniqueness is computed. Result values are chosen from the first
     * array in which the value occurs. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    var unionBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.union` except that it accepts `comparator` which
     * is invoked to compare elements of `arrays`. Result values are chosen from
     * the first array in which the value occurs. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.unionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var unionWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
    });

    /**
     * Creates a duplicate-free version of an array, using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons, in which only the first occurrence of each element
     * is kept. The order of result values is determined by the order they occur
     * in the array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniq([2, 1, 2]);
     * // => [2, 1]
     */
    function uniq(array) {
      return (array && array.length) ? baseUniq(array) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * uniqueness is computed. The order of result values is determined by the
     * order they occur in the array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    function uniqBy(array, iteratee) {
      return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `comparator` which
     * is invoked to compare elements of `array`. The order of result values is
     * determined by the order they occur in the array.The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.uniqWith(objects, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
     */
    function uniqWith(array, comparator) {
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return (array && array.length) ? baseUniq(array, undefined, comparator) : [];
    }

    /**
     * This method is like `_.zip` except that it accepts an array of grouped
     * elements and creates an array regrouping the elements to their pre-zip
     * configuration.
     *
     * @static
     * @memberOf _
     * @since 1.2.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     *
     * _.unzip(zipped);
     * // => [['a', 'b'], [1, 2], [true, false]]
     */
    function unzip(array) {
      if (!(array && array.length)) {
        return [];
      }
      var length = 0;
      array = arrayFilter(array, function(group) {
        if (isArrayLikeObject(group)) {
          length = nativeMax(group.length, length);
          return true;
        }
      });
      return baseTimes(length, function(index) {
        return arrayMap(array, baseProperty(index));
      });
    }

    /**
     * This method is like `_.unzip` except that it accepts `iteratee` to specify
     * how regrouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  regrouped values.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
     * // => [[1, 10, 100], [2, 20, 200]]
     *
     * _.unzipWith(zipped, _.add);
     * // => [3, 30, 300]
     */
    function unzipWith(array, iteratee) {
      if (!(array && array.length)) {
        return [];
      }
      var result = unzip(array);
      if (iteratee == null) {
        return result;
      }
      return arrayMap(result, function(group) {
        return apply(iteratee, undefined, group);
      });
    }

    /**
     * Creates an array excluding all given values using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.pull`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...*} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.xor
     * @example
     *
     * _.without([2, 1, 2, 3], 1, 2);
     * // => [3]
     */
    var without = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, values)
        : [];
    });

    /**
     * Creates an array of unique values that is the
     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
     * of the given arrays. The order of result values is determined by the order
     * they occur in the arrays.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.without
     * @example
     *
     * _.xor([2, 1], [2, 3]);
     * // => [1, 3]
     */
    var xor = baseRest(function(arrays) {
      return baseXor(arrayFilter(arrays, isArrayLikeObject));
    });

    /**
     * This method is like `_.xor` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which by which they're compared. The order of result values is determined
     * by the order they occur in the arrays. The iteratee is invoked with one
     * argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2, 3.4]
     *
     * // The `_.property` iteratee shorthand.
     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var xorBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.xor` except that it accepts `comparator` which is
     * invoked to compare elements of `arrays`. The order of result values is
     * determined by the order they occur in the arrays. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.xorWith(objects, others, _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var xorWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
    });

    /**
     * Creates an array of grouped elements, the first of which contains the
     * first elements of the given arrays, the second of which contains the
     * second elements of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     */
    var zip = baseRest(unzip);

    /**
     * This method is like `_.fromPairs` except that it accepts two arrays,
     * one of property identifiers and one of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 0.4.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObject(['a', 'b'], [1, 2]);
     * // => { 'a': 1, 'b': 2 }
     */
    function zipObject(props, values) {
      return baseZipObject(props || [], values || [], assignValue);
    }

    /**
     * This method is like `_.zipObject` except that it supports property paths.
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
     */
    function zipObjectDeep(props, values) {
      return baseZipObject(props || [], values || [], baseSet);
    }

    /**
     * This method is like `_.zip` except that it accepts `iteratee` to specify
     * how grouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  grouped values.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
     *   return a + b + c;
     * });
     * // => [111, 222]
     */
    var zipWith = baseRest(function(arrays) {
      var length = arrays.length,
          iteratee = length > 1 ? arrays[length - 1] : undefined;

      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
      return unzipWith(arrays, iteratee);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
     * chain sequences enabled. The result of such sequences must be unwrapped
     * with `_#value`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Seq
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36 },
     *   { 'user': 'fred',    'age': 40 },
     *   { 'user': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _
     *   .chain(users)
     *   .sortBy('age')
     *   .map(function(o) {
     *     return o.user + ' is ' + o.age;
     *   })
     *   .head()
     *   .value();
     * // => 'pebbles is 1'
     */
    function chain(value) {
      var result = lodash(value);
      result.__chain__ = true;
      return result;
    }

    /**
     * This method invokes `interceptor` and returns `value`. The interceptor
     * is invoked with one argument; (value). The purpose of this method is to
     * "tap into" a method chain sequence in order to modify intermediate results.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3])
     *  .tap(function(array) {
     *    // Mutate input array.
     *    array.pop();
     *  })
     *  .reverse()
     *  .value();
     * // => [2, 1]
     */
    function tap(value, interceptor) {
      interceptor(value);
      return value;
    }

    /**
     * This method is like `_.tap` except that it returns the result of `interceptor`.
     * The purpose of this method is to "pass thru" values replacing intermediate
     * results in a method chain sequence.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns the result of `interceptor`.
     * @example
     *
     * _('  abc  ')
     *  .chain()
     *  .trim()
     *  .thru(function(value) {
     *    return [value];
     *  })
     *  .value();
     * // => ['abc']
     */
    function thru(value, interceptor) {
      return interceptor(value);
    }

    /**
     * This method is the wrapper version of `_.at`.
     *
     * @name at
     * @memberOf _
     * @since 1.0.0
     * @category Seq
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _(object).at(['a[0].b.c', 'a[1]']).value();
     * // => [3, 4]
     */
    var wrapperAt = flatRest(function(paths) {
      var length = paths.length,
          start = length ? paths[0] : 0,
          value = this.__wrapped__,
          interceptor = function(object) { return baseAt(object, paths); };

      if (length > 1 || this.__actions__.length ||
          !(value instanceof LazyWrapper) || !isIndex(start)) {
        return this.thru(interceptor);
      }
      value = value.slice(start, +start + (length ? 1 : 0));
      value.__actions__.push({
        'func': thru,
        'args': [interceptor],
        'thisArg': undefined
      });
      return new LodashWrapper(value, this.__chain__).thru(function(array) {
        if (length && !array.length) {
          array.push(undefined);
        }
        return array;
      });
    });

    /**
     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
     *
     * @name chain
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // A sequence without explicit chaining.
     * _(users).head();
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // A sequence with explicit chaining.
     * _(users)
     *   .chain()
     *   .head()
     *   .pick('user')
     *   .value();
     * // => { 'user': 'barney' }
     */
    function wrapperChain() {
      return chain(this);
    }

    /**
     * Executes the chain sequence and returns the wrapped result.
     *
     * @name commit
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).push(3);
     *
     * console.log(array);
     * // => [1, 2]
     *
     * wrapped = wrapped.commit();
     * console.log(array);
     * // => [1, 2, 3]
     *
     * wrapped.last();
     * // => 3
     *
     * console.log(array);
     * // => [1, 2, 3]
     */
    function wrapperCommit() {
      return new LodashWrapper(this.value(), this.__chain__);
    }

    /**
     * Gets the next value on a wrapped object following the
     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
     *
     * @name next
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the next iterator value.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 1 }
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 2 }
     *
     * wrapped.next();
     * // => { 'done': true, 'value': undefined }
     */
    function wrapperNext() {
      if (this.__values__ === undefined) {
        this.__values__ = toArray(this.value());
      }
      var done = this.__index__ >= this.__values__.length,
          value = done ? undefined : this.__values__[this.__index__++];

      return { 'done': done, 'value': value };
    }

    /**
     * Enables the wrapper to be iterable.
     *
     * @name Symbol.iterator
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the wrapper object.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped[Symbol.iterator]() === wrapped;
     * // => true
     *
     * Array.from(wrapped);
     * // => [1, 2]
     */
    function wrapperToIterator() {
      return this;
    }

    /**
     * Creates a clone of the chain sequence planting `value` as the wrapped value.
     *
     * @name plant
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @param {*} value The value to plant.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2]).map(square);
     * var other = wrapped.plant([3, 4]);
     *
     * other.value();
     * // => [9, 16]
     *
     * wrapped.value();
     * // => [1, 4]
     */
    function wrapperPlant(value) {
      var result,
          parent = this;

      while (parent instanceof baseLodash) {
        var clone = wrapperClone(parent);
        clone.__index__ = 0;
        clone.__values__ = undefined;
        if (result) {
          previous.__wrapped__ = clone;
        } else {
          result = clone;
        }
        var previous = clone;
        parent = parent.__wrapped__;
      }
      previous.__wrapped__ = value;
      return result;
    }

    /**
     * This method is the wrapper version of `_.reverse`.
     *
     * **Note:** This method mutates the wrapped array.
     *
     * @name reverse
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _(array).reverse().value()
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function wrapperReverse() {
      var value = this.__wrapped__;
      if (value instanceof LazyWrapper) {
        var wrapped = value;
        if (this.__actions__.length) {
          wrapped = new LazyWrapper(this);
        }
        wrapped = wrapped.reverse();
        wrapped.__actions__.push({
          'func': thru,
          'args': [reverse],
          'thisArg': undefined
        });
        return new LodashWrapper(wrapped, this.__chain__);
      }
      return this.thru(reverse);
    }

    /**
     * Executes the chain sequence to resolve the unwrapped value.
     *
     * @name value
     * @memberOf _
     * @since 0.1.0
     * @alias toJSON, valueOf
     * @category Seq
     * @returns {*} Returns the resolved unwrapped value.
     * @example
     *
     * _([1, 2, 3]).value();
     * // => [1, 2, 3]
     */
    function wrapperValue() {
      return baseWrapperValue(this.__wrapped__, this.__actions__);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the number of times the key was returned by `iteratee`. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': 1, '6': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */
    var countBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        ++result[key];
      } else {
        baseAssignValue(result, key, 1);
      }
    });

    /**
     * Checks if `predicate` returns truthy for **all** elements of `collection`.
     * Iteration is stopped once `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * **Note:** This method returns `true` for
     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
     * elements of empty collections.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes'], Boolean);
     * // => false
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.every(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.every(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.every(users, 'active');
     * // => false
     */
    function every(collection, predicate, guard) {
      var func = isArray(collection) ? arrayEvery : baseEvery;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * **Note:** Unlike `_.remove`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.reject
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, { 'age': 36, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.filter(users, 'active');
     * // => objects for ['barney']
     *
     * // Combining several predicates using `_.overEvery` or `_.overSome`.
     * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));
     * // => objects for ['fred', 'barney']
     */
    function filter(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning the first element
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': true },
     *   { 'user': 'fred',    'age': 40, 'active': false },
     *   { 'user': 'pebbles', 'age': 1,  'active': true }
     * ];
     *
     * _.find(users, function(o) { return o.age < 40; });
     * // => object for 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.find(users, { 'age': 1, 'active': true });
     * // => object for 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.find(users, ['active', false]);
     * // => object for 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.find(users, 'active');
     * // => object for 'barney'
     */
    var find = createFind(findIndex);

    /**
     * This method is like `_.find` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=collection.length-1] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(n) {
     *   return n % 2 == 1;
     * });
     * // => 3
     */
    var findLast = createFind(findLastIndex);

    /**
     * Creates a flattened array of values by running each element in `collection`
     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
     * with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [n, n];
     * }
     *
     * _.flatMap([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMap(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), 1);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDeep([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMapDeep(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), INFINITY);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDepth([1, 2], duplicate, 2);
     * // => [[1, 1], [2, 2]]
     */
    function flatMapDepth(collection, iteratee, depth) {
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(map(collection, iteratee), depth);
    }

    /**
     * Iterates over elements of `collection` and invokes `iteratee` for each element.
     * The iteratee is invoked with three arguments: (value, index|key, collection).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * **Note:** As with other "Collections" methods, objects with a "length"
     * property are iterated like arrays. To avoid this behavior use `_.forIn`
     * or `_.forOwn` for object iteration.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias each
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEachRight
     * @example
     *
     * _.forEach([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `1` then `2`.
     *
     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forEach(collection, iteratee) {
      var func = isArray(collection) ? arrayEach : baseEach;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forEach` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @alias eachRight
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEach
     * @example
     *
     * _.forEachRight([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `2` then `1`.
     */
    function forEachRight(collection, iteratee) {
      var func = isArray(collection) ? arrayEachRight : baseEachRight;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The order of grouped values
     * is determined by the order they occur in `collection`. The corresponding
     * value of each key is an array of elements responsible for generating the
     * key. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': [4.2], '6': [6.1, 6.3] }
     *
     * // The `_.property` iteratee shorthand.
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */
    var groupBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        result[key].push(value);
      } else {
        baseAssignValue(result, key, [value]);
      }
    });

    /**
     * Checks if `value` is in `collection`. If `collection` is a string, it's
     * checked for a substring of `value`, otherwise
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * is used for equality comparisons. If `fromIndex` is negative, it's used as
     * the offset from the end of `collection`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {boolean} Returns `true` if `value` is found, else `false`.
     * @example
     *
     * _.includes([1, 2, 3], 1);
     * // => true
     *
     * _.includes([1, 2, 3], 1, 2);
     * // => false
     *
     * _.includes({ 'a': 1, 'b': 2 }, 1);
     * // => true
     *
     * _.includes('abcd', 'bc');
     * // => true
     */
    function includes(collection, value, fromIndex, guard) {
      collection = isArrayLike(collection) ? collection : values(collection);
      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

      var length = collection.length;
      if (fromIndex < 0) {
        fromIndex = nativeMax(length + fromIndex, 0);
      }
      return isString(collection)
        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
    }

    /**
     * Invokes the method at `path` of each element in `collection`, returning
     * an array of the results of each invoked method. Any additional arguments
     * are provided to each invoked method. If `path` is a function, it's invoked
     * for, and `this` bound to, each element in `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array|Function|string} path The path of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [args] The arguments to invoke each method with.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invokeMap([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */
    var invokeMap = baseRest(function(collection, path, args) {
      var index = -1,
          isFunc = typeof path == 'function',
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value) {
        result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
      });
      return result;
    });

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the last element responsible for generating the key. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var array = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.keyBy(array, function(o) {
     *   return String.fromCharCode(o.code);
     * });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.keyBy(array, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     */
    var keyBy = createAggregator(function(result, value, key) {
      baseAssignValue(result, key, value);
    });

    /**
     * Creates an array of values by running each element in `collection` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * _.map([4, 8], square);
     * // => [16, 64]
     *
     * _.map({ 'a': 4, 'b': 8 }, square);
     * // => [16, 64] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */
    function map(collection, iteratee) {
      var func = isArray(collection) ? arrayMap : baseMap;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.sortBy` except that it allows specifying the sort
     * orders of the iteratees to sort by. If `orders` is unspecified, all values
     * are sorted in ascending order. Otherwise, specify an order of "desc" for
     * descending or "asc" for ascending sort order of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @param {string[]} [orders] The sort orders of `iteratees`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 34 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 36 }
     * ];
     *
     * // Sort by `user` in ascending order and by `age` in descending order.
     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     */
    function orderBy(collection, iteratees, orders, guard) {
      if (collection == null) {
        return [];
      }
      if (!isArray(iteratees)) {
        iteratees = iteratees == null ? [] : [iteratees];
      }
      orders = guard ? undefined : orders;
      if (!isArray(orders)) {
        orders = orders == null ? [] : [orders];
      }
      return baseOrderBy(collection, iteratees, orders);
    }

    /**
     * Creates an array of elements split into two groups, the first of which
     * contains elements `predicate` returns truthy for, the second of which
     * contains elements `predicate` returns falsey for. The predicate is
     * invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of grouped elements.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': false },
     *   { 'user': 'fred',    'age': 40, 'active': true },
     *   { 'user': 'pebbles', 'age': 1,  'active': false }
     * ];
     *
     * _.partition(users, function(o) { return o.active; });
     * // => objects for [['fred'], ['barney', 'pebbles']]
     *
     * // The `_.matches` iteratee shorthand.
     * _.partition(users, { 'age': 1, 'active': false });
     * // => objects for [['pebbles'], ['barney', 'fred']]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.partition(users, ['active', false]);
     * // => objects for [['barney', 'pebbles'], ['fred']]
     *
     * // The `_.property` iteratee shorthand.
     * _.partition(users, 'active');
     * // => objects for [['fred'], ['barney', 'pebbles']]
     */
    var partition = createAggregator(function(result, value, key) {
      result[key ? 0 : 1].push(value);
    }, function() { return [[], []]; });

    /**
     * Reduces `collection` to a value which is the accumulated result of running
     * each element in `collection` thru `iteratee`, where each successive
     * invocation is supplied the return value of the previous. If `accumulator`
     * is not given, the first element of `collection` is used as the initial
     * value. The iteratee is invoked with four arguments:
     * (accumulator, value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.reduce`, `_.reduceRight`, and `_.transform`.
     *
     * The guarded methods are:
     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
     * and `sortBy`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduceRight
     * @example
     *
     * _.reduce([1, 2], function(sum, n) {
     *   return sum + n;
     * }, 0);
     * // => 3
     *
     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     *   return result;
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
     */
    function reduce(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduce : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
    }

    /**
     * This method is like `_.reduce` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduce
     * @example
     *
     * var array = [[0, 1], [2, 3], [4, 5]];
     *
     * _.reduceRight(array, function(flattened, other) {
     *   return flattened.concat(other);
     * }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */
    function reduceRight(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduceRight : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
    }

    /**
     * The opposite of `_.filter`; this method returns the elements of `collection`
     * that `predicate` does **not** return truthy for.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.filter
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': true }
     * ];
     *
     * _.reject(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.reject(users, { 'age': 40, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.reject(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.reject(users, 'active');
     * // => objects for ['barney']
     */
    function reject(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, negate(getIteratee(predicate, 3)));
    }

    /**
     * Gets a random element from `collection`.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     */
    function sample(collection) {
      var func = isArray(collection) ? arraySample : baseSample;
      return func(collection);
    }

    /**
     * Gets `n` random elements at unique keys from `collection` up to the
     * size of `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @param {number} [n=1] The number of elements to sample.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the random elements.
     * @example
     *
     * _.sampleSize([1, 2, 3], 2);
     * // => [3, 1]
     *
     * _.sampleSize([1, 2, 3], 4);
     * // => [2, 3, 1]
     */
    function sampleSize(collection, n, guard) {
      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      var func = isArray(collection) ? arraySampleSize : baseSampleSize;
      return func(collection, n);
    }

    /**
     * Creates an array of shuffled values, using a version of the
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     * @example
     *
     * _.shuffle([1, 2, 3, 4]);
     * // => [4, 1, 3, 2]
     */
    function shuffle(collection) {
      var func = isArray(collection) ? arrayShuffle : baseShuffle;
      return func(collection);
    }

    /**
     * Gets the size of `collection` by returning its length for array-like
     * values or the number of own enumerable string keyed properties for objects.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns the collection size.
     * @example
     *
     * _.size([1, 2, 3]);
     * // => 3
     *
     * _.size({ 'a': 1, 'b': 2 });
     * // => 2
     *
     * _.size('pebbles');
     * // => 7
     */
    function size(collection) {
      if (collection == null) {
        return 0;
      }
      if (isArrayLike(collection)) {
        return isString(collection) ? stringSize(collection) : collection.length;
      }
      var tag = getTag(collection);
      if (tag == mapTag || tag == setTag) {
        return collection.size;
      }
      return baseKeys(collection).length;
    }

    /**
     * Checks if `predicate` returns truthy for **any** element of `collection`.
     * Iteration is stopped once `predicate` returns truthy. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var users = [
     *   { 'user': 'barney', 'active': true },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.some(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.some(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.some(users, 'active');
     * // => true
     */
    function some(collection, predicate, guard) {
      var func = isArray(collection) ? arraySome : baseSome;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection thru each iteratee. This method
     * performs a stable sort, that is, it preserves the original sort order of
     * equal elements. The iteratees are invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 30 },
     *   { 'user': 'barney', 'age': 34 }
     * ];
     *
     * _.sortBy(users, [function(o) { return o.user; }]);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]
     *
     * _.sortBy(users, ['user', 'age']);
     * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]
     */
    var sortBy = baseRest(function(collection, iteratees) {
      if (collection == null) {
        return [];
      }
      var length = iteratees.length;
      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
        iteratees = [];
      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
        iteratees = [iteratees[0]];
      }
      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Gets the timestamp of the number of milliseconds that have elapsed since
     * the Unix epoch (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Date
     * @returns {number} Returns the timestamp.
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => Logs the number of milliseconds it took for the deferred invocation.
     */
    var now = ctxNow || function() {
      return root.Date.now();
    };

    /*------------------------------------------------------------------------*/

    /**
     * The opposite of `_.before`; this method creates a function that invokes
     * `func` once it's called `n` or more times.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {number} n The number of calls before `func` is invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => Logs 'done saving!' after the two async saves have completed.
     */
    function after(n, func) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n < 1) {
          return func.apply(this, arguments);
        }
      };
    }

    /**
     * Creates a function that invokes `func`, with up to `n` arguments,
     * ignoring any additional arguments.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @param {number} [n=func.length] The arity cap.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
     * // => [6, 8, 10]
     */
    function ary(func, n, guard) {
      n = guard ? undefined : n;
      n = (func && n == null) ? func.length : n;
      return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
    }

    /**
     * Creates a function that invokes `func`, with the `this` binding and arguments
     * of the created function, while it's called less than `n` times. Subsequent
     * calls to the created function return the result of the last `func` invocation.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {number} n The number of calls at which `func` is no longer invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * jQuery(element).on('click', _.before(5, addContactToList));
     * // => Allows adding up to 4 contacts to the list.
     */
    function before(n, func) {
      var result;
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n > 0) {
          result = func.apply(this, arguments);
        }
        if (n <= 1) {
          func = undefined;
        }
        return result;
      };
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and `partials` prepended to the arguments it receives.
     *
     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for partially applied arguments.
     *
     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
     * property of bound functions.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * function greet(greeting, punctuation) {
     *   return greeting + ' ' + this.user + punctuation;
     * }
     *
     * var object = { 'user': 'fred' };
     *
     * var bound = _.bind(greet, object, 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bind(greet, object, _, '!');
     * bound('hi');
     * // => 'hi fred!'
     */
    var bind = baseRest(function(func, thisArg, partials) {
      var bitmask = WRAP_BIND_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bind));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(func, bitmask, thisArg, partials, holders);
    });

    /**
     * Creates a function that invokes the method at `object[key]` with `partials`
     * prepended to the arguments it receives.
     *
     * This method differs from `_.bind` by allowing bound functions to reference
     * methods that may be redefined or don't yet exist. See
     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
     * for more details.
     *
     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Function
     * @param {Object} object The object to invoke the method on.
     * @param {string} key The key of the method.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'user': 'fred',
     *   'greet': function(greeting, punctuation) {
     *     return greeting + ' ' + this.user + punctuation;
     *   }
     * };
     *
     * var bound = _.bindKey(object, 'greet', 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * object.greet = function(greeting, punctuation) {
     *   return greeting + 'ya ' + this.user + punctuation;
     * };
     *
     * bound('!');
     * // => 'hiya fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bindKey(object, 'greet', _, '!');
     * bound('hi');
     * // => 'hiya fred!'
     */
    var bindKey = baseRest(function(object, key, partials) {
      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bindKey));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(key, bitmask, object, partials, holders);
    });

    /**
     * Creates a function that accepts arguments of `func` and either invokes
     * `func` returning its result, if at least `arity` number of arguments have
     * been provided, or returns a function that accepts the remaining `func`
     * arguments, and so on. The arity of `func` may be specified if `func.length`
     * is not sufficient.
     *
     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curry(abc);
     *
     * curried(1)(2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(1)(_, 3)(2);
     * // => [1, 2, 3]
     */
    function curry(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curry.placeholder;
      return result;
    }

    /**
     * This method is like `_.curry` except that arguments are applied to `func`
     * in the manner of `_.partialRight` instead of `_.partial`.
     *
     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curryRight(abc);
     *
     * curried(3)(2)(1);
     * // => [1, 2, 3]
     *
     * curried(2, 3)(1);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(3)(1, _)(2);
     * // => [1, 2, 3]
     */
    function curryRight(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curryRight.placeholder;
      return result;
    }

    /**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed `func` invocations and a `flush` method to immediately invoke them.
     * Provide `options` to indicate whether `func` should be invoked on the
     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
     * with the last arguments provided to the debounced function. Subsequent
     * calls to the debounced function return the result of the last `func`
     * invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the debounced function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=false]
     *  Specify invoking on the leading edge of the timeout.
     * @param {number} [options.maxWait]
     *  The maximum time `func` is allowed to be delayed before it's invoked.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // Avoid costly calculations while the window size is in flux.
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
     * jQuery(element).on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', debounced);
     *
     * // Cancel the trailing debounced invocation.
     * jQuery(window).on('popstate', debounced.cancel);
     */
    function debounce(func, wait, options) {
      var lastArgs,
          lastThis,
          maxWait,
          result,
          timerId,
          lastCallTime,
          lastInvokeTime = 0,
          leading = false,
          maxing = false,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject(options)) {
        leading = !!options.leading;
        maxing = 'maxWait' in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }

      function invokeFunc(time) {
        var args = lastArgs,
            thisArg = lastThis;

        lastArgs = lastThis = undefined;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }

      function leadingEdge(time) {
        // Reset any `maxWait` timer.
        lastInvokeTime = time;
        // Start the timer for the trailing edge.
        timerId = setTimeout(timerExpired, wait);
        // Invoke the leading edge.
        return leading ? invokeFunc(time) : result;
      }

      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime,
            timeWaiting = wait - timeSinceLastCall;

        return maxing
          ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
          : timeWaiting;
      }

      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime;

        // Either this is the first call, activity has stopped and we're at the
        // trailing edge, the system time has gone backwards and we're treating
        // it as the trailing edge, or we've hit the `maxWait` limit.
        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
      }

      function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        // Restart the timer.
        timerId = setTimeout(timerExpired, remainingWait(time));
      }

      function trailingEdge(time) {
        timerId = undefined;

        // Only invoke if we have `lastArgs` which means `func` has been
        // debounced at least once.
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = undefined;
        return result;
      }

      function cancel() {
        if (timerId !== undefined) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = undefined;
      }

      function flush() {
        return timerId === undefined ? result : trailingEdge(now());
      }

      function debounced() {
        var time = now(),
            isInvoking = shouldInvoke(time);

        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;

        if (isInvoking) {
          if (timerId === undefined) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            // Handle invocations in a tight loop.
            clearTimeout(timerId);
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === undefined) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }

    /**
     * Defers invoking the `func` until the current call stack has cleared. Any
     * additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to defer.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) {
     *   console.log(text);
     * }, 'deferred');
     * // => Logs 'deferred' after one millisecond.
     */
    var defer = baseRest(function(func, args) {
      return baseDelay(func, 1, args);
    });

    /**
     * Invokes `func` after `wait` milliseconds. Any additional arguments are
     * provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) {
     *   console.log(text);
     * }, 1000, 'later');
     * // => Logs 'later' after one second.
     */
    var delay = baseRest(function(func, wait, args) {
      return baseDelay(func, toNumber(wait) || 0, args);
    });

    /**
     * Creates a function that invokes `func` with arguments reversed.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to flip arguments for.
     * @returns {Function} Returns the new flipped function.
     * @example
     *
     * var flipped = _.flip(function() {
     *   return _.toArray(arguments);
     * });
     *
     * flipped('a', 'b', 'c', 'd');
     * // => ['d', 'c', 'b', 'a']
     */
    function flip(func) {
      return createWrap(func, WRAP_FLIP_FLAG);
    }

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided, it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is used as the map cache key. The `func`
     * is invoked with the `this` binding of the memoized function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the
     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoized function.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     * var other = { 'c': 3, 'd': 4 };
     *
     * var values = _.memoize(_.values);
     * values(object);
     * // => [1, 2]
     *
     * values(other);
     * // => [3, 4]
     *
     * object.a = 2;
     * values(object);
     * // => [1, 2]
     *
     * // Modify the result cache.
     * values.cache.set(object, ['a', 'b']);
     * values(object);
     * // => ['a', 'b']
     *
     * // Replace `_.memoize.Cache`.
     * _.memoize.Cache = WeakMap;
     */
    function memoize(func, resolver) {
      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments,
            key = resolver ? resolver.apply(this, args) : args[0],
            cache = memoized.cache;

        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result) || cache;
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache);
      return memoized;
    }

    // Expose `MapCache`.
    memoize.Cache = MapCache;

    /**
     * Creates a function that negates the result of the predicate `func`. The
     * `func` predicate is invoked with the `this` binding and arguments of the
     * created function.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} predicate The predicate to negate.
     * @returns {Function} Returns the new negated function.
     * @example
     *
     * function isEven(n) {
     *   return n % 2 == 0;
     * }
     *
     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
     * // => [1, 3, 5]
     */
    function negate(predicate) {
      if (typeof predicate != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function() {
        var args = arguments;
        switch (args.length) {
          case 0: return !predicate.call(this);
          case 1: return !predicate.call(this, args[0]);
          case 2: return !predicate.call(this, args[0], args[1]);
          case 3: return !predicate.call(this, args[0], args[1], args[2]);
        }
        return !predicate.apply(this, args);
      };
    }

    /**
     * Creates a function that is restricted to invoking `func` once. Repeat calls
     * to the function return the value of the first invocation. The `func` is
     * invoked with the `this` binding and arguments of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // => `createApplication` is invoked once
     */
    function once(func) {
      return before(2, func);
    }

    /**
     * Creates a function that invokes `func` with its arguments transformed.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Function
     * @param {Function} func The function to wrap.
     * @param {...(Function|Function[])} [transforms=[_.identity]]
     *  The argument transforms.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function doubled(n) {
     *   return n * 2;
     * }
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var func = _.overArgs(function(x, y) {
     *   return [x, y];
     * }, [square, doubled]);
     *
     * func(9, 3);
     * // => [81, 6]
     *
     * func(10, 5);
     * // => [100, 10]
     */
    var overArgs = castRest(function(func, transforms) {
      transforms = (transforms.length == 1 && isArray(transforms[0]))
        ? arrayMap(transforms[0], baseUnary(getIteratee()))
        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));

      var funcsLength = transforms.length;
      return baseRest(function(args) {
        var index = -1,
            length = nativeMin(args.length, funcsLength);

        while (++index < length) {
          args[index] = transforms[index].call(this, args[index]);
        }
        return apply(func, this, args);
      });
    });

    /**
     * Creates a function that invokes `func` with `partials` prepended to the
     * arguments it receives. This method is like `_.bind` except it does **not**
     * alter the `this` binding.
     *
     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 0.2.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var sayHelloTo = _.partial(greet, 'hello');
     * sayHelloTo('fred');
     * // => 'hello fred'
     *
     * // Partially applied with placeholders.
     * var greetFred = _.partial(greet, _, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     */
    var partial = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partial));
      return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);
    });

    /**
     * This method is like `_.partial` except that partially applied arguments
     * are appended to the arguments it receives.
     *
     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var greetFred = _.partialRight(greet, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     *
     * // Partially applied with placeholders.
     * var sayHelloTo = _.partialRight(greet, 'hello', _);
     * sayHelloTo('fred');
     * // => 'hello fred'
     */
    var partialRight = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partialRight));
      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
    });

    /**
     * Creates a function that invokes `func` with arguments arranged according
     * to the specified `indexes` where the argument value at the first index is
     * provided as the first argument, the argument value at the second index is
     * provided as the second argument, and so on.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to rearrange arguments for.
     * @param {...(number|number[])} indexes The arranged argument indexes.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var rearged = _.rearg(function(a, b, c) {
     *   return [a, b, c];
     * }, [2, 0, 1]);
     *
     * rearged('b', 'c', 'a')
     * // => ['a', 'b', 'c']
     */
    var rearg = flatRest(function(func, indexes) {
      return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
    });

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * created function and arguments from `start` and beyond provided as
     * an array.
     *
     * **Note:** This method is based on the
     * [rest parameter](https://mdn.io/rest_parameters).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.rest(function(what, names) {
     *   return what + ' ' + _.initial(names).join(', ') +
     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
     * });
     *
     * say('hello', 'fred', 'barney', 'pebbles');
     * // => 'hello fred, barney, & pebbles'
     */
    function rest(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start === undefined ? start : toInteger(start);
      return baseRest(func, start);
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * create function and an array of arguments much like
     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
     *
     * **Note:** This method is based on the
     * [spread operator](https://mdn.io/spread_operator).
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Function
     * @param {Function} func The function to spread arguments over.
     * @param {number} [start=0] The start position of the spread.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.spread(function(who, what) {
     *   return who + ' says ' + what;
     * });
     *
     * say(['fred', 'hello']);
     * // => 'fred says hello'
     *
     * var numbers = Promise.all([
     *   Promise.resolve(40),
     *   Promise.resolve(36)
     * ]);
     *
     * numbers.then(_.spread(function(x, y) {
     *   return x + y;
     * }));
     * // => a Promise of 76
     */
    function spread(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start == null ? 0 : nativeMax(toInteger(start), 0);
      return baseRest(function(args) {
        var array = args[start],
            otherArgs = castSlice(args, 0, start);

        if (array) {
          arrayPush(otherArgs, array);
        }
        return apply(func, this, otherArgs);
      });
    }

    /**
     * Creates a throttled function that only invokes `func` at most once per
     * every `wait` milliseconds. The throttled function comes with a `cancel`
     * method to cancel delayed `func` invocations and a `flush` method to
     * immediately invoke them. Provide `options` to indicate whether `func`
     * should be invoked on the leading and/or trailing edge of the `wait`
     * timeout. The `func` is invoked with the last arguments provided to the
     * throttled function. Subsequent calls to the throttled function return the
     * result of the last `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the throttled function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=true]
     *  Specify invoking on the leading edge of the timeout.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // Avoid excessively updating the position while scrolling.
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
     * jQuery(element).on('click', throttled);
     *
     * // Cancel the trailing throttled invocation.
     * jQuery(window).on('popstate', throttled.cancel);
     */
    function throttle(func, wait, options) {
      var leading = true,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (isObject(options)) {
        leading = 'leading' in options ? !!options.leading : leading;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }
      return debounce(func, wait, {
        'leading': leading,
        'maxWait': wait,
        'trailing': trailing
      });
    }

    /**
     * Creates a function that accepts up to one argument, ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.unary(parseInt));
     * // => [6, 8, 10]
     */
    function unary(func) {
      return ary(func, 1);
    }

    /**
     * Creates a function that provides `value` to `wrapper` as its first
     * argument. Any additional arguments provided to the function are appended
     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
     * binding of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {*} value The value to wrap.
     * @param {Function} [wrapper=identity] The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('fred, barney, & pebbles');
     * // => '<p>fred, barney, &amp; pebbles</p>'
     */
    function wrap(value, wrapper) {
      return partial(castFunction(wrapper), value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Casts `value` as an array if it's not one.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Lang
     * @param {*} value The value to inspect.
     * @returns {Array} Returns the cast array.
     * @example
     *
     * _.castArray(1);
     * // => [1]
     *
     * _.castArray({ 'a': 1 });
     * // => [{ 'a': 1 }]
     *
     * _.castArray('abc');
     * // => ['abc']
     *
     * _.castArray(null);
     * // => [null]
     *
     * _.castArray(undefined);
     * // => [undefined]
     *
     * _.castArray();
     * // => []
     *
     * var array = [1, 2, 3];
     * console.log(_.castArray(array) === array);
     * // => true
     */
    function castArray() {
      if (!arguments.length) {
        return [];
      }
      var value = arguments[0];
      return isArray(value) ? value : [value];
    }

    /**
     * Creates a shallow clone of `value`.
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
     * and supports cloning arrays, array buffers, booleans, date objects, maps,
     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
     * arrays. The own enumerable properties of `arguments` objects are cloned
     * as plain objects. An empty object is returned for uncloneable values such
     * as error objects, functions, DOM nodes, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to clone.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeep
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var shallow = _.clone(objects);
     * console.log(shallow[0] === objects[0]);
     * // => true
     */
    function clone(value) {
      return baseClone(value, CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.clone` except that it accepts `customizer` which
     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
     * cloning is handled by the method instead. The `customizer` is invoked with
     * up to four arguments; (value [, index|key, object, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeepWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(false);
     *   }
     * }
     *
     * var el = _.cloneWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 0
     */
    function cloneWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * This method is like `_.clone` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @returns {*} Returns the deep cloned value.
     * @see _.clone
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var deep = _.cloneDeep(objects);
     * console.log(deep[0] === objects[0]);
     * // => false
     */
    function cloneDeep(value) {
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.cloneWith` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the deep cloned value.
     * @see _.cloneWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(true);
     *   }
     * }
     *
     * var el = _.cloneDeepWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 20
     */
    function cloneDeepWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * Checks if `object` conforms to `source` by invoking the predicate
     * properties of `source` with the corresponding property values of `object`.
     *
     * **Note:** This method is equivalent to `_.conforms` when `source` is
     * partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
     * // => true
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
     * // => false
     */
    function conformsTo(object, source) {
      return source == null || baseConformsTo(object, source, keys(source));
    }

    /**
     * Performs a
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */
    function eq(value, other) {
      return value === other || (value !== value && other !== other);
    }

    /**
     * Checks if `value` is greater than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     * @see _.lt
     * @example
     *
     * _.gt(3, 1);
     * // => true
     *
     * _.gt(3, 3);
     * // => false
     *
     * _.gt(1, 3);
     * // => false
     */
    var gt = createRelationalOperation(baseGt);

    /**
     * Checks if `value` is greater than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than or equal to
     *  `other`, else `false`.
     * @see _.lte
     * @example
     *
     * _.gte(3, 1);
     * // => true
     *
     * _.gte(3, 3);
     * // => true
     *
     * _.gte(1, 3);
     * // => false
     */
    var gte = createRelationalOperation(function(value, other) {
      return value >= other;
    });

    /**
     * Checks if `value` is likely an `arguments` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     *  else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
        !propertyIsEnumerable.call(value, 'callee');
    };

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */
    var isArray = Array.isArray;

    /**
     * Checks if `value` is classified as an `ArrayBuffer` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     * @example
     *
     * _.isArrayBuffer(new ArrayBuffer(2));
     * // => true
     *
     * _.isArrayBuffer(new Array(2));
     * // => false
     */
    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

    /**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }

    /**
     * This method is like `_.isArrayLike` except that it also checks if `value`
     * is an object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array-like object,
     *  else `false`.
     * @example
     *
     * _.isArrayLikeObject([1, 2, 3]);
     * // => true
     *
     * _.isArrayLikeObject(document.body.children);
     * // => true
     *
     * _.isArrayLikeObject('abc');
     * // => false
     *
     * _.isArrayLikeObject(_.noop);
     * // => false
     */
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }

    /**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
     * @example
     *
     * _.isBoolean(false);
     * // => true
     *
     * _.isBoolean(null);
     * // => false
     */
    function isBoolean(value) {
      return value === true || value === false ||
        (isObjectLike(value) && baseGetTag(value) == boolTag);
    }

    /**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */
    var isBuffer = nativeIsBuffer || stubFalse;

    /**
     * Checks if `value` is classified as a `Date` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     *
     * _.isDate('Mon April 23 2012');
     * // => false
     */
    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

    /**
     * Checks if `value` is likely a DOM element.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     *
     * _.isElement('<body>');
     * // => false
     */
    function isElement(value) {
      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
    }

    /**
     * Checks if `value` is an empty object, collection, map, or set.
     *
     * Objects are considered empty if they have no own enumerable string keyed
     * properties.
     *
     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
     * jQuery-like collections are considered empty if they have a `length` of `0`.
     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */
    function isEmpty(value) {
      if (value == null) {
        return true;
      }
      if (isArrayLike(value) &&
          (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
            isBuffer(value) || isTypedArray(value) || isArguments(value))) {
        return !value.length;
      }
      var tag = getTag(value);
      if (tag == mapTag || tag == setTag) {
        return !value.size;
      }
      if (isPrototype(value)) {
        return !baseKeys(value).length;
      }
      for (var key in value) {
        if (hasOwnProperty.call(value, key)) {
          return false;
        }
      }
      return true;
    }

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent.
     *
     * **Note:** This method supports comparing arrays, array buffers, booleans,
     * date objects, error objects, maps, numbers, `Object` objects, regexes,
     * sets, strings, symbols, and typed arrays. `Object` objects are compared
     * by their own, not inherited, enumerable properties. Functions and DOM
     * nodes are compared by strict equality, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.isEqual(object, other);
     * // => true
     *
     * object === other;
     * // => false
     */
    function isEqual(value, other) {
      return baseIsEqual(value, other);
    }

    /**
     * This method is like `_.isEqual` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with up to
     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, othValue) {
     *   if (isGreeting(objValue) && isGreeting(othValue)) {
     *     return true;
     *   }
     * }
     *
     * var array = ['hello', 'goodbye'];
     * var other = ['hi', 'goodbye'];
     *
     * _.isEqualWith(array, other, customizer);
     * // => true
     */
    function isEqualWith(value, other, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      var result = customizer ? customizer(value, other) : undefined;
      return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
    }

    /**
     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
     * `SyntaxError`, `TypeError`, or `URIError` object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
     * @example
     *
     * _.isError(new Error);
     * // => true
     *
     * _.isError(Error);
     * // => false
     */
    function isError(value) {
      if (!isObjectLike(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == errorTag || tag == domExcTag ||
        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
    }

    /**
     * Checks if `value` is a finite primitive number.
     *
     * **Note:** This method is based on
     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
     * @example
     *
     * _.isFinite(3);
     * // => true
     *
     * _.isFinite(Number.MIN_VALUE);
     * // => true
     *
     * _.isFinite(Infinity);
     * // => false
     *
     * _.isFinite('3');
     * // => false
     */
    function isFinite(value) {
      return typeof value == 'number' && nativeIsFinite(value);
    }

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    function isFunction(value) {
      if (!isObject(value)) {
        return false;
      }
      // The use of `Object#toString` avoids issues with the `typeof` operator
      // in Safari 9 which returns 'object' for typed arrays and other constructors.
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }

    /**
     * Checks if `value` is an integer.
     *
     * **Note:** This method is based on
     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
     * @example
     *
     * _.isInteger(3);
     * // => true
     *
     * _.isInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isInteger(Infinity);
     * // => false
     *
     * _.isInteger('3');
     * // => false
     */
    function isInteger(value) {
      return typeof value == 'number' && value == toInteger(value);
    }

    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This method is loosely based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */
    function isLength(value) {
      return typeof value == 'number' &&
        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */
    function isObject(value) {
      var type = typeof value;
      return value != null && (type == 'object' || type == 'function');
    }

    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */
    function isObjectLike(value) {
      return value != null && typeof value == 'object';
    }

    /**
     * Checks if `value` is classified as a `Map` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     * @example
     *
     * _.isMap(new Map);
     * // => true
     *
     * _.isMap(new WeakMap);
     * // => false
     */
    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

    /**
     * Performs a partial deep comparison between `object` and `source` to
     * determine if `object` contains equivalent property values.
     *
     * **Note:** This method is equivalent to `_.matches` when `source` is
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.isMatch(object, { 'b': 2 });
     * // => true
     *
     * _.isMatch(object, { 'b': 1 });
     * // => false
     */
    function isMatch(object, source) {
      return object === source || baseIsMatch(object, source, getMatchData(source));
    }

    /**
     * This method is like `_.isMatch` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with five
     * arguments: (objValue, srcValue, index|key, object, source).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, srcValue) {
     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
     *     return true;
     *   }
     * }
     *
     * var object = { 'greeting': 'hello' };
     * var source = { 'greeting': 'hi' };
     *
     * _.isMatchWith(object, source, customizer);
     * // => true
     */
    function isMatchWith(object, source, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseIsMatch(object, source, getMatchData(source), customizer);
    }

    /**
     * Checks if `value` is `NaN`.
     *
     * **Note:** This method is based on
     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
     * `undefined` and other non-number values.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */
    function isNaN(value) {
      // An `NaN` primitive is the only value that is not equal to itself.
      // Perform the `toStringTag` check first to avoid errors with some
      // ActiveX objects in IE.
      return isNumber(value) && value != +value;
    }

    /**
     * Checks if `value` is a pristine native function.
     *
     * **Note:** This method can't reliably detect native functions in the presence
     * of the core-js package because core-js circumvents this kind of detection.
     * Despite multiple requests, the core-js maintainer has made it clear: any
     * attempt to fix the detection will be obstructed. As a result, we're left
     * with little choice but to throw an error. Unfortunately, this also affects
     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
     * which rely on core-js.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     * @example
     *
     * _.isNative(Array.prototype.push);
     * // => true
     *
     * _.isNative(_);
     * // => false
     */
    function isNative(value) {
      if (isMaskable(value)) {
        throw new Error(CORE_ERROR_TEXT);
      }
      return baseIsNative(value);
    }

    /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(void 0);
     * // => false
     */
    function isNull(value) {
      return value === null;
    }

    /**
     * Checks if `value` is `null` or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
     * @example
     *
     * _.isNil(null);
     * // => true
     *
     * _.isNil(void 0);
     * // => true
     *
     * _.isNil(NaN);
     * // => false
     */
    function isNil(value) {
      return value == null;
    }

    /**
     * Checks if `value` is classified as a `Number` primitive or object.
     *
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
     * classified as numbers, use the `_.isFinite` method.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
     * @example
     *
     * _.isNumber(3);
     * // => true
     *
     * _.isNumber(Number.MIN_VALUE);
     * // => true
     *
     * _.isNumber(Infinity);
     * // => true
     *
     * _.isNumber('3');
     * // => false
     */
    function isNumber(value) {
      return typeof value == 'number' ||
        (isObjectLike(value) && baseGetTag(value) == numberTag);
    }

    /**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * @static
     * @memberOf _
     * @since 0.8.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */
    function isPlainObject(value) {
      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
      return typeof Ctor == 'function' && Ctor instanceof Ctor &&
        funcToString.call(Ctor) == objectCtorString;
    }

    /**
     * Checks if `value` is classified as a `RegExp` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     * @example
     *
     * _.isRegExp(/abc/);
     * // => true
     *
     * _.isRegExp('/abc/');
     * // => false
     */
    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

    /**
     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
     * double precision number which isn't the result of a rounded unsafe integer.
     *
     * **Note:** This method is based on
     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
     * @example
     *
     * _.isSafeInteger(3);
     * // => true
     *
     * _.isSafeInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isSafeInteger(Infinity);
     * // => false
     *
     * _.isSafeInteger('3');
     * // => false
     */
    function isSafeInteger(value) {
      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is classified as a `Set` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     * @example
     *
     * _.isSet(new Set);
     * // => true
     *
     * _.isSet(new WeakSet);
     * // => false
     */
    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

    /**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */
    function isString(value) {
      return typeof value == 'string' ||
        (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
    }

    /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */
    function isSymbol(value) {
      return typeof value == 'symbol' ||
        (isObjectLike(value) && baseGetTag(value) == symbolTag);
    }

    /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

    /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     *
     * _.isUndefined(null);
     * // => false
     */
    function isUndefined(value) {
      return value === undefined;
    }

    /**
     * Checks if `value` is classified as a `WeakMap` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
     * @example
     *
     * _.isWeakMap(new WeakMap);
     * // => true
     *
     * _.isWeakMap(new Map);
     * // => false
     */
    function isWeakMap(value) {
      return isObjectLike(value) && getTag(value) == weakMapTag;
    }

    /**
     * Checks if `value` is classified as a `WeakSet` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
     * @example
     *
     * _.isWeakSet(new WeakSet);
     * // => true
     *
     * _.isWeakSet(new Set);
     * // => false
     */
    function isWeakSet(value) {
      return isObjectLike(value) && baseGetTag(value) == weakSetTag;
    }

    /**
     * Checks if `value` is less than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     * @see _.gt
     * @example
     *
     * _.lt(1, 3);
     * // => true
     *
     * _.lt(3, 3);
     * // => false
     *
     * _.lt(3, 1);
     * // => false
     */
    var lt = createRelationalOperation(baseLt);

    /**
     * Checks if `value` is less than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than or equal to
     *  `other`, else `false`.
     * @see _.gte
     * @example
     *
     * _.lte(1, 3);
     * // => true
     *
     * _.lte(3, 3);
     * // => true
     *
     * _.lte(3, 1);
     * // => false
     */
    var lte = createRelationalOperation(function(value, other) {
      return value <= other;
    });

    /**
     * Converts `value` to an array.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Array} Returns the converted array.
     * @example
     *
     * _.toArray({ 'a': 1, 'b': 2 });
     * // => [1, 2]
     *
     * _.toArray('abc');
     * // => ['a', 'b', 'c']
     *
     * _.toArray(1);
     * // => []
     *
     * _.toArray(null);
     * // => []
     */
    function toArray(value) {
      if (!value) {
        return [];
      }
      if (isArrayLike(value)) {
        return isString(value) ? stringToArray(value) : copyArray(value);
      }
      if (symIterator && value[symIterator]) {
        return iteratorToArray(value[symIterator]());
      }
      var tag = getTag(value),
          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

      return func(value);
    }

    /**
     * Converts `value` to a finite number.
     *
     * @static
     * @memberOf _
     * @since 4.12.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted number.
     * @example
     *
     * _.toFinite(3.2);
     * // => 3.2
     *
     * _.toFinite(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toFinite(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toFinite('3.2');
     * // => 3.2
     */
    function toFinite(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }
      value = toNumber(value);
      if (value === INFINITY || value === -INFINITY) {
        var sign = (value < 0 ? -1 : 1);
        return sign * MAX_INTEGER;
      }
      return value === value ? value : 0;
    }

    /**
     * Converts `value` to an integer.
     *
     * **Note:** This method is loosely based on
     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toInteger(3.2);
     * // => 3
     *
     * _.toInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toInteger(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toInteger('3.2');
     * // => 3
     */
    function toInteger(value) {
      var result = toFinite(value),
          remainder = result % 1;

      return result === result ? (remainder ? result - remainder : result) : 0;
    }

    /**
     * Converts `value` to an integer suitable for use as the length of an
     * array-like object.
     *
     * **Note:** This method is based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toLength(3.2);
     * // => 3
     *
     * _.toLength(Number.MIN_VALUE);
     * // => 0
     *
     * _.toLength(Infinity);
     * // => 4294967295
     *
     * _.toLength('3.2');
     * // => 3
     */
    function toLength(value) {
      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
    }

    /**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3.2);
     * // => 3.2
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3.2');
     * // => 3.2
     */
    function toNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
        value = isObject(other) ? (other + '') : other;
      }
      if (typeof value != 'string') {
        return value === 0 ? value : +value;
      }
      value = baseTrim(value);
      var isBinary = reIsBinary.test(value);
      return (isBinary || reIsOctal.test(value))
        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
        : (reIsBadHex.test(value) ? NAN : +value);
    }

    /**
     * Converts `value` to a plain object flattening inherited enumerable string
     * keyed properties of `value` to own properties of the plain object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Object} Returns the converted plain object.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.assign({ 'a': 1 }, new Foo);
     * // => { 'a': 1, 'b': 2 }
     *
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
     * // => { 'a': 1, 'b': 2, 'c': 3 }
     */
    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }

    /**
     * Converts `value` to a safe integer. A safe integer can be compared and
     * represented correctly.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toSafeInteger(3.2);
     * // => 3
     *
     * _.toSafeInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toSafeInteger(Infinity);
     * // => 9007199254740991
     *
     * _.toSafeInteger('3.2');
     * // => 3
     */
    function toSafeInteger(value) {
      return value
        ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)
        : (value === 0 ? value : 0);
    }

    /**
     * Converts `value` to a string. An empty string is returned for `null`
     * and `undefined` values. The sign of `-0` is preserved.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.toString(null);
     * // => ''
     *
     * _.toString(-0);
     * // => '-0'
     *
     * _.toString([1, 2, 3]);
     * // => '1,2,3'
     */
    function toString(value) {
      return value == null ? '' : baseToString(value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Assigns own enumerable string keyed properties of source objects to the
     * destination object. Source objects are applied from left to right.
     * Subsequent sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object` and is loosely based on
     * [`Object.assign`](https://mdn.io/Object/assign).
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assignIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assign({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'c': 3 }
     */
    var assign = createAssigner(function(object, source) {
      if (isPrototype(source) || isArrayLike(source)) {
        copyObject(source, keys(source), object);
        return;
      }
      for (var key in source) {
        if (hasOwnProperty.call(source, key)) {
          assignValue(object, key, source[key]);
        }
      }
    });

    /**
     * This method is like `_.assign` except that it iterates over own and
     * inherited source properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extend
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assign
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
     */
    var assignIn = createAssigner(function(object, source) {
      copyObject(source, keysIn(source), object);
    });

    /**
     * This method is like `_.assignIn` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extendWith
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignInWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keysIn(source), object, customizer);
    });

    /**
     * This method is like `_.assign` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignInWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keys(source), object, customizer);
    });

    /**
     * Creates an array of values corresponding to `paths` of `object`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Array} Returns the picked values.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _.at(object, ['a[0].b.c', 'a[1]']);
     * // => [3, 4]
     */
    var at = flatRest(baseAt);

    /**
     * Creates an object that inherits from the `prototype` object. If a
     * `properties` object is given, its own enumerable string keyed properties
     * are assigned to the created object.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Object
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, {
     *   'constructor': Circle
     * });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */
    function create(prototype, properties) {
      var result = baseCreate(prototype);
      return properties == null ? result : baseAssign(result, properties);
    }

    /**
     * Assigns own and inherited enumerable string keyed properties of source
     * objects to the destination object for all destination properties that
     * resolve to `undefined`. Source objects are applied from left to right.
     * Once a property is set, additional values of the same property are ignored.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaultsDeep
     * @example
     *
     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var defaults = baseRest(function(object, sources) {
      object = Object(object);

      var index = -1;
      var length = sources.length;
      var guard = length > 2 ? sources[2] : undefined;

      if (guard && isIterateeCall(sources[0], sources[1], guard)) {
        length = 1;
      }

      while (++index < length) {
        var source = sources[index];
        var props = keysIn(source);
        var propsIndex = -1;
        var propsLength = props.length;

        while (++propsIndex < propsLength) {
          var key = props[propsIndex];
          var value = object[key];

          if (value === undefined ||
              (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {
            object[key] = source[key];
          }
        }
      }

      return object;
    });

    /**
     * This method is like `_.defaults` except that it recursively assigns
     * default properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaults
     * @example
     *
     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
     * // => { 'a': { 'b': 2, 'c': 3 } }
     */
    var defaultsDeep = baseRest(function(args) {
      args.push(undefined, customDefaultsMerge);
      return apply(mergeWith, undefined, args);
    });

    /**
     * This method is like `_.find` except that it returns the key of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findKey(users, function(o) { return o.age < 40; });
     * // => 'barney' (iteration order is not guaranteed)
     *
     * // The `_.matches` iteratee shorthand.
     * _.findKey(users, { 'age': 1, 'active': true });
     * // => 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findKey(users, 'active');
     * // => 'barney'
     */
    function findKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
    }

    /**
     * This method is like `_.findKey` except that it iterates over elements of
     * a collection in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findLastKey(users, function(o) { return o.age < 40; });
     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastKey(users, { 'age': 36, 'active': true });
     * // => 'barney'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastKey(users, 'active');
     * // => 'pebbles'
     */
    function findLastKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
    }

    /**
     * Iterates over own and inherited enumerable string keyed properties of an
     * object and invokes `iteratee` for each property. The iteratee is invoked
     * with three arguments: (value, key, object). Iteratee functions may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forInRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forIn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
     */
    function forIn(object, iteratee) {
      return object == null
        ? object
        : baseFor(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * This method is like `_.forIn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forInRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
     */
    function forInRight(object, iteratee) {
      return object == null
        ? object
        : baseForRight(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * Iterates over own enumerable string keyed properties of an object and
     * invokes `iteratee` for each property. The iteratee is invoked with three
     * arguments: (value, key, object). Iteratee functions may exit iteration
     * early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwnRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forOwn(object, iteratee) {
      return object && baseForOwn(object, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forOwn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwnRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
     */
    function forOwnRight(object, iteratee) {
      return object && baseForOwnRight(object, getIteratee(iteratee, 3));
    }

    /**
     * Creates an array of function property names from own enumerable properties
     * of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functionsIn
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functions(new Foo);
     * // => ['a', 'b']
     */
    function functions(object) {
      return object == null ? [] : baseFunctions(object, keys(object));
    }

    /**
     * Creates an array of function property names from own and inherited
     * enumerable properties of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functions
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functionsIn(new Foo);
     * // => ['a', 'b', 'c']
     */
    function functionsIn(object) {
      return object == null ? [] : baseFunctions(object, keysIn(object));
    }

    /**
     * Gets the value at `path` of `object`. If the resolved value is
     * `undefined`, the `defaultValue` is returned in its place.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */
    function get(object, path, defaultValue) {
      var result = object == null ? undefined : baseGet(object, path);
      return result === undefined ? defaultValue : result;
    }

    /**
     * Checks if `path` is a direct property of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = { 'a': { 'b': 2 } };
     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.has(object, 'a');
     * // => true
     *
     * _.has(object, 'a.b');
     * // => true
     *
     * _.has(object, ['a', 'b']);
     * // => true
     *
     * _.has(other, 'a');
     * // => false
     */
    function has(object, path) {
      return object != null && hasPath(object, path, baseHas);
    }

    /**
     * Checks if `path` is a direct or inherited property of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.hasIn(object, 'a');
     * // => true
     *
     * _.hasIn(object, 'a.b');
     * // => true
     *
     * _.hasIn(object, ['a', 'b']);
     * // => true
     *
     * _.hasIn(object, 'b');
     * // => false
     */
    function hasIn(object, path) {
      return object != null && hasPath(object, path, baseHasIn);
    }

    /**
     * Creates an object composed of the inverted keys and values of `object`.
     * If `object` contains duplicate values, subsequent values overwrite
     * property assignments of previous values.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Object
     * @param {Object} object The object to invert.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invert(object);
     * // => { '1': 'c', '2': 'b' }
     */
    var invert = createInverter(function(result, value, key) {
      if (value != null &&
          typeof value.toString != 'function') {
        value = nativeObjectToString.call(value);
      }

      result[value] = key;
    }, constant(identity));

    /**
     * This method is like `_.invert` except that the inverted object is generated
     * from the results of running each element of `object` thru `iteratee`. The
     * corresponding inverted value of each inverted key is an array of keys
     * responsible for generating the inverted value. The iteratee is invoked
     * with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Object
     * @param {Object} object The object to invert.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invertBy(object);
     * // => { '1': ['a', 'c'], '2': ['b'] }
     *
     * _.invertBy(object, function(value) {
     *   return 'group' + value;
     * });
     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
     */
    var invertBy = createInverter(function(result, value, key) {
      if (value != null &&
          typeof value.toString != 'function') {
        value = nativeObjectToString.call(value);
      }

      if (hasOwnProperty.call(result, value)) {
        result[value].push(key);
      } else {
        result[value] = [key];
      }
    }, getIteratee);

    /**
     * Invokes the method at `path` of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
     *
     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
     * // => [2, 3]
     */
    var invoke = baseRest(baseInvoke);

    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }

    /**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */
    function keysIn(object) {
      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }

    /**
     * The opposite of `_.mapValues`; this method creates an object with the
     * same values as `object` and keys generated by running each own enumerable
     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
     * with three arguments: (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapValues
     * @example
     *
     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
     *   return key + value;
     * });
     * // => { 'a1': 1, 'b2': 2 }
     */
    function mapKeys(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, iteratee(value, key, object), value);
      });
      return result;
    }

    /**
     * Creates an object with the same keys as `object` and values generated
     * by running each own enumerable string keyed property of `object` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapKeys
     * @example
     *
     * var users = {
     *   'fred':    { 'user': 'fred',    'age': 40 },
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
     * };
     *
     * _.mapValues(users, function(o) { return o.age; });
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     *
     * // The `_.property` iteratee shorthand.
     * _.mapValues(users, 'age');
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     */
    function mapValues(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, key, iteratee(value, key, object));
      });
      return result;
    }

    /**
     * This method is like `_.assign` except that it recursively merges own and
     * inherited enumerable string keyed properties of source objects into the
     * destination object. Source properties that resolve to `undefined` are
     * skipped if a destination value exists. Array and plain object properties
     * are merged recursively. Other objects and value types are overridden by
     * assignment. Source objects are applied from left to right. Subsequent
     * sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {
     *   'a': [{ 'b': 2 }, { 'd': 4 }]
     * };
     *
     * var other = {
     *   'a': [{ 'c': 3 }, { 'e': 5 }]
     * };
     *
     * _.merge(object, other);
     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
     */
    var merge = createAssigner(function(object, source, srcIndex) {
      baseMerge(object, source, srcIndex);
    });

    /**
     * This method is like `_.merge` except that it accepts `customizer` which
     * is invoked to produce the merged values of the destination and source
     * properties. If `customizer` returns `undefined`, merging is handled by the
     * method instead. The `customizer` is invoked with six arguments:
     * (objValue, srcValue, key, object, source, stack).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   if (_.isArray(objValue)) {
     *     return objValue.concat(srcValue);
     *   }
     * }
     *
     * var object = { 'a': [1], 'b': [2] };
     * var other = { 'a': [3], 'b': [4] };
     *
     * _.mergeWith(object, other, customizer);
     * // => { 'a': [1, 3], 'b': [2, 4] }
     */
    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
      baseMerge(object, source, srcIndex, customizer);
    });

    /**
     * The opposite of `_.pick`; this method creates an object composed of the
     * own and inherited enumerable property paths of `object` that are not omitted.
     *
     * **Note:** This method is considerably slower than `_.pick`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to omit.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omit(object, ['a', 'c']);
     * // => { 'b': '2' }
     */
    var omit = flatRest(function(object, paths) {
      var result = {};
      if (object == null) {
        return result;
      }
      var isDeep = false;
      paths = arrayMap(paths, function(path) {
        path = castPath(path, object);
        isDeep || (isDeep = path.length > 1);
        return path;
      });
      copyObject(object, getAllKeysIn(object), result);
      if (isDeep) {
        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
      }
      var length = paths.length;
      while (length--) {
        baseUnset(result, paths[length]);
      }
      return result;
    });

    /**
     * The opposite of `_.pickBy`; this method creates an object composed of
     * the own and inherited enumerable string keyed properties of `object` that
     * `predicate` doesn't return truthy for. The predicate is invoked with two
     * arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omitBy(object, _.isNumber);
     * // => { 'b': '2' }
     */
    function omitBy(object, predicate) {
      return pickBy(object, negate(getIteratee(predicate)));
    }

    /**
     * Creates an object composed of the picked `object` properties.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pick(object, ['a', 'c']);
     * // => { 'a': 1, 'c': 3 }
     */
    var pick = flatRest(function(object, paths) {
      return object == null ? {} : basePick(object, paths);
    });

    /**
     * Creates an object composed of the `object` properties `predicate` returns
     * truthy for. The predicate is invoked with two arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pickBy(object, _.isNumber);
     * // => { 'a': 1, 'c': 3 }
     */
    function pickBy(object, predicate) {
      if (object == null) {
        return {};
      }
      var props = arrayMap(getAllKeysIn(object), function(prop) {
        return [prop];
      });
      predicate = getIteratee(predicate);
      return basePickBy(object, props, function(value, path) {
        return predicate(value, path[0]);
      });
    }

    /**
     * This method is like `_.get` except that if the resolved value is a
     * function it's invoked with the `this` binding of its parent object and
     * its result is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to resolve.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
     *
     * _.result(object, 'a[0].b.c1');
     * // => 3
     *
     * _.result(object, 'a[0].b.c2');
     * // => 4
     *
     * _.result(object, 'a[0].b.c3', 'default');
     * // => 'default'
     *
     * _.result(object, 'a[0].b.c3', _.constant('default'));
     * // => 'default'
     */
    function result(object, path, defaultValue) {
      path = castPath(path, object);

      var index = -1,
          length = path.length;

      // Ensure the loop is entered when path is empty.
      if (!length) {
        length = 1;
        object = undefined;
      }
      while (++index < length) {
        var value = object == null ? undefined : object[toKey(path[index])];
        if (value === undefined) {
          index = length;
          value = defaultValue;
        }
        object = isFunction(value) ? value.call(object) : value;
      }
      return object;
    }

    /**
     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
     * it's created. Arrays are created for missing index properties while objects
     * are created for all other missing properties. Use `_.setWith` to customize
     * `path` creation.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.set(object, 'a[0].b.c', 4);
     * console.log(object.a[0].b.c);
     * // => 4
     *
     * _.set(object, ['x', '0', 'y', 'z'], 5);
     * console.log(object.x[0].y.z);
     * // => 5
     */
    function set(object, path, value) {
      return object == null ? object : baseSet(object, path, value);
    }

    /**
     * This method is like `_.set` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.setWith(object, '[0][1]', 'a', Object);
     * // => { '0': { '1': 'a' } }
     */
    function setWith(object, path, value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseSet(object, path, value, customizer);
    }

    /**
     * Creates an array of own enumerable string keyed-value pairs for `object`
     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
     * entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entries
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairs(new Foo);
     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
     */
    var toPairs = createToPairs(keys);

    /**
     * Creates an array of own and inherited enumerable string keyed-value pairs
     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
     * or set, its entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entriesIn
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairsIn(new Foo);
     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
     */
    var toPairsIn = createToPairs(keysIn);

    /**
     * An alternative to `_.reduce`; this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own
     * enumerable string keyed properties thru `iteratee`, with each invocation
     * potentially mutating the `accumulator` object. If `accumulator` is not
     * provided, a new object with the same `[[Prototype]]` will be used. The
     * iteratee is invoked with four arguments: (accumulator, value, key, object).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * }, []);
     * // => [4, 9]
     *
     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */
    function transform(object, iteratee, accumulator) {
      var isArr = isArray(object),
          isArrLike = isArr || isBuffer(object) || isTypedArray(object);

      iteratee = getIteratee(iteratee, 4);
      if (accumulator == null) {
        var Ctor = object && object.constructor;
        if (isArrLike) {
          accumulator = isArr ? new Ctor : [];
        }
        else if (isObject(object)) {
          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
        }
        else {
          accumulator = {};
        }
      }
      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
        return iteratee(accumulator, value, index, object);
      });
      return accumulator;
    }

    /**
     * Removes the property at `path` of `object`.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
     * _.unset(object, 'a[0].b.c');
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     *
     * _.unset(object, ['a', '0', 'b', 'c']);
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     */
    function unset(object, path) {
      return object == null ? true : baseUnset(object, path);
    }

    /**
     * This method is like `_.set` except that accepts `updater` to produce the
     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
     * is invoked with one argument: (value).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
     * console.log(object.a[0].b.c);
     * // => 9
     *
     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
     * console.log(object.x[0].y.z);
     * // => 0
     */
    function update(object, path, updater) {
      return object == null ? object : baseUpdate(object, path, castFunction(updater));
    }

    /**
     * This method is like `_.update` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
     * // => { '0': { '1': 'a' } }
     */
    function updateWith(object, path, updater, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
    }

    /**
     * Creates an array of the own enumerable string keyed property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */
    function values(object) {
      return object == null ? [] : baseValues(object, keys(object));
    }

    /**
     * Creates an array of the own and inherited enumerable string keyed property
     * values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.valuesIn(new Foo);
     * // => [1, 2, 3] (iteration order is not guaranteed)
     */
    function valuesIn(object) {
      return object == null ? [] : baseValues(object, keysIn(object));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Clamps `number` within the inclusive `lower` and `upper` bounds.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Number
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     * @example
     *
     * _.clamp(-10, -5, 5);
     * // => -5
     *
     * _.clamp(10, -5, 5);
     * // => 5
     */
    function clamp(number, lower, upper) {
      if (upper === undefined) {
        upper = lower;
        lower = undefined;
      }
      if (upper !== undefined) {
        upper = toNumber(upper);
        upper = upper === upper ? upper : 0;
      }
      if (lower !== undefined) {
        lower = toNumber(lower);
        lower = lower === lower ? lower : 0;
      }
      return baseClamp(toNumber(number), lower, upper);
    }

    /**
     * Checks if `n` is between `start` and up to, but not including, `end`. If
     * `end` is not specified, it's set to `start` with `start` then set to `0`.
     * If `start` is greater than `end` the params are swapped to support
     * negative ranges.
     *
     * @static
     * @memberOf _
     * @since 3.3.0
     * @category Number
     * @param {number} number The number to check.
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     * @see _.range, _.rangeRight
     * @example
     *
     * _.inRange(3, 2, 4);
     * // => true
     *
     * _.inRange(4, 8);
     * // => true
     *
     * _.inRange(4, 2);
     * // => false
     *
     * _.inRange(2, 2);
     * // => false
     *
     * _.inRange(1.2, 2);
     * // => true
     *
     * _.inRange(5.2, 4);
     * // => false
     *
     * _.inRange(-3, -2, -6);
     * // => true
     */
    function inRange(number, start, end) {
      start = toFinite(start);
      if (end === undefined) {
        end = start;
        start = 0;
      } else {
        end = toFinite(end);
      }
      number = toNumber(number);
      return baseInRange(number, start, end);
    }

    /**
     * Produces a random number between the inclusive `lower` and `upper` bounds.
     * If only one argument is provided a number between `0` and the given number
     * is returned. If `floating` is `true`, or either `lower` or `upper` are
     * floats, a floating-point number is returned instead of an integer.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Number
     * @param {number} [lower=0] The lower bound.
     * @param {number} [upper=1] The upper bound.
     * @param {boolean} [floating] Specify returning a floating-point number.
     * @returns {number} Returns the random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */
    function random(lower, upper, floating) {
      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
        upper = floating = undefined;
      }
      if (floating === undefined) {
        if (typeof upper == 'boolean') {
          floating = upper;
          upper = undefined;
        }
        else if (typeof lower == 'boolean') {
          floating = lower;
          lower = undefined;
        }
      }
      if (lower === undefined && upper === undefined) {
        lower = 0;
        upper = 1;
      }
      else {
        lower = toFinite(lower);
        if (upper === undefined) {
          upper = lower;
          lower = 0;
        } else {
          upper = toFinite(upper);
        }
      }
      if (lower > upper) {
        var temp = lower;
        lower = upper;
        upper = temp;
      }
      if (floating || lower % 1 || upper % 1) {
        var rand = nativeRandom();
        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
      }
      return baseRandom(lower, upper);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the camel cased string.
     * @example
     *
     * _.camelCase('Foo Bar');
     * // => 'fooBar'
     *
     * _.camelCase('--foo-bar--');
     * // => 'fooBar'
     *
     * _.camelCase('__FOO_BAR__');
     * // => 'fooBar'
     */
    var camelCase = createCompounder(function(result, word, index) {
      word = word.toLowerCase();
      return result + (index ? capitalize(word) : word);
    });

    /**
     * Converts the first character of `string` to upper case and the remaining
     * to lower case.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to capitalize.
     * @returns {string} Returns the capitalized string.
     * @example
     *
     * _.capitalize('FRED');
     * // => 'Fred'
     */
    function capitalize(string) {
      return upperFirst(toString(string).toLowerCase());
    }

    /**
     * Deburrs `string` by converting
     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
     * letters to basic Latin letters and removing
     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to deburr.
     * @returns {string} Returns the deburred string.
     * @example
     *
     * _.deburr('déjà vu');
     * // => 'deja vu'
     */
    function deburr(string) {
      string = toString(string);
      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
    }

    /**
     * Checks if `string` ends with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=string.length] The position to search up to.
     * @returns {boolean} Returns `true` if `string` ends with `target`,
     *  else `false`.
     * @example
     *
     * _.endsWith('abc', 'c');
     * // => true
     *
     * _.endsWith('abc', 'b');
     * // => false
     *
     * _.endsWith('abc', 'b', 2);
     * // => true
     */
    function endsWith(string, target, position) {
      string = toString(string);
      target = baseToString(target);

      var length = string.length;
      position = position === undefined
        ? length
        : baseClamp(toInteger(position), 0, length);

      var end = position;
      position -= target.length;
      return position >= 0 && string.slice(position, end) == target;
    }

    /**
     * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
     * corresponding HTML entities.
     *
     * **Note:** No other characters are escaped. To escape additional
     * characters use a third-party library like [_he_](https://mths.be/he).
     *
     * Though the ">" character is escaped for symmetry, characters like
     * ">" and "/" don't need escaping in HTML and have no special meaning
     * unless they're part of a tag or unquoted attribute value. See
     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
     * (under "semi-related fun fact") for more details.
     *
     * When working with HTML you should always
     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
     * XSS vectors.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('fred, barney, & pebbles');
     * // => 'fred, barney, &amp; pebbles'
     */
    function escape(string) {
      string = toString(string);
      return (string && reHasUnescapedHtml.test(string))
        ? string.replace(reUnescapedHtml, escapeHtmlChar)
        : string;
    }

    /**
     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escapeRegExp('[lodash](https://lodash.com/)');
     * // => '\[lodash\]\(https://lodash\.com/\)'
     */
    function escapeRegExp(string) {
      string = toString(string);
      return (string && reHasRegExpChar.test(string))
        ? string.replace(reRegExpChar, '\\$&')
        : string;
    }

    /**
     * Converts `string` to
     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the kebab cased string.
     * @example
     *
     * _.kebabCase('Foo Bar');
     * // => 'foo-bar'
     *
     * _.kebabCase('fooBar');
     * // => 'foo-bar'
     *
     * _.kebabCase('__FOO_BAR__');
     * // => 'foo-bar'
     */
    var kebabCase = createCompounder(function(result, word, index) {
      return result + (index ? '-' : '') + word.toLowerCase();
    });

    /**
     * Converts `string`, as space separated words, to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.lowerCase('--Foo-Bar--');
     * // => 'foo bar'
     *
     * _.lowerCase('fooBar');
     * // => 'foo bar'
     *
     * _.lowerCase('__FOO_BAR__');
     * // => 'foo bar'
     */
    var lowerCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toLowerCase();
    });

    /**
     * Converts the first character of `string` to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.lowerFirst('Fred');
     * // => 'fred'
     *
     * _.lowerFirst('FRED');
     * // => 'fRED'
     */
    var lowerFirst = createCaseFirst('toLowerCase');

    /**
     * Pads `string` on the left and right sides if it's shorter than `length`.
     * Padding characters are truncated if they can't be evenly divided by `length`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.pad('abc', 8);
     * // => '  abc   '
     *
     * _.pad('abc', 8, '_-');
     * // => '_-abc_-_'
     *
     * _.pad('abc', 3);
     * // => 'abc'
     */
    function pad(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      if (!length || strLength >= length) {
        return string;
      }
      var mid = (length - strLength) / 2;
      return (
        createPadding(nativeFloor(mid), chars) +
        string +
        createPadding(nativeCeil(mid), chars)
      );
    }

    /**
     * Pads `string` on the right side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padEnd('abc', 6);
     * // => 'abc   '
     *
     * _.padEnd('abc', 6, '_-');
     * // => 'abc_-_'
     *
     * _.padEnd('abc', 3);
     * // => 'abc'
     */
    function padEnd(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (string + createPadding(length - strLength, chars))
        : string;
    }

    /**
     * Pads `string` on the left side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padStart('abc', 6);
     * // => '   abc'
     *
     * _.padStart('abc', 6, '_-');
     * // => '_-_abc'
     *
     * _.padStart('abc', 3);
     * // => 'abc'
     */
    function padStart(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (createPadding(length - strLength, chars) + string)
        : string;
    }

    /**
     * Converts `string` to an integer of the specified radix. If `radix` is
     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
     * hexadecimal, in which case a `radix` of `16` is used.
     *
     * **Note:** This method aligns with the
     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category String
     * @param {string} string The string to convert.
     * @param {number} [radix=10] The radix to interpret `value` by.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     *
     * _.map(['6', '08', '10'], _.parseInt);
     * // => [6, 8, 10]
     */
    function parseInt(string, radix, guard) {
      if (guard || radix == null) {
        radix = 0;
      } else if (radix) {
        radix = +radix;
      }
      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
    }

    /**
     * Repeats the given string `n` times.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to repeat.
     * @param {number} [n=1] The number of times to repeat the string.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the repeated string.
     * @example
     *
     * _.repeat('*', 3);
     * // => '***'
     *
     * _.repeat('abc', 2);
     * // => 'abcabc'
     *
     * _.repeat('abc', 0);
     * // => ''
     */
    function repeat(string, n, guard) {
      if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      return baseRepeat(toString(string), n);
    }

    /**
     * Replaces matches for `pattern` in `string` with `replacement`.
     *
     * **Note:** This method is based on
     * [`String#replace`](https://mdn.io/String/replace).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to modify.
     * @param {RegExp|string} pattern The pattern to replace.
     * @param {Function|string} replacement The match replacement.
     * @returns {string} Returns the modified string.
     * @example
     *
     * _.replace('Hi Fred', 'Fred', 'Barney');
     * // => 'Hi Barney'
     */
    function replace() {
      var args = arguments,
          string = toString(args[0]);

      return args.length < 3 ? string : string.replace(args[1], args[2]);
    }

    /**
     * Converts `string` to
     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the snake cased string.
     * @example
     *
     * _.snakeCase('Foo Bar');
     * // => 'foo_bar'
     *
     * _.snakeCase('fooBar');
     * // => 'foo_bar'
     *
     * _.snakeCase('--FOO-BAR--');
     * // => 'foo_bar'
     */
    var snakeCase = createCompounder(function(result, word, index) {
      return result + (index ? '_' : '') + word.toLowerCase();
    });

    /**
     * Splits `string` by `separator`.
     *
     * **Note:** This method is based on
     * [`String#split`](https://mdn.io/String/split).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to split.
     * @param {RegExp|string} separator The separator pattern to split by.
     * @param {number} [limit] The length to truncate results to.
     * @returns {Array} Returns the string segments.
     * @example
     *
     * _.split('a-b-c', '-', 2);
     * // => ['a', 'b']
     */
    function split(string, separator, limit) {
      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
        separator = limit = undefined;
      }
      limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
      if (!limit) {
        return [];
      }
      string = toString(string);
      if (string && (
            typeof separator == 'string' ||
            (separator != null && !isRegExp(separator))
          )) {
        separator = baseToString(separator);
        if (!separator && hasUnicode(string)) {
          return castSlice(stringToArray(string), 0, limit);
        }
      }
      return string.split(separator, limit);
    }

    /**
     * Converts `string` to
     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
     *
     * @static
     * @memberOf _
     * @since 3.1.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the start cased string.
     * @example
     *
     * _.startCase('--foo-bar--');
     * // => 'Foo Bar'
     *
     * _.startCase('fooBar');
     * // => 'Foo Bar'
     *
     * _.startCase('__FOO_BAR__');
     * // => 'FOO BAR'
     */
    var startCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + upperFirst(word);
    });

    /**
     * Checks if `string` starts with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=0] The position to search from.
     * @returns {boolean} Returns `true` if `string` starts with `target`,
     *  else `false`.
     * @example
     *
     * _.startsWith('abc', 'a');
     * // => true
     *
     * _.startsWith('abc', 'b');
     * // => false
     *
     * _.startsWith('abc', 'b', 1);
     * // => true
     */
    function startsWith(string, target, position) {
      string = toString(string);
      position = position == null
        ? 0
        : baseClamp(toInteger(position), 0, string.length);

      target = baseToString(target);
      return string.slice(position, position + target.length) == target;
    }

    /**
     * Creates a compiled template function that can interpolate data properties
     * in "interpolate" delimiters, HTML-escape interpolated data properties in
     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
     * properties may be accessed as free variables in the template. If a setting
     * object is given, it takes precedence over `_.templateSettings` values.
     *
     * **Note:** In the development build `_.template` utilizes
     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
     * for easier debugging.
     *
     * For more information on precompiling templates see
     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
     *
     * For more information on Chrome extension sandboxes see
     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The template string.
     * @param {Object} [options={}] The options object.
     * @param {RegExp} [options.escape=_.templateSettings.escape]
     *  The HTML "escape" delimiter.
     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
     *  The "evaluate" delimiter.
     * @param {Object} [options.imports=_.templateSettings.imports]
     *  An object to import into the template as free variables.
     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
     *  The "interpolate" delimiter.
     * @param {string} [options.sourceURL='lodash.templateSources[n]']
     *  The sourceURL of the compiled template.
     * @param {string} [options.variable='obj']
     *  The data object variable name.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the compiled template function.
     * @example
     *
     * // Use the "interpolate" delimiter to create a compiled template.
     * var compiled = _.template('hello <%= user %>!');
     * compiled({ 'user': 'fred' });
     * // => 'hello fred!'
     *
     * // Use the HTML "escape" delimiter to escape data property values.
     * var compiled = _.template('<b><%- value %></b>');
     * compiled({ 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the internal `print` function in "evaluate" delimiters.
     * var compiled = _.template('<% print("hello " + user); %>!');
     * compiled({ 'user': 'barney' });
     * // => 'hello barney!'
     *
     * // Use the ES template literal delimiter as an "interpolate" delimiter.
     * // Disable support by replacing the "interpolate" delimiter.
     * var compiled = _.template('hello ${ user }!');
     * compiled({ 'user': 'pebbles' });
     * // => 'hello pebbles!'
     *
     * // Use backslashes to treat delimiters as plain text.
     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
     * compiled({ 'value': 'ignored' });
     * // => '<%- value %>'
     *
     * // Use the `imports` option to import `jQuery` as `jq`.
     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
     *
     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     * //   var __t, __p = '';
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
     * //   return __p;
     * // }
     *
     * // Use custom template delimiters.
     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
     * var compiled = _.template('hello {{ user }}!');
     * compiled({ 'user': 'mustache' });
     * // => 'hello mustache!'
     *
     * // Use the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and stack traces.
     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */
    function template(string, options, guard) {
      // Based on John Resig's `tmpl` implementation
      // (http://ejohn.org/blog/javascript-micro-templating/)
      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
      var settings = lodash.templateSettings;

      if (guard && isIterateeCall(string, options, guard)) {
        options = undefined;
      }
      string = toString(string);
      options = assignInWith({}, options, settings, customDefaultsAssignIn);

      var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
          importsKeys = keys(imports),
          importsValues = baseValues(imports, importsKeys);

      var isEscaping,
          isEvaluating,
          index = 0,
          interpolate = options.interpolate || reNoMatch,
          source = "__p += '";

      // Compile the regexp to match each delimiter.
      var reDelimiters = RegExp(
        (options.escape || reNoMatch).source + '|' +
        interpolate.source + '|' +
        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
        (options.evaluate || reNoMatch).source + '|$'
      , 'g');

      // Use a sourceURL for easier debugging.
      // The sourceURL gets injected into the source that's eval-ed, so be careful
      // to normalize all kinds of whitespace, so e.g. newlines (and unicode versions of it) can't sneak in
      // and escape the comment, thus injecting code that gets evaled.
      var sourceURL = '//# sourceURL=' +
        (hasOwnProperty.call(options, 'sourceURL')
          ? (options.sourceURL + '').replace(/\s/g, ' ')
          : ('lodash.templateSources[' + (++templateCounter) + ']')
        ) + '\n';

      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);

        // Escape characters that can't be included in string literals.
        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

        // Replace delimiters with snippets.
        if (escapeValue) {
          isEscaping = true;
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }
        index = offset + match.length;

        // The JS engine embedded in Adobe products needs `match` returned in
        // order to produce the correct `offset` value.
        return match;
      });

      source += "';\n";

      // If `variable` is not specified wrap a with-statement around the generated
      // code to add the data object to the top of the scope chain.
      var variable = hasOwnProperty.call(options, 'variable') && options.variable;
      if (!variable) {
        source = 'with (obj) {\n' + source + '\n}\n';
      }
      // Throw an error if a forbidden character was found in `variable`, to prevent
      // potential command injection attacks.
      else if (reForbiddenIdentifierChars.test(variable)) {
        throw new Error(INVALID_TEMPL_VAR_ERROR_TEXT);
      }

      // Cleanup code by stripping empty strings.
      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
        .replace(reEmptyStringMiddle, '$1')
        .replace(reEmptyStringTrailing, '$1;');

      // Frame code as the function body.
      source = 'function(' + (variable || 'obj') + ') {\n' +
        (variable
          ? ''
          : 'obj || (obj = {});\n'
        ) +
        "var __t, __p = ''" +
        (isEscaping
           ? ', __e = _.escape'
           : ''
        ) +
        (isEvaluating
          ? ', __j = Array.prototype.join;\n' +
            "function print() { __p += __j.call(arguments, '') }\n"
          : ';\n'
        ) +
        source +
        'return __p\n}';

      var result = attempt(function() {
        return Function(importsKeys, sourceURL + 'return ' + source)
          .apply(undefined, importsValues);
      });

      // Provide the compiled function's source by its `toString` method or
      // the `source` property as a convenience for inlining compiled templates.
      result.source = source;
      if (isError(result)) {
        throw result;
      }
      return result;
    }

    /**
     * Converts `string`, as a whole, to lower case just like
     * [String#toLowerCase](https://mdn.io/toLowerCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.toLower('--Foo-Bar--');
     * // => '--foo-bar--'
     *
     * _.toLower('fooBar');
     * // => 'foobar'
     *
     * _.toLower('__FOO_BAR__');
     * // => '__foo_bar__'
     */
    function toLower(value) {
      return toString(value).toLowerCase();
    }

    /**
     * Converts `string`, as a whole, to upper case just like
     * [String#toUpperCase](https://mdn.io/toUpperCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.toUpper('--foo-bar--');
     * // => '--FOO-BAR--'
     *
     * _.toUpper('fooBar');
     * // => 'FOOBAR'
     *
     * _.toUpper('__foo_bar__');
     * // => '__FOO_BAR__'
     */
    function toUpper(value) {
      return toString(value).toUpperCase();
    }

    /**
     * Removes leading and trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trim('  abc  ');
     * // => 'abc'
     *
     * _.trim('-_-abc-_-', '_-');
     * // => 'abc'
     *
     * _.map(['  foo  ', '  bar  '], _.trim);
     * // => ['foo', 'bar']
     */
    function trim(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return baseTrim(string);
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          chrSymbols = stringToArray(chars),
          start = charsStartIndex(strSymbols, chrSymbols),
          end = charsEndIndex(strSymbols, chrSymbols) + 1;

      return castSlice(strSymbols, start, end).join('');
    }

    /**
     * Removes trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimEnd('  abc  ');
     * // => '  abc'
     *
     * _.trimEnd('-_-abc-_-', '_-');
     * // => '-_-abc'
     */
    function trimEnd(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.slice(0, trimmedEndIndex(string) + 1);
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

      return castSlice(strSymbols, 0, end).join('');
    }

    /**
     * Removes leading whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimStart('  abc  ');
     * // => 'abc  '
     *
     * _.trimStart('-_-abc-_-', '_-');
     * // => 'abc-_-'
     */
    function trimStart(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimStart, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          start = charsStartIndex(strSymbols, stringToArray(chars));

      return castSlice(strSymbols, start).join('');
    }

    /**
     * Truncates `string` if it's longer than the given maximum string length.
     * The last characters of the truncated string are replaced with the omission
     * string which defaults to "...".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to truncate.
     * @param {Object} [options={}] The options object.
     * @param {number} [options.length=30] The maximum string length.
     * @param {string} [options.omission='...'] The string to indicate text is omitted.
     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
     * @returns {string} Returns the truncated string.
     * @example
     *
     * _.truncate('hi-diddly-ho there, neighborino');
     * // => 'hi-diddly-ho there, neighbo...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': ' '
     * });
     * // => 'hi-diddly-ho there,...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': /,? +/
     * });
     * // => 'hi-diddly-ho there...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'omission': ' [...]'
     * });
     * // => 'hi-diddly-ho there, neig [...]'
     */
    function truncate(string, options) {
      var length = DEFAULT_TRUNC_LENGTH,
          omission = DEFAULT_TRUNC_OMISSION;

      if (isObject(options)) {
        var separator = 'separator' in options ? options.separator : separator;
        length = 'length' in options ? toInteger(options.length) : length;
        omission = 'omission' in options ? baseToString(options.omission) : omission;
      }
      string = toString(string);

      var strLength = string.length;
      if (hasUnicode(string)) {
        var strSymbols = stringToArray(string);
        strLength = strSymbols.length;
      }
      if (length >= strLength) {
        return string;
      }
      var end = length - stringSize(omission);
      if (end < 1) {
        return omission;
      }
      var result = strSymbols
        ? castSlice(strSymbols, 0, end).join('')
        : string.slice(0, end);

      if (separator === undefined) {
        return result + omission;
      }
      if (strSymbols) {
        end += (result.length - end);
      }
      if (isRegExp(separator)) {
        if (string.slice(end).search(separator)) {
          var match,
              substring = result;

          if (!separator.global) {
            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
          }
          separator.lastIndex = 0;
          while ((match = separator.exec(substring))) {
            var newEnd = match.index;
          }
          result = result.slice(0, newEnd === undefined ? end : newEnd);
        }
      } else if (string.indexOf(baseToString(separator), end) != end) {
        var index = result.lastIndexOf(separator);
        if (index > -1) {
          result = result.slice(0, index);
        }
      }
      return result + omission;
    }

    /**
     * The inverse of `_.escape`; this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
     * their corresponding characters.
     *
     * **Note:** No other HTML entities are unescaped. To unescape additional
     * HTML entities use a third-party library like [_he_](https://mths.be/he).
     *
     * @static
     * @memberOf _
     * @since 0.6.0
     * @category String
     * @param {string} [string=''] The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('fred, barney, &amp; pebbles');
     * // => 'fred, barney, & pebbles'
     */
    function unescape(string) {
      string = toString(string);
      return (string && reHasEscapedHtml.test(string))
        ? string.replace(reEscapedHtml, unescapeHtmlChar)
        : string;
    }

    /**
     * Converts `string`, as space separated words, to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.upperCase('--foo-bar');
     * // => 'FOO BAR'
     *
     * _.upperCase('fooBar');
     * // => 'FOO BAR'
     *
     * _.upperCase('__foo_bar__');
     * // => 'FOO BAR'
     */
    var upperCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toUpperCase();
    });

    /**
     * Converts the first character of `string` to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.upperFirst('fred');
     * // => 'Fred'
     *
     * _.upperFirst('FRED');
     * // => 'FRED'
     */
    var upperFirst = createCaseFirst('toUpperCase');

    /**
     * Splits `string` into an array of its words.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {RegExp|string} [pattern] The pattern to match words.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the words of `string`.
     * @example
     *
     * _.words('fred, barney, & pebbles');
     * // => ['fred', 'barney', 'pebbles']
     *
     * _.words('fred, barney, & pebbles', /[^, ]+/g);
     * // => ['fred', 'barney', '&', 'pebbles']
     */
    function words(string, pattern, guard) {
      string = toString(string);
      pattern = guard ? undefined : pattern;

      if (pattern === undefined) {
        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
      }
      return string.match(pattern) || [];
    }

    /*------------------------------------------------------------------------*/

    /**
     * Attempts to invoke `func`, returning either the result or the caught error
     * object. Any additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Function} func The function to attempt.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {*} Returns the `func` result or error object.
     * @example
     *
     * // Avoid throwing errors for invalid selectors.
     * var elements = _.attempt(function(selector) {
     *   return document.querySelectorAll(selector);
     * }, '>_>');
     *
     * if (_.isError(elements)) {
     *   elements = [];
     * }
     */
    var attempt = baseRest(function(func, args) {
      try {
        return apply(func, undefined, args);
      } catch (e) {
        return isError(e) ? e : new Error(e);
      }
    });

    /**
     * Binds methods of an object to the object itself, overwriting the existing
     * method.
     *
     * **Note:** This method doesn't set the "length" property of bound functions.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...(string|string[])} methodNames The object method names to bind.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'click': function() {
     *     console.log('clicked ' + this.label);
     *   }
     * };
     *
     * _.bindAll(view, ['click']);
     * jQuery(element).on('click', view.click);
     * // => Logs 'clicked docs' when clicked.
     */
    var bindAll = flatRest(function(object, methodNames) {
      arrayEach(methodNames, function(key) {
        key = toKey(key);
        baseAssignValue(object, key, bind(object[key], object));
      });
      return object;
    });

    /**
     * Creates a function that iterates over `pairs` and invokes the corresponding
     * function of the first predicate to return truthy. The predicate-function
     * pairs are invoked with the `this` binding and arguments of the created
     * function.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Array} pairs The predicate-function pairs.
     * @returns {Function} Returns the new composite function.
     * @example
     *
     * var func = _.cond([
     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
     *   [_.stubTrue,                      _.constant('no match')]
     * ]);
     *
     * func({ 'a': 1, 'b': 2 });
     * // => 'matches A'
     *
     * func({ 'a': 0, 'b': 1 });
     * // => 'matches B'
     *
     * func({ 'a': '1', 'b': '2' });
     * // => 'no match'
     */
    function cond(pairs) {
      var length = pairs == null ? 0 : pairs.length,
          toIteratee = getIteratee();

      pairs = !length ? [] : arrayMap(pairs, function(pair) {
        if (typeof pair[1] != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        return [toIteratee(pair[0]), pair[1]];
      });

      return baseRest(function(args) {
        var index = -1;
        while (++index < length) {
          var pair = pairs[index];
          if (apply(pair[0], this, args)) {
            return apply(pair[1], this, args);
          }
        }
      });
    }

    /**
     * Creates a function that invokes the predicate properties of `source` with
     * the corresponding property values of a given object, returning `true` if
     * all predicates return truthy, else `false`.
     *
     * **Note:** The created function is equivalent to `_.conformsTo` with
     * `source` partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 2, 'b': 1 },
     *   { 'a': 1, 'b': 2 }
     * ];
     *
     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
     * // => [{ 'a': 1, 'b': 2 }]
     */
    function conforms(source) {
      return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new constant function.
     * @example
     *
     * var objects = _.times(2, _.constant({ 'a': 1 }));
     *
     * console.log(objects);
     * // => [{ 'a': 1 }, { 'a': 1 }]
     *
     * console.log(objects[0] === objects[1]);
     * // => true
     */
    function constant(value) {
      return function() {
        return value;
      };
    }

    /**
     * Checks `value` to determine whether a default value should be returned in
     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
     * or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Util
     * @param {*} value The value to check.
     * @param {*} defaultValue The default value.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * _.defaultTo(1, 10);
     * // => 1
     *
     * _.defaultTo(undefined, 10);
     * // => 10
     */
    function defaultTo(value, defaultValue) {
      return (value == null || value !== value) ? defaultValue : value;
    }

    /**
     * Creates a function that returns the result of invoking the given functions
     * with the `this` binding of the created function, where each successive
     * invocation is supplied the return value of the previous.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flowRight
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flow([_.add, square]);
     * addSquare(1, 2);
     * // => 9
     */
    var flow = createFlow();

    /**
     * This method is like `_.flow` except that it creates a function that
     * invokes the given functions from right to left.
     *
     * @static
     * @since 3.0.0
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flow
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flowRight([square, _.add]);
     * addSquare(1, 2);
     * // => 9
     */
    var flowRight = createFlow(true);

    /**
     * This method returns the first argument it receives.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'a': 1 };
     *
     * console.log(_.identity(object) === object);
     * // => true
     */
    function identity(value) {
      return value;
    }

    /**
     * Creates a function that invokes `func` with the arguments of the created
     * function. If `func` is a property name, the created function returns the
     * property value for a given element. If `func` is an array or object, the
     * created function returns `true` for elements that contain the equivalent
     * source properties, otherwise it returns `false`.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Util
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @returns {Function} Returns the callback.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, _.iteratee(['user', 'fred']));
     * // => [{ 'user': 'fred', 'age': 40 }]
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, _.iteratee('user'));
     * // => ['barney', 'fred']
     *
     * // Create custom iteratee shorthands.
     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
     *     return func.test(string);
     *   };
     * });
     *
     * _.filter(['abc', 'def'], /ef/);
     * // => ['def']
     */
    function iteratee(func) {
      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between a given
     * object and `source`, returning `true` if the given object has equivalent
     * property values, else `false`.
     *
     * **Note:** The created function is equivalent to `_.isMatch` with `source`
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * **Note:** Multiple values can be checked by combining several matchers
     * using `_.overSome`
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
     *
     * // Checking for several possible values
     * _.filter(objects, _.overSome([_.matches({ 'a': 1 }), _.matches({ 'a': 4 })]));
     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
     */
    function matches(source) {
      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between the
     * value at `path` of a given object to `srcValue`, returning `true` if the
     * object value is equivalent, else `false`.
     *
     * **Note:** Partial comparisons will match empty array and empty object
     * `srcValue` values against any array or object value, respectively. See
     * `_.isEqual` for a list of supported value comparisons.
     *
     * **Note:** Multiple values can be checked by combining several matchers
     * using `_.overSome`
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.find(objects, _.matchesProperty('a', 4));
     * // => { 'a': 4, 'b': 5, 'c': 6 }
     *
     * // Checking for several possible values
     * _.filter(objects, _.overSome([_.matchesProperty('a', 1), _.matchesProperty('a', 4)]));
     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
     */
    function matchesProperty(path, srcValue) {
      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that invokes the method at `path` of a given object.
     * Any additional arguments are provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': _.constant(2) } },
     *   { 'a': { 'b': _.constant(1) } }
     * ];
     *
     * _.map(objects, _.method('a.b'));
     * // => [2, 1]
     *
     * _.map(objects, _.method(['a', 'b']));
     * // => [2, 1]
     */
    var method = baseRest(function(path, args) {
      return function(object) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * The opposite of `_.method`; this method creates a function that invokes
     * the method at a given path of `object`. Any additional arguments are
     * provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Object} object The object to query.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var array = _.times(3, _.constant),
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
     * // => [2, 0]
     */
    var methodOf = baseRest(function(object, args) {
      return function(path) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * Adds all own enumerable string keyed function properties of a source
     * object to the destination object. If `object` is a function, then methods
     * are added to its prototype as well.
     *
     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
     * avoid conflicts caused by modifying the original.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Function|Object} [object=lodash] The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
     * @returns {Function|Object} Returns `object`.
     * @example
     *
     * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
     *
     * _.mixin({ 'vowels': vowels });
     * _.vowels('fred');
     * // => ['e']
     *
     * _('fred').vowels().value();
     * // => ['e']
     *
     * _.mixin({ 'vowels': vowels }, { 'chain': false });
     * _('fred').vowels();
     * // => ['e']
     */
    function mixin(object, source, options) {
      var props = keys(source),
          methodNames = baseFunctions(source, props);

      if (options == null &&
          !(isObject(source) && (methodNames.length || !props.length))) {
        options = source;
        source = object;
        object = this;
        methodNames = baseFunctions(source, keys(source));
      }
      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
          isFunc = isFunction(object);

      arrayEach(methodNames, function(methodName) {
        var func = source[methodName];
        object[methodName] = func;
        if (isFunc) {
          object.prototype[methodName] = function() {
            var chainAll = this.__chain__;
            if (chain || chainAll) {
              var result = object(this.__wrapped__),
                  actions = result.__actions__ = copyArray(this.__actions__);

              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
              result.__chain__ = chainAll;
              return result;
            }
            return func.apply(object, arrayPush([this.value()], arguments));
          };
        }
      });

      return object;
    }

    /**
     * Reverts the `_` variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */
    function noConflict() {
      if (root._ === this) {
        root._ = oldDash;
      }
      return this;
    }

    /**
     * This method returns `undefined`.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Util
     * @example
     *
     * _.times(2, _.noop);
     * // => [undefined, undefined]
     */
    function noop() {
      // No operation performed.
    }

    /**
     * Creates a function that gets the argument at index `n`. If `n` is negative,
     * the nth argument from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [n=0] The index of the argument to return.
     * @returns {Function} Returns the new pass-thru function.
     * @example
     *
     * var func = _.nthArg(1);
     * func('a', 'b', 'c', 'd');
     * // => 'b'
     *
     * var func = _.nthArg(-2);
     * func('a', 'b', 'c', 'd');
     * // => 'c'
     */
    function nthArg(n) {
      n = toInteger(n);
      return baseRest(function(args) {
        return baseNth(args, n);
      });
    }

    /**
     * Creates a function that invokes `iteratees` with the arguments it receives
     * and returns their results.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.over([Math.max, Math.min]);
     *
     * func(1, 2, 3, 4);
     * // => [4, 1]
     */
    var over = createOver(arrayMap);

    /**
     * Creates a function that checks if **all** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * Following shorthands are possible for providing predicates.
     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overEvery([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => false
     *
     * func(NaN);
     * // => false
     */
    var overEvery = createOver(arrayEvery);

    /**
     * Creates a function that checks if **any** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * Following shorthands are possible for providing predicates.
     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overSome([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => true
     *
     * func(NaN);
     * // => false
     *
     * var matchesFunc = _.overSome([{ 'a': 1 }, { 'a': 2 }])
     * var matchesPropertyFunc = _.overSome([['a', 1], ['a', 2]])
     */
    var overSome = createOver(arraySome);

    /**
     * Creates a function that returns the value at `path` of a given object.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': 2 } },
     *   { 'a': { 'b': 1 } }
     * ];
     *
     * _.map(objects, _.property('a.b'));
     * // => [2, 1]
     *
     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
     * // => [1, 2]
     */
    function property(path) {
      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
    }

    /**
     * The opposite of `_.property`; this method creates a function that returns
     * the value at a given path of `object`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var array = [0, 1, 2],
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
     * // => [2, 0]
     */
    function propertyOf(object) {
      return function(path) {
        return object == null ? undefined : baseGet(object, path);
      };
    }

    /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
     * `start` is specified without an `end` or `step`. If `end` is not specified,
     * it's set to `start` with `start` then set to `0`.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.rangeRight
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(-4);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */
    var range = createRange();

    /**
     * This method is like `_.range` except that it populates values in
     * descending order.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.range
     * @example
     *
     * _.rangeRight(4);
     * // => [3, 2, 1, 0]
     *
     * _.rangeRight(-4);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 5);
     * // => [4, 3, 2, 1]
     *
     * _.rangeRight(0, 20, 5);
     * // => [15, 10, 5, 0]
     *
     * _.rangeRight(0, -4, -1);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.rangeRight(0);
     * // => []
     */
    var rangeRight = createRange(true);

    /**
     * This method returns a new empty array.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Array} Returns the new empty array.
     * @example
     *
     * var arrays = _.times(2, _.stubArray);
     *
     * console.log(arrays);
     * // => [[], []]
     *
     * console.log(arrays[0] === arrays[1]);
     * // => false
     */
    function stubArray() {
      return [];
    }

    /**
     * This method returns `false`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `false`.
     * @example
     *
     * _.times(2, _.stubFalse);
     * // => [false, false]
     */
    function stubFalse() {
      return false;
    }

    /**
     * This method returns a new empty object.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Object} Returns the new empty object.
     * @example
     *
     * var objects = _.times(2, _.stubObject);
     *
     * console.log(objects);
     * // => [{}, {}]
     *
     * console.log(objects[0] === objects[1]);
     * // => false
     */
    function stubObject() {
      return {};
    }

    /**
     * This method returns an empty string.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {string} Returns the empty string.
     * @example
     *
     * _.times(2, _.stubString);
     * // => ['', '']
     */
    function stubString() {
      return '';
    }

    /**
     * This method returns `true`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `true`.
     * @example
     *
     * _.times(2, _.stubTrue);
     * // => [true, true]
     */
    function stubTrue() {
      return true;
    }

    /**
     * Invokes the iteratee `n` times, returning an array of the results of
     * each invocation. The iteratee is invoked with one argument; (index).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.times(3, String);
     * // => ['0', '1', '2']
     *
     *  _.times(4, _.constant(0));
     * // => [0, 0, 0, 0]
     */
    function times(n, iteratee) {
      n = toInteger(n);
      if (n < 1 || n > MAX_SAFE_INTEGER) {
        return [];
      }
      var index = MAX_ARRAY_LENGTH,
          length = nativeMin(n, MAX_ARRAY_LENGTH);

      iteratee = getIteratee(iteratee);
      n -= MAX_ARRAY_LENGTH;

      var result = baseTimes(length, iteratee);
      while (++index < n) {
        iteratee(index);
      }
      return result;
    }

    /**
     * Converts `value` to a property path array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {*} value The value to convert.
     * @returns {Array} Returns the new property path array.
     * @example
     *
     * _.toPath('a.b.c');
     * // => ['a', 'b', 'c']
     *
     * _.toPath('a[0].b.c');
     * // => ['a', '0', 'b', 'c']
     */
    function toPath(value) {
      if (isArray(value)) {
        return arrayMap(value, toKey);
      }
      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
    }

    /**
     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {string} [prefix=''] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */
    function uniqueId(prefix) {
      var id = ++idCounter;
      return toString(prefix) + id;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Adds two numbers.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {number} augend The first number in an addition.
     * @param {number} addend The second number in an addition.
     * @returns {number} Returns the total.
     * @example
     *
     * _.add(6, 4);
     * // => 10
     */
    var add = createMathOperation(function(augend, addend) {
      return augend + addend;
    }, 0);

    /**
     * Computes `number` rounded up to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round up.
     * @param {number} [precision=0] The precision to round up to.
     * @returns {number} Returns the rounded up number.
     * @example
     *
     * _.ceil(4.006);
     * // => 5
     *
     * _.ceil(6.004, 2);
     * // => 6.01
     *
     * _.ceil(6040, -2);
     * // => 6100
     */
    var ceil = createRound('ceil');

    /**
     * Divide two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} dividend The first number in a division.
     * @param {number} divisor The second number in a division.
     * @returns {number} Returns the quotient.
     * @example
     *
     * _.divide(6, 4);
     * // => 1.5
     */
    var divide = createMathOperation(function(dividend, divisor) {
      return dividend / divisor;
    }, 1);

    /**
     * Computes `number` rounded down to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round down.
     * @param {number} [precision=0] The precision to round down to.
     * @returns {number} Returns the rounded down number.
     * @example
     *
     * _.floor(4.006);
     * // => 4
     *
     * _.floor(0.046, 2);
     * // => 0.04
     *
     * _.floor(4060, -2);
     * // => 4000
     */
    var floor = createRound('floor');

    /**
     * Computes the maximum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * _.max([]);
     * // => undefined
     */
    function max(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseGt)
        : undefined;
    }

    /**
     * This method is like `_.max` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.maxBy(objects, function(o) { return o.n; });
     * // => { 'n': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.maxBy(objects, 'n');
     * // => { 'n': 2 }
     */
    function maxBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
        : undefined;
    }

    /**
     * Computes the mean of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the mean.
     * @example
     *
     * _.mean([4, 2, 8, 6]);
     * // => 5
     */
    function mean(array) {
      return baseMean(array, identity);
    }

    /**
     * This method is like `_.mean` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be averaged.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the mean.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.meanBy(objects, function(o) { return o.n; });
     * // => 5
     *
     * // The `_.property` iteratee shorthand.
     * _.meanBy(objects, 'n');
     * // => 5
     */
    function meanBy(array, iteratee) {
      return baseMean(array, getIteratee(iteratee, 2));
    }

    /**
     * Computes the minimum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * _.min([]);
     * // => undefined
     */
    function min(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseLt)
        : undefined;
    }

    /**
     * This method is like `_.min` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.minBy(objects, function(o) { return o.n; });
     * // => { 'n': 1 }
     *
     * // The `_.property` iteratee shorthand.
     * _.minBy(objects, 'n');
     * // => { 'n': 1 }
     */
    function minBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
        : undefined;
    }

    /**
     * Multiply two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} multiplier The first number in a multiplication.
     * @param {number} multiplicand The second number in a multiplication.
     * @returns {number} Returns the product.
     * @example
     *
     * _.multiply(6, 4);
     * // => 24
     */
    var multiply = createMathOperation(function(multiplier, multiplicand) {
      return multiplier * multiplicand;
    }, 1);

    /**
     * Computes `number` rounded to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round.
     * @param {number} [precision=0] The precision to round to.
     * @returns {number} Returns the rounded number.
     * @example
     *
     * _.round(4.006);
     * // => 4
     *
     * _.round(4.006, 2);
     * // => 4.01
     *
     * _.round(4060, -2);
     * // => 4100
     */
    var round = createRound('round');

    /**
     * Subtract two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {number} minuend The first number in a subtraction.
     * @param {number} subtrahend The second number in a subtraction.
     * @returns {number} Returns the difference.
     * @example
     *
     * _.subtract(6, 4);
     * // => 2
     */
    var subtract = createMathOperation(function(minuend, subtrahend) {
      return minuend - subtrahend;
    }, 0);

    /**
     * Computes the sum of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.sum([4, 2, 8, 6]);
     * // => 20
     */
    function sum(array) {
      return (array && array.length)
        ? baseSum(array, identity)
        : 0;
    }

    /**
     * This method is like `_.sum` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be summed.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the sum.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.sumBy(objects, function(o) { return o.n; });
     * // => 20
     *
     * // The `_.property` iteratee shorthand.
     * _.sumBy(objects, 'n');
     * // => 20
     */
    function sumBy(array, iteratee) {
      return (array && array.length)
        ? baseSum(array, getIteratee(iteratee, 2))
        : 0;
    }

    /*------------------------------------------------------------------------*/

    // Add methods that return wrapped values in chain sequences.
    lodash.after = after;
    lodash.ary = ary;
    lodash.assign = assign;
    lodash.assignIn = assignIn;
    lodash.assignInWith = assignInWith;
    lodash.assignWith = assignWith;
    lodash.at = at;
    lodash.before = before;
    lodash.bind = bind;
    lodash.bindAll = bindAll;
    lodash.bindKey = bindKey;
    lodash.castArray = castArray;
    lodash.chain = chain;
    lodash.chunk = chunk;
    lodash.compact = compact;
    lodash.concat = concat;
    lodash.cond = cond;
    lodash.conforms = conforms;
    lodash.constant = constant;
    lodash.countBy = countBy;
    lodash.create = create;
    lodash.curry = curry;
    lodash.curryRight = curryRight;
    lodash.debounce = debounce;
    lodash.defaults = defaults;
    lodash.defaultsDeep = defaultsDeep;
    lodash.defer = defer;
    lodash.delay = delay;
    lodash.difference = difference;
    lodash.differenceBy = differenceBy;
    lodash.differenceWith = differenceWith;
    lodash.drop = drop;
    lodash.dropRight = dropRight;
    lodash.dropRightWhile = dropRightWhile;
    lodash.dropWhile = dropWhile;
    lodash.fill = fill;
    lodash.filter = filter;
    lodash.flatMap = flatMap;
    lodash.flatMapDeep = flatMapDeep;
    lodash.flatMapDepth = flatMapDepth;
    lodash.flatten = flatten;
    lodash.flattenDeep = flattenDeep;
    lodash.flattenDepth = flattenDepth;
    lodash.flip = flip;
    lodash.flow = flow;
    lodash.flowRight = flowRight;
    lodash.fromPairs = fromPairs;
    lodash.functions = functions;
    lodash.functionsIn = functionsIn;
    lodash.groupBy = groupBy;
    lodash.initial = initial;
    lodash.intersection = intersection;
    lodash.intersectionBy = intersectionBy;
    lodash.intersectionWith = intersectionWith;
    lodash.invert = invert;
    lodash.invertBy = invertBy;
    lodash.invokeMap = invokeMap;
    lodash.iteratee = iteratee;
    lodash.keyBy = keyBy;
    lodash.keys = keys;
    lodash.keysIn = keysIn;
    lodash.map = map;
    lodash.mapKeys = mapKeys;
    lodash.mapValues = mapValues;
    lodash.matches = matches;
    lodash.matchesProperty = matchesProperty;
    lodash.memoize = memoize;
    lodash.merge = merge;
    lodash.mergeWith = mergeWith;
    lodash.method = method;
    lodash.methodOf = methodOf;
    lodash.mixin = mixin;
    lodash.negate = negate;
    lodash.nthArg = nthArg;
    lodash.omit = omit;
    lodash.omitBy = omitBy;
    lodash.once = once;
    lodash.orderBy = orderBy;
    lodash.over = over;
    lodash.overArgs = overArgs;
    lodash.overEvery = overEvery;
    lodash.overSome = overSome;
    lodash.partial = partial;
    lodash.partialRight = partialRight;
    lodash.partition = partition;
    lodash.pick = pick;
    lodash.pickBy = pickBy;
    lodash.property = property;
    lodash.propertyOf = propertyOf;
    lodash.pull = pull;
    lodash.pullAll = pullAll;
    lodash.pullAllBy = pullAllBy;
    lodash.pullAllWith = pullAllWith;
    lodash.pullAt = pullAt;
    lodash.range = range;
    lodash.rangeRight = rangeRight;
    lodash.rearg = rearg;
    lodash.reject = reject;
    lodash.remove = remove;
    lodash.rest = rest;
    lodash.reverse = reverse;
    lodash.sampleSize = sampleSize;
    lodash.set = set;
    lodash.setWith = setWith;
    lodash.shuffle = shuffle;
    lodash.slice = slice;
    lodash.sortBy = sortBy;
    lodash.sortedUniq = sortedUniq;
    lodash.sortedUniqBy = sortedUniqBy;
    lodash.split = split;
    lodash.spread = spread;
    lodash.tail = tail;
    lodash.take = take;
    lodash.takeRight = takeRight;
    lodash.takeRightWhile = takeRightWhile;
    lodash.takeWhile = takeWhile;
    lodash.tap = tap;
    lodash.throttle = throttle;
    lodash.thru = thru;
    lodash.toArray = toArray;
    lodash.toPairs = toPairs;
    lodash.toPairsIn = toPairsIn;
    lodash.toPath = toPath;
    lodash.toPlainObject = toPlainObject;
    lodash.transform = transform;
    lodash.unary = unary;
    lodash.union = union;
    lodash.unionBy = unionBy;
    lodash.unionWith = unionWith;
    lodash.uniq = uniq;
    lodash.uniqBy = uniqBy;
    lodash.uniqWith = uniqWith;
    lodash.unset = unset;
    lodash.unzip = unzip;
    lodash.unzipWith = unzipWith;
    lodash.update = update;
    lodash.updateWith = updateWith;
    lodash.values = values;
    lodash.valuesIn = valuesIn;
    lodash.without = without;
    lodash.words = words;
    lodash.wrap = wrap;
    lodash.xor = xor;
    lodash.xorBy = xorBy;
    lodash.xorWith = xorWith;
    lodash.zip = zip;
    lodash.zipObject = zipObject;
    lodash.zipObjectDeep = zipObjectDeep;
    lodash.zipWith = zipWith;

    // Add aliases.
    lodash.entries = toPairs;
    lodash.entriesIn = toPairsIn;
    lodash.extend = assignIn;
    lodash.extendWith = assignInWith;

    // Add methods to `lodash.prototype`.
    mixin(lodash, lodash);

    /*------------------------------------------------------------------------*/

    // Add methods that return unwrapped values in chain sequences.
    lodash.add = add;
    lodash.attempt = attempt;
    lodash.camelCase = camelCase;
    lodash.capitalize = capitalize;
    lodash.ceil = ceil;
    lodash.clamp = clamp;
    lodash.clone = clone;
    lodash.cloneDeep = cloneDeep;
    lodash.cloneDeepWith = cloneDeepWith;
    lodash.cloneWith = cloneWith;
    lodash.conformsTo = conformsTo;
    lodash.deburr = deburr;
    lodash.defaultTo = defaultTo;
    lodash.divide = divide;
    lodash.endsWith = endsWith;
    lodash.eq = eq;
    lodash.escape = escape;
    lodash.escapeRegExp = escapeRegExp;
    lodash.every = every;
    lodash.find = find;
    lodash.findIndex = findIndex;
    lodash.findKey = findKey;
    lodash.findLast = findLast;
    lodash.findLastIndex = findLastIndex;
    lodash.findLastKey = findLastKey;
    lodash.floor = floor;
    lodash.forEach = forEach;
    lodash.forEachRight = forEachRight;
    lodash.forIn = forIn;
    lodash.forInRight = forInRight;
    lodash.forOwn = forOwn;
    lodash.forOwnRight = forOwnRight;
    lodash.get = get;
    lodash.gt = gt;
    lodash.gte = gte;
    lodash.has = has;
    lodash.hasIn = hasIn;
    lodash.head = head;
    lodash.identity = identity;
    lodash.includes = includes;
    lodash.indexOf = indexOf;
    lodash.inRange = inRange;
    lodash.invoke = invoke;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isArrayBuffer = isArrayBuffer;
    lodash.isArrayLike = isArrayLike;
    lodash.isArrayLikeObject = isArrayLikeObject;
    lodash.isBoolean = isBoolean;
    lodash.isBuffer = isBuffer;
    lodash.isDate = isDate;
    lodash.isElement = isElement;
    lodash.isEmpty = isEmpty;
    lodash.isEqual = isEqual;
    lodash.isEqualWith = isEqualWith;
    lodash.isError = isError;
    lodash.isFinite = isFinite;
    lodash.isFunction = isFunction;
    lodash.isInteger = isInteger;
    lodash.isLength = isLength;
    lodash.isMap = isMap;
    lodash.isMatch = isMatch;
    lodash.isMatchWith = isMatchWith;
    lodash.isNaN = isNaN;
    lodash.isNative = isNative;
    lodash.isNil = isNil;
    lodash.isNull = isNull;
    lodash.isNumber = isNumber;
    lodash.isObject = isObject;
    lodash.isObjectLike = isObjectLike;
    lodash.isPlainObject = isPlainObject;
    lodash.isRegExp = isRegExp;
    lodash.isSafeInteger = isSafeInteger;
    lodash.isSet = isSet;
    lodash.isString = isString;
    lodash.isSymbol = isSymbol;
    lodash.isTypedArray = isTypedArray;
    lodash.isUndefined = isUndefined;
    lodash.isWeakMap = isWeakMap;
    lodash.isWeakSet = isWeakSet;
    lodash.join = join;
    lodash.kebabCase = kebabCase;
    lodash.last = last;
    lodash.lastIndexOf = lastIndexOf;
    lodash.lowerCase = lowerCase;
    lodash.lowerFirst = lowerFirst;
    lodash.lt = lt;
    lodash.lte = lte;
    lodash.max = max;
    lodash.maxBy = maxBy;
    lodash.mean = mean;
    lodash.meanBy = meanBy;
    lodash.min = min;
    lodash.minBy = minBy;
    lodash.stubArray = stubArray;
    lodash.stubFalse = stubFalse;
    lodash.stubObject = stubObject;
    lodash.stubString = stubString;
    lodash.stubTrue = stubTrue;
    lodash.multiply = multiply;
    lodash.nth = nth;
    lodash.noConflict = noConflict;
    lodash.noop = noop;
    lodash.now = now;
    lodash.pad = pad;
    lodash.padEnd = padEnd;
    lodash.padStart = padStart;
    lodash.parseInt = parseInt;
    lodash.random = random;
    lodash.reduce = reduce;
    lodash.reduceRight = reduceRight;
    lodash.repeat = repeat;
    lodash.replace = replace;
    lodash.result = result;
    lodash.round = round;
    lodash.runInContext = runInContext;
    lodash.sample = sample;
    lodash.size = size;
    lodash.snakeCase = snakeCase;
    lodash.some = some;
    lodash.sortedIndex = sortedIndex;
    lodash.sortedIndexBy = sortedIndexBy;
    lodash.sortedIndexOf = sortedIndexOf;
    lodash.sortedLastIndex = sortedLastIndex;
    lodash.sortedLastIndexBy = sortedLastIndexBy;
    lodash.sortedLastIndexOf = sortedLastIndexOf;
    lodash.startCase = startCase;
    lodash.startsWith = startsWith;
    lodash.subtract = subtract;
    lodash.sum = sum;
    lodash.sumBy = sumBy;
    lodash.template = template;
    lodash.times = times;
    lodash.toFinite = toFinite;
    lodash.toInteger = toInteger;
    lodash.toLength = toLength;
    lodash.toLower = toLower;
    lodash.toNumber = toNumber;
    lodash.toSafeInteger = toSafeInteger;
    lodash.toString = toString;
    lodash.toUpper = toUpper;
    lodash.trim = trim;
    lodash.trimEnd = trimEnd;
    lodash.trimStart = trimStart;
    lodash.truncate = truncate;
    lodash.unescape = unescape;
    lodash.uniqueId = uniqueId;
    lodash.upperCase = upperCase;
    lodash.upperFirst = upperFirst;

    // Add aliases.
    lodash.each = forEach;
    lodash.eachRight = forEachRight;
    lodash.first = head;

    mixin(lodash, (function() {
      var source = {};
      baseForOwn(lodash, function(func, methodName) {
        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
          source[methodName] = func;
        }
      });
      return source;
    }()), { 'chain': false });

    /*------------------------------------------------------------------------*/

    /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type {string}
     */
    lodash.VERSION = VERSION;

    // Assign default placeholders.
    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
      lodash[methodName].placeholder = lodash;
    });

    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
    arrayEach(['drop', 'take'], function(methodName, index) {
      LazyWrapper.prototype[methodName] = function(n) {
        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);

        var result = (this.__filtered__ && !index)
          ? new LazyWrapper(this)
          : this.clone();

        if (result.__filtered__) {
          result.__takeCount__ = nativeMin(n, result.__takeCount__);
        } else {
          result.__views__.push({
            'size': nativeMin(n, MAX_ARRAY_LENGTH),
            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
          });
        }
        return result;
      };

      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
        return this.reverse()[methodName](n).reverse();
      };
    });

    // Add `LazyWrapper` methods that accept an `iteratee` value.
    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
      var type = index + 1,
          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

      LazyWrapper.prototype[methodName] = function(iteratee) {
        var result = this.clone();
        result.__iteratees__.push({
          'iteratee': getIteratee(iteratee, 3),
          'type': type
        });
        result.__filtered__ = result.__filtered__ || isFilter;
        return result;
      };
    });

    // Add `LazyWrapper` methods for `_.head` and `_.last`.
    arrayEach(['head', 'last'], function(methodName, index) {
      var takeName = 'take' + (index ? 'Right' : '');

      LazyWrapper.prototype[methodName] = function() {
        return this[takeName](1).value()[0];
      };
    });

    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
    arrayEach(['initial', 'tail'], function(methodName, index) {
      var dropName = 'drop' + (index ? '' : 'Right');

      LazyWrapper.prototype[methodName] = function() {
        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
      };
    });

    LazyWrapper.prototype.compact = function() {
      return this.filter(identity);
    };

    LazyWrapper.prototype.find = function(predicate) {
      return this.filter(predicate).head();
    };

    LazyWrapper.prototype.findLast = function(predicate) {
      return this.reverse().find(predicate);
    };

    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
      if (typeof path == 'function') {
        return new LazyWrapper(this);
      }
      return this.map(function(value) {
        return baseInvoke(value, path, args);
      });
    });

    LazyWrapper.prototype.reject = function(predicate) {
      return this.filter(negate(getIteratee(predicate)));
    };

    LazyWrapper.prototype.slice = function(start, end) {
      start = toInteger(start);

      var result = this;
      if (result.__filtered__ && (start > 0 || end < 0)) {
        return new LazyWrapper(result);
      }
      if (start < 0) {
        result = result.takeRight(-start);
      } else if (start) {
        result = result.drop(start);
      }
      if (end !== undefined) {
        end = toInteger(end);
        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
      }
      return result;
    };

    LazyWrapper.prototype.takeRightWhile = function(predicate) {
      return this.reverse().takeWhile(predicate).reverse();
    };

    LazyWrapper.prototype.toArray = function() {
      return this.take(MAX_ARRAY_LENGTH);
    };

    // Add `LazyWrapper` methods to `lodash.prototype`.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
          isTaker = /^(?:head|last)$/.test(methodName),
          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
          retUnwrapped = isTaker || /^find/.test(methodName);

      if (!lodashFunc) {
        return;
      }
      lodash.prototype[methodName] = function() {
        var value = this.__wrapped__,
            args = isTaker ? [1] : arguments,
            isLazy = value instanceof LazyWrapper,
            iteratee = args[0],
            useLazy = isLazy || isArray(value);

        var interceptor = function(value) {
          var result = lodashFunc.apply(lodash, arrayPush([value], args));
          return (isTaker && chainAll) ? result[0] : result;
        };

        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
          // Avoid lazy use if the iteratee has a "length" value other than `1`.
          isLazy = useLazy = false;
        }
        var chainAll = this.__chain__,
            isHybrid = !!this.__actions__.length,
            isUnwrapped = retUnwrapped && !chainAll,
            onlyLazy = isLazy && !isHybrid;

        if (!retUnwrapped && useLazy) {
          value = onlyLazy ? value : new LazyWrapper(this);
          var result = func.apply(value, args);
          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
          return new LodashWrapper(result, chainAll);
        }
        if (isUnwrapped && onlyLazy) {
          return func.apply(this, args);
        }
        result = this.thru(interceptor);
        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
      };
    });

    // Add `Array` methods to `lodash.prototype`.
    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
      var func = arrayProto[methodName],
          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
          retUnwrapped = /^(?:pop|shift)$/.test(methodName);

      lodash.prototype[methodName] = function() {
        var args = arguments;
        if (retUnwrapped && !this.__chain__) {
          var value = this.value();
          return func.apply(isArray(value) ? value : [], args);
        }
        return this[chainName](function(value) {
          return func.apply(isArray(value) ? value : [], args);
        });
      };
    });

    // Map minified method names to their real names.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var lodashFunc = lodash[methodName];
      if (lodashFunc) {
        var key = lodashFunc.name + '';
        if (!hasOwnProperty.call(realNames, key)) {
          realNames[key] = [];
        }
        realNames[key].push({ 'name': methodName, 'func': lodashFunc });
      }
    });

    realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{
      'name': 'wrapper',
      'func': undefined
    }];

    // Add methods to `LazyWrapper`.
    LazyWrapper.prototype.clone = lazyClone;
    LazyWrapper.prototype.reverse = lazyReverse;
    LazyWrapper.prototype.value = lazyValue;

    // Add chain sequence methods to the `lodash` wrapper.
    lodash.prototype.at = wrapperAt;
    lodash.prototype.chain = wrapperChain;
    lodash.prototype.commit = wrapperCommit;
    lodash.prototype.next = wrapperNext;
    lodash.prototype.plant = wrapperPlant;
    lodash.prototype.reverse = wrapperReverse;
    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

    // Add lazy aliases.
    lodash.prototype.first = lodash.prototype.head;

    if (symIterator) {
      lodash.prototype[symIterator] = wrapperToIterator;
    }
    return lodash;
  });

  /*--------------------------------------------------------------------------*/

  // Export lodash.
  var _ = runInContext();

  // Some AMD build optimizers, like r.js, check for condition patterns like:
  if (true) {
    // Expose Lodash on the global object to prevent errors when Lodash is
    // loaded by a script tag in the presence of an AMD loader.
    // See http://requirejs.org/docs/errors.html#mismatch for more details.
    // Use `_.noConflict` to remove Lodash from the global object.
    root._ = _;

    // Define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module.
    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {
      return _;
    }).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  }
  // Check for `exports` after `define` in case a build optimizer adds it.
  else {}
}.call(this));


/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/***/ ((module) => {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other entry modules.
(() => {
/*!*****************************!*\
  !*** ./resources/js/app.js ***!
  \*****************************/
__webpack_require__(/*! ./bootstrap */ "./resources/js/bootstrap.js");
})();

// This entry need to be wrapped in an IIFE because it need to be isolated against other entry modules.
(() => {
/*!********************************!*\
  !*** ./resources/js/script.js ***!
  \********************************/
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

!function (e) {
  var t = {};

  function n(r) {
    if (t[r]) return t[r].exports;
    var i = t[r] = {
      i: r,
      l: !1,
      exports: {}
    };
    return e[r].call(i.exports, i, i.exports, n), i.l = !0, i.exports;
  }

  n.m = e, n.c = t, n.d = function (e, t, r) {
    n.o(e, t) || Object.defineProperty(e, t, {
      enumerable: !0,
      get: r
    });
  }, n.r = function (e) {
    "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, {
      value: "Module"
    }), Object.defineProperty(e, "__esModule", {
      value: !0
    });
  }, n.t = function (e, t) {
    if (1 & t && (e = n(e)), 8 & t) return e;
    if (4 & t && "object" == _typeof(e) && e && e.__esModule) return e;
    var r = Object.create(null);
    if (n.r(r), Object.defineProperty(r, "default", {
      enumerable: !0,
      value: e
    }), 2 & t && "string" != typeof e) for (var i in e) {
      n.d(r, i, function (t) {
        return e[t];
      }.bind(null, i));
    }
    return r;
  }, n.n = function (e) {
    var t = e && e.__esModule ? function () {
      return e["default"];
    } : function () {
      return e;
    };
    return n.d(t, "a", t), t;
  }, n.o = function (e, t) {
    return Object.prototype.hasOwnProperty.call(e, t);
  }, n.p = "/", n(n.s = 11);
}([function (e, t, n) {
  "use strict";

  var r = n(5),
      i = n(19),
      o = Object.prototype.toString;

  function a(e) {
    return "[object Array]" === o.call(e);
  }

  function s(e) {
    return null !== e && "object" == _typeof(e);
  }

  function u(e) {
    return "[object Function]" === o.call(e);
  }

  function c(e, t) {
    if (null != e) if ("object" != _typeof(e) && (e = [e]), a(e)) for (var n = 0, r = e.length; n < r; n++) {
      t.call(null, e[n], n, e);
    } else for (var i in e) {
      Object.prototype.hasOwnProperty.call(e, i) && t.call(null, e[i], i, e);
    }
  }

  e.exports = {
    isArray: a,
    isArrayBuffer: function isArrayBuffer(e) {
      return "[object ArrayBuffer]" === o.call(e);
    },
    isBuffer: i,
    isFormData: function isFormData(e) {
      return "undefined" != typeof FormData && e instanceof FormData;
    },
    isArrayBufferView: function isArrayBufferView(e) {
      return "undefined" != typeof ArrayBuffer && ArrayBuffer.isView ? ArrayBuffer.isView(e) : e && e.buffer && e.buffer instanceof ArrayBuffer;
    },
    isString: function isString(e) {
      return "string" == typeof e;
    },
    isNumber: function isNumber(e) {
      return "number" == typeof e;
    },
    isObject: s,
    isUndefined: function isUndefined(e) {
      return void 0 === e;
    },
    isDate: function isDate(e) {
      return "[object Date]" === o.call(e);
    },
    isFile: function isFile(e) {
      return "[object File]" === o.call(e);
    },
    isBlob: function isBlob(e) {
      return "[object Blob]" === o.call(e);
    },
    isFunction: u,
    isStream: function isStream(e) {
      return s(e) && u(e.pipe);
    },
    isURLSearchParams: function isURLSearchParams(e) {
      return "undefined" != typeof URLSearchParams && e instanceof URLSearchParams;
    },
    isStandardBrowserEnv: function isStandardBrowserEnv() {
      return ("undefined" == typeof navigator || "ReactNative" !== navigator.product) && "undefined" != typeof window && "undefined" != typeof document;
    },
    forEach: c,
    merge: function e() {
      var t = {};

      function n(n, r) {
        "object" == _typeof(t[r]) && "object" == _typeof(n) ? t[r] = e(t[r], n) : t[r] = n;
      }

      for (var r = 0, i = arguments.length; r < i; r++) {
        c(arguments[r], n);
      }

      return t;
    },
    extend: function extend(e, t, n) {
      return c(t, function (t, i) {
        e[i] = n && "function" == typeof t ? r(t, n) : t;
      }), e;
    },
    trim: function trim(e) {
      return e.replace(/^\s*/, "").replace(/\s*$/, "");
    }
  };
}, function (e, t) {
  var n;

  n = function () {
    return this;
  }();

  try {
    n = n || new Function("return this")();
  } catch (e) {
    "object" == (typeof window === "undefined" ? "undefined" : _typeof(window)) && (n = window);
  }

  e.exports = n;
}, function (e, t, n) {
  "use strict";

  (function (t) {
    var r = n(0),
        i = n(21),
        o = {
      "Content-Type": "application/x-www-form-urlencoded"
    };

    function a(e, t) {
      !r.isUndefined(e) && r.isUndefined(e["Content-Type"]) && (e["Content-Type"] = t);
    }

    var s,
        u = {
      adapter: ("undefined" != typeof XMLHttpRequest ? s = n(7) : void 0 !== t && (s = n(7)), s),
      transformRequest: [function (e, t) {
        return i(t, "Content-Type"), r.isFormData(e) || r.isArrayBuffer(e) || r.isBuffer(e) || r.isStream(e) || r.isFile(e) || r.isBlob(e) ? e : r.isArrayBufferView(e) ? e.buffer : r.isURLSearchParams(e) ? (a(t, "application/x-www-form-urlencoded;charset=utf-8"), e.toString()) : r.isObject(e) ? (a(t, "application/json;charset=utf-8"), JSON.stringify(e)) : e;
      }],
      transformResponse: [function (e) {
        if ("string" == typeof e) try {
          e = JSON.parse(e);
        } catch (e) {}
        return e;
      }],
      timeout: 0,
      xsrfCookieName: "XSRF-TOKEN",
      xsrfHeaderName: "X-XSRF-TOKEN",
      maxContentLength: -1,
      validateStatus: function validateStatus(e) {
        return e >= 200 && e < 300;
      }
    };
    u.headers = {
      common: {
        Accept: "application/json, text/plain, */*"
      }
    }, r.forEach(["delete", "get", "head"], function (e) {
      u.headers[e] = {};
    }), r.forEach(["post", "put", "patch"], function (e) {
      u.headers[e] = r.merge(o);
    }), e.exports = u;
  }).call(this, n(6));
}, function (e, t, n) {
  "use strict";

  n.r(t), function (e) {
    for (var n = "undefined" != typeof window && "undefined" != typeof document, r = ["Edge", "Trident", "Firefox"], i = 0, o = 0; o < r.length; o += 1) {
      if (n && navigator.userAgent.indexOf(r[o]) >= 0) {
        i = 1;
        break;
      }
    }

    var a = n && window.Promise ? function (e) {
      var t = !1;
      return function () {
        t || (t = !0, window.Promise.resolve().then(function () {
          t = !1, e();
        }));
      };
    } : function (e) {
      var t = !1;
      return function () {
        t || (t = !0, setTimeout(function () {
          t = !1, e();
        }, i));
      };
    };

    function s(e) {
      return e && "[object Function]" === {}.toString.call(e);
    }

    function u(e, t) {
      if (1 !== e.nodeType) return [];
      var n = e.ownerDocument.defaultView.getComputedStyle(e, null);
      return t ? n[t] : n;
    }

    function c(e) {
      return "HTML" === e.nodeName ? e : e.parentNode || e.host;
    }

    function l(e) {
      if (!e) return document.body;

      switch (e.nodeName) {
        case "HTML":
        case "BODY":
          return e.ownerDocument.body;

        case "#document":
          return e.body;
      }

      var t = u(e),
          n = t.overflow,
          r = t.overflowX,
          i = t.overflowY;
      return /(auto|scroll|overlay)/.test(n + i + r) ? e : l(c(e));
    }

    var f = n && !(!window.MSInputMethodContext || !document.documentMode),
        p = n && /MSIE 10/.test(navigator.userAgent);

    function d(e) {
      return 11 === e ? f : 10 === e ? p : f || p;
    }

    function h(e) {
      if (!e) return document.documentElement;

      for (var t = d(10) ? document.body : null, n = e.offsetParent || null; n === t && e.nextElementSibling;) {
        n = (e = e.nextElementSibling).offsetParent;
      }

      var r = n && n.nodeName;
      return r && "BODY" !== r && "HTML" !== r ? -1 !== ["TH", "TD", "TABLE"].indexOf(n.nodeName) && "static" === u(n, "position") ? h(n) : n : e ? e.ownerDocument.documentElement : document.documentElement;
    }

    function v(e) {
      return null !== e.parentNode ? v(e.parentNode) : e;
    }

    function g(e, t) {
      if (!(e && e.nodeType && t && t.nodeType)) return document.documentElement;
      var n = e.compareDocumentPosition(t) & Node.DOCUMENT_POSITION_FOLLOWING,
          r = n ? e : t,
          i = n ? t : e,
          o = document.createRange();
      o.setStart(r, 0), o.setEnd(i, 0);
      var a,
          s,
          u = o.commonAncestorContainer;
      if (e !== u && t !== u || r.contains(i)) return "BODY" === (s = (a = u).nodeName) || "HTML" !== s && h(a.firstElementChild) !== a ? h(u) : u;
      var c = v(e);
      return c.host ? g(c.host, t) : g(e, v(t).host);
    }

    function m(e) {
      var t = "top" === (arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "top") ? "scrollTop" : "scrollLeft",
          n = e.nodeName;

      if ("BODY" === n || "HTML" === n) {
        var r = e.ownerDocument.documentElement;
        return (e.ownerDocument.scrollingElement || r)[t];
      }

      return e[t];
    }

    function y(e, t) {
      var n = "x" === t ? "Left" : "Top",
          r = "Left" === n ? "Right" : "Bottom";
      return parseFloat(e["border" + n + "Width"], 10) + parseFloat(e["border" + r + "Width"], 10);
    }

    function _(e, t, n, r) {
      return Math.max(t["offset" + e], t["scroll" + e], n["client" + e], n["offset" + e], n["scroll" + e], d(10) ? parseInt(n["offset" + e]) + parseInt(r["margin" + ("Height" === e ? "Top" : "Left")]) + parseInt(r["margin" + ("Height" === e ? "Bottom" : "Right")]) : 0);
    }

    function b(e) {
      var t = e.body,
          n = e.documentElement,
          r = d(10) && getComputedStyle(n);
      return {
        height: _("Height", t, n, r),
        width: _("Width", t, n, r)
      };
    }

    var w = function w(e, t) {
      if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
    },
        T = function () {
      function e(e, t) {
        for (var n = 0; n < t.length; n++) {
          var r = t[n];
          r.enumerable = r.enumerable || !1, r.configurable = !0, "value" in r && (r.writable = !0), Object.defineProperty(e, r.key, r);
        }
      }

      return function (t, n, r) {
        return n && e(t.prototype, n), r && e(t, r), t;
      };
    }(),
        E = function E(e, t, n) {
      return t in e ? Object.defineProperty(e, t, {
        value: n,
        enumerable: !0,
        configurable: !0,
        writable: !0
      }) : e[t] = n, e;
    },
        x = Object.assign || function (e) {
      for (var t = 1; t < arguments.length; t++) {
        var n = arguments[t];

        for (var r in n) {
          Object.prototype.hasOwnProperty.call(n, r) && (e[r] = n[r]);
        }
      }

      return e;
    };

    function C(e) {
      return x({}, e, {
        right: e.left + e.width,
        bottom: e.top + e.height
      });
    }

    function A(e) {
      var t = {};

      try {
        if (d(10)) {
          t = e.getBoundingClientRect();
          var n = m(e, "top"),
              r = m(e, "left");
          t.top += n, t.left += r, t.bottom += n, t.right += r;
        } else t = e.getBoundingClientRect();
      } catch (e) {}

      var i = {
        left: t.left,
        top: t.top,
        width: t.right - t.left,
        height: t.bottom - t.top
      },
          o = "HTML" === e.nodeName ? b(e.ownerDocument) : {},
          a = o.width || e.clientWidth || i.right - i.left,
          s = o.height || e.clientHeight || i.bottom - i.top,
          c = e.offsetWidth - a,
          l = e.offsetHeight - s;

      if (c || l) {
        var f = u(e);
        c -= y(f, "x"), l -= y(f, "y"), i.width -= c, i.height -= l;
      }

      return C(i);
    }

    function S(e, t) {
      var n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2],
          r = d(10),
          i = "HTML" === t.nodeName,
          o = A(e),
          a = A(t),
          s = l(e),
          c = u(t),
          f = parseFloat(c.borderTopWidth, 10),
          p = parseFloat(c.borderLeftWidth, 10);
      n && i && (a.top = Math.max(a.top, 0), a.left = Math.max(a.left, 0));
      var h = C({
        top: o.top - a.top - f,
        left: o.left - a.left - p,
        width: o.width,
        height: o.height
      });

      if (h.marginTop = 0, h.marginLeft = 0, !r && i) {
        var v = parseFloat(c.marginTop, 10),
            g = parseFloat(c.marginLeft, 10);
        h.top -= f - v, h.bottom -= f - v, h.left -= p - g, h.right -= p - g, h.marginTop = v, h.marginLeft = g;
      }

      return (r && !n ? t.contains(s) : t === s && "BODY" !== s.nodeName) && (h = function (e, t) {
        var n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2],
            r = m(t, "top"),
            i = m(t, "left"),
            o = n ? -1 : 1;
        return e.top += r * o, e.bottom += r * o, e.left += i * o, e.right += i * o, e;
      }(h, t)), h;
    }

    function O(e) {
      if (!e || !e.parentElement || d()) return document.documentElement;

      for (var t = e.parentElement; t && "none" === u(t, "transform");) {
        t = t.parentElement;
      }

      return t || document.documentElement;
    }

    function D(e, t, n, r) {
      var i = arguments.length > 4 && void 0 !== arguments[4] && arguments[4],
          o = {
        top: 0,
        left: 0
      },
          a = i ? O(e) : g(e, t);
      if ("viewport" === r) o = function (e) {
        var t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],
            n = e.ownerDocument.documentElement,
            r = S(e, n),
            i = Math.max(n.clientWidth, window.innerWidth || 0),
            o = Math.max(n.clientHeight, window.innerHeight || 0),
            a = t ? 0 : m(n),
            s = t ? 0 : m(n, "left");
        return C({
          top: a - r.top + r.marginTop,
          left: s - r.left + r.marginLeft,
          width: i,
          height: o
        });
      }(a, i);else {
        var s = void 0;
        "scrollParent" === r ? "BODY" === (s = l(c(t))).nodeName && (s = e.ownerDocument.documentElement) : s = "window" === r ? e.ownerDocument.documentElement : r;
        var f = S(s, a, i);
        if ("HTML" !== s.nodeName || function e(t) {
          var n = t.nodeName;
          return "BODY" !== n && "HTML" !== n && ("fixed" === u(t, "position") || e(c(t)));
        }(a)) o = f;else {
          var p = b(e.ownerDocument),
              d = p.height,
              h = p.width;
          o.top += f.top - f.marginTop, o.bottom = d + f.top, o.left += f.left - f.marginLeft, o.right = h + f.left;
        }
      }
      var v = "number" == typeof (n = n || 0);
      return o.left += v ? n : n.left || 0, o.top += v ? n : n.top || 0, o.right -= v ? n : n.right || 0, o.bottom -= v ? n : n.bottom || 0, o;
    }

    function I(e, t, n, r, i) {
      var o = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : 0;
      if (-1 === e.indexOf("auto")) return e;
      var a = D(n, r, o, i),
          s = {
        top: {
          width: a.width,
          height: t.top - a.top
        },
        right: {
          width: a.right - t.right,
          height: a.height
        },
        bottom: {
          width: a.width,
          height: a.bottom - t.bottom
        },
        left: {
          width: t.left - a.left,
          height: a.height
        }
      },
          u = Object.keys(s).map(function (e) {
        return x({
          key: e
        }, s[e], {
          area: (t = s[e], t.width * t.height)
        });
        var t;
      }).sort(function (e, t) {
        return t.area - e.area;
      }),
          c = u.filter(function (e) {
        var t = e.width,
            r = e.height;
        return t >= n.clientWidth && r >= n.clientHeight;
      }),
          l = c.length > 0 ? c[0].key : u[0].key,
          f = e.split("-")[1];
      return l + (f ? "-" + f : "");
    }

    function k(e, t, n) {
      var r = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null;
      return S(n, r ? O(t) : g(t, n), r);
    }

    function N(e) {
      var t = e.ownerDocument.defaultView.getComputedStyle(e),
          n = parseFloat(t.marginTop || 0) + parseFloat(t.marginBottom || 0),
          r = parseFloat(t.marginLeft || 0) + parseFloat(t.marginRight || 0);
      return {
        width: e.offsetWidth + r,
        height: e.offsetHeight + n
      };
    }

    function L(e) {
      var t = {
        left: "right",
        right: "left",
        bottom: "top",
        top: "bottom"
      };
      return e.replace(/left|right|bottom|top/g, function (e) {
        return t[e];
      });
    }

    function j(e, t, n) {
      n = n.split("-")[0];
      var r = N(e),
          i = {
        width: r.width,
        height: r.height
      },
          o = -1 !== ["right", "left"].indexOf(n),
          a = o ? "top" : "left",
          s = o ? "left" : "top",
          u = o ? "height" : "width",
          c = o ? "width" : "height";
      return i[a] = t[a] + t[u] / 2 - r[u] / 2, i[s] = n === s ? t[s] - r[c] : t[L(s)], i;
    }

    function P(e, t) {
      return Array.prototype.find ? e.find(t) : e.filter(t)[0];
    }

    function R(e, t, n) {
      return (void 0 === n ? e : e.slice(0, function (e, t, n) {
        if (Array.prototype.findIndex) return e.findIndex(function (e) {
          return e[t] === n;
        });
        var r = P(e, function (e) {
          return e[t] === n;
        });
        return e.indexOf(r);
      }(e, "name", n))).forEach(function (e) {
        e["function"] && console.warn("`modifier.function` is deprecated, use `modifier.fn`!");
        var n = e["function"] || e.fn;
        e.enabled && s(n) && (t.offsets.popper = C(t.offsets.popper), t.offsets.reference = C(t.offsets.reference), t = n(t, e));
      }), t;
    }

    function $(e, t) {
      return e.some(function (e) {
        var n = e.name;
        return e.enabled && n === t;
      });
    }

    function H(e) {
      for (var t = [!1, "ms", "Webkit", "Moz", "O"], n = e.charAt(0).toUpperCase() + e.slice(1), r = 0; r < t.length; r++) {
        var i = t[r],
            o = i ? "" + i + n : e;
        if (void 0 !== document.body.style[o]) return o;
      }

      return null;
    }

    function M(e) {
      var t = e.ownerDocument;
      return t ? t.defaultView : window;
    }

    function F(e, t, n, r) {
      n.updateBound = r, M(e).addEventListener("resize", n.updateBound, {
        passive: !0
      });
      var i = l(e);
      return function e(t, n, r, i) {
        var o = "BODY" === t.nodeName,
            a = o ? t.ownerDocument.defaultView : t;
        a.addEventListener(n, r, {
          passive: !0
        }), o || e(l(a.parentNode), n, r, i), i.push(a);
      }(i, "scroll", n.updateBound, n.scrollParents), n.scrollElement = i, n.eventsEnabled = !0, n;
    }

    function W() {
      var e, t;
      this.state.eventsEnabled && (cancelAnimationFrame(this.scheduleUpdate), this.state = (e = this.reference, t = this.state, M(e).removeEventListener("resize", t.updateBound), t.scrollParents.forEach(function (e) {
        e.removeEventListener("scroll", t.updateBound);
      }), t.updateBound = null, t.scrollParents = [], t.scrollElement = null, t.eventsEnabled = !1, t));
    }

    function q(e) {
      return "" !== e && !isNaN(parseFloat(e)) && isFinite(e);
    }

    function B(e, t) {
      Object.keys(t).forEach(function (n) {
        var r = "";
        -1 !== ["width", "height", "top", "right", "bottom", "left"].indexOf(n) && q(t[n]) && (r = "px"), e.style[n] = t[n] + r;
      });
    }

    var U = n && /Firefox/i.test(navigator.userAgent);

    function V(e, t, n) {
      var r = P(e, function (e) {
        return e.name === t;
      }),
          i = !!r && e.some(function (e) {
        return e.name === n && e.enabled && e.order < r.order;
      });

      if (!i) {
        var o = "`" + t + "`",
            a = "`" + n + "`";
        console.warn(a + " modifier is required by " + o + " modifier in order to work, be sure to include it before " + o + "!");
      }

      return i;
    }

    var z = ["auto-start", "auto", "auto-end", "top-start", "top", "top-end", "right-start", "right", "right-end", "bottom-end", "bottom", "bottom-start", "left-end", "left", "left-start"],
        K = z.slice(3);

    function G(e) {
      var t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],
          n = K.indexOf(e),
          r = K.slice(n + 1).concat(K.slice(0, n));
      return t ? r.reverse() : r;
    }

    var X = {
      FLIP: "flip",
      CLOCKWISE: "clockwise",
      COUNTERCLOCKWISE: "counterclockwise"
    };

    function Q(e, t, n, r) {
      var i = [0, 0],
          o = -1 !== ["right", "left"].indexOf(r),
          a = e.split(/(\+|\-)/).map(function (e) {
        return e.trim();
      }),
          s = a.indexOf(P(a, function (e) {
        return -1 !== e.search(/,|\s/);
      }));
      a[s] && -1 === a[s].indexOf(",") && console.warn("Offsets separated by white space(s) are deprecated, use a comma (,) instead.");
      var u = /\s*,\s*|\s+/,
          c = -1 !== s ? [a.slice(0, s).concat([a[s].split(u)[0]]), [a[s].split(u)[1]].concat(a.slice(s + 1))] : [a];
      return (c = c.map(function (e, r) {
        var i = (1 === r ? !o : o) ? "height" : "width",
            a = !1;
        return e.reduce(function (e, t) {
          return "" === e[e.length - 1] && -1 !== ["+", "-"].indexOf(t) ? (e[e.length - 1] = t, a = !0, e) : a ? (e[e.length - 1] += t, a = !1, e) : e.concat(t);
        }, []).map(function (e) {
          return function (e, t, n, r) {
            var i = e.match(/((?:\-|\+)?\d*\.?\d*)(.*)/),
                o = +i[1],
                a = i[2];
            if (!o) return e;

            if (0 === a.indexOf("%")) {
              var s = void 0;

              switch (a) {
                case "%p":
                  s = n;
                  break;

                case "%":
                case "%r":
                default:
                  s = r;
              }

              return C(s)[t] / 100 * o;
            }

            if ("vh" === a || "vw" === a) return ("vh" === a ? Math.max(document.documentElement.clientHeight, window.innerHeight || 0) : Math.max(document.documentElement.clientWidth, window.innerWidth || 0)) / 100 * o;
            return o;
          }(e, i, t, n);
        });
      })).forEach(function (e, t) {
        e.forEach(function (n, r) {
          q(n) && (i[t] += n * ("-" === e[r - 1] ? -1 : 1));
        });
      }), i;
    }

    var Y = {
      placement: "bottom",
      positionFixed: !1,
      eventsEnabled: !0,
      removeOnDestroy: !1,
      onCreate: function onCreate() {},
      onUpdate: function onUpdate() {},
      modifiers: {
        shift: {
          order: 100,
          enabled: !0,
          fn: function fn(e) {
            var t = e.placement,
                n = t.split("-")[0],
                r = t.split("-")[1];

            if (r) {
              var i = e.offsets,
                  o = i.reference,
                  a = i.popper,
                  s = -1 !== ["bottom", "top"].indexOf(n),
                  u = s ? "left" : "top",
                  c = s ? "width" : "height",
                  l = {
                start: E({}, u, o[u]),
                end: E({}, u, o[u] + o[c] - a[c])
              };
              e.offsets.popper = x({}, a, l[r]);
            }

            return e;
          }
        },
        offset: {
          order: 200,
          enabled: !0,
          fn: function fn(e, t) {
            var n = t.offset,
                r = e.placement,
                i = e.offsets,
                o = i.popper,
                a = i.reference,
                s = r.split("-")[0],
                u = void 0;
            return u = q(+n) ? [+n, 0] : Q(n, o, a, s), "left" === s ? (o.top += u[0], o.left -= u[1]) : "right" === s ? (o.top += u[0], o.left += u[1]) : "top" === s ? (o.left += u[0], o.top -= u[1]) : "bottom" === s && (o.left += u[0], o.top += u[1]), e.popper = o, e;
          },
          offset: 0
        },
        preventOverflow: {
          order: 300,
          enabled: !0,
          fn: function fn(e, t) {
            var n = t.boundariesElement || h(e.instance.popper);
            e.instance.reference === n && (n = h(n));
            var r = H("transform"),
                i = e.instance.popper.style,
                o = i.top,
                a = i.left,
                s = i[r];
            i.top = "", i.left = "", i[r] = "";
            var u = D(e.instance.popper, e.instance.reference, t.padding, n, e.positionFixed);
            i.top = o, i.left = a, i[r] = s, t.boundaries = u;
            var c = t.priority,
                l = e.offsets.popper,
                f = {
              primary: function primary(e) {
                var n = l[e];
                return l[e] < u[e] && !t.escapeWithReference && (n = Math.max(l[e], u[e])), E({}, e, n);
              },
              secondary: function secondary(e) {
                var n = "right" === e ? "left" : "top",
                    r = l[n];
                return l[e] > u[e] && !t.escapeWithReference && (r = Math.min(l[n], u[e] - ("right" === e ? l.width : l.height))), E({}, n, r);
              }
            };
            return c.forEach(function (e) {
              var t = -1 !== ["left", "top"].indexOf(e) ? "primary" : "secondary";
              l = x({}, l, f[t](e));
            }), e.offsets.popper = l, e;
          },
          priority: ["left", "right", "top", "bottom"],
          padding: 5,
          boundariesElement: "scrollParent"
        },
        keepTogether: {
          order: 400,
          enabled: !0,
          fn: function fn(e) {
            var t = e.offsets,
                n = t.popper,
                r = t.reference,
                i = e.placement.split("-")[0],
                o = Math.floor,
                a = -1 !== ["top", "bottom"].indexOf(i),
                s = a ? "right" : "bottom",
                u = a ? "left" : "top",
                c = a ? "width" : "height";
            return n[s] < o(r[u]) && (e.offsets.popper[u] = o(r[u]) - n[c]), n[u] > o(r[s]) && (e.offsets.popper[u] = o(r[s])), e;
          }
        },
        arrow: {
          order: 500,
          enabled: !0,
          fn: function fn(e, t) {
            var n;
            if (!V(e.instance.modifiers, "arrow", "keepTogether")) return e;
            var r = t.element;

            if ("string" == typeof r) {
              if (!(r = e.instance.popper.querySelector(r))) return e;
            } else if (!e.instance.popper.contains(r)) return console.warn("WARNING: `arrow.element` must be child of its popper element!"), e;

            var i = e.placement.split("-")[0],
                o = e.offsets,
                a = o.popper,
                s = o.reference,
                c = -1 !== ["left", "right"].indexOf(i),
                l = c ? "height" : "width",
                f = c ? "Top" : "Left",
                p = f.toLowerCase(),
                d = c ? "left" : "top",
                h = c ? "bottom" : "right",
                v = N(r)[l];
            s[h] - v < a[p] && (e.offsets.popper[p] -= a[p] - (s[h] - v)), s[p] + v > a[h] && (e.offsets.popper[p] += s[p] + v - a[h]), e.offsets.popper = C(e.offsets.popper);

            var g = s[p] + s[l] / 2 - v / 2,
                m = u(e.instance.popper),
                y = parseFloat(m["margin" + f], 10),
                _ = parseFloat(m["border" + f + "Width"], 10),
                b = g - e.offsets.popper[p] - y - _;

            return b = Math.max(Math.min(a[l] - v, b), 0), e.arrowElement = r, e.offsets.arrow = (E(n = {}, p, Math.round(b)), E(n, d, ""), n), e;
          },
          element: "[x-arrow]"
        },
        flip: {
          order: 600,
          enabled: !0,
          fn: function fn(e, t) {
            if ($(e.instance.modifiers, "inner")) return e;
            if (e.flipped && e.placement === e.originalPlacement) return e;
            var n = D(e.instance.popper, e.instance.reference, t.padding, t.boundariesElement, e.positionFixed),
                r = e.placement.split("-")[0],
                i = L(r),
                o = e.placement.split("-")[1] || "",
                a = [];

            switch (t.behavior) {
              case X.FLIP:
                a = [r, i];
                break;

              case X.CLOCKWISE:
                a = G(r);
                break;

              case X.COUNTERCLOCKWISE:
                a = G(r, !0);
                break;

              default:
                a = t.behavior;
            }

            return a.forEach(function (s, u) {
              if (r !== s || a.length === u + 1) return e;
              r = e.placement.split("-")[0], i = L(r);

              var c = e.offsets.popper,
                  l = e.offsets.reference,
                  f = Math.floor,
                  p = "left" === r && f(c.right) > f(l.left) || "right" === r && f(c.left) < f(l.right) || "top" === r && f(c.bottom) > f(l.top) || "bottom" === r && f(c.top) < f(l.bottom),
                  d = f(c.left) < f(n.left),
                  h = f(c.right) > f(n.right),
                  v = f(c.top) < f(n.top),
                  g = f(c.bottom) > f(n.bottom),
                  m = "left" === r && d || "right" === r && h || "top" === r && v || "bottom" === r && g,
                  y = -1 !== ["top", "bottom"].indexOf(r),
                  _ = !!t.flipVariations && (y && "start" === o && d || y && "end" === o && h || !y && "start" === o && v || !y && "end" === o && g);

              (p || m || _) && (e.flipped = !0, (p || m) && (r = a[u + 1]), _ && (o = function (e) {
                return "end" === e ? "start" : "start" === e ? "end" : e;
              }(o)), e.placement = r + (o ? "-" + o : ""), e.offsets.popper = x({}, e.offsets.popper, j(e.instance.popper, e.offsets.reference, e.placement)), e = R(e.instance.modifiers, e, "flip"));
            }), e;
          },
          behavior: "flip",
          padding: 5,
          boundariesElement: "viewport"
        },
        inner: {
          order: 700,
          enabled: !1,
          fn: function fn(e) {
            var t = e.placement,
                n = t.split("-")[0],
                r = e.offsets,
                i = r.popper,
                o = r.reference,
                a = -1 !== ["left", "right"].indexOf(n),
                s = -1 === ["top", "left"].indexOf(n);
            return i[a ? "left" : "top"] = o[n] - (s ? i[a ? "width" : "height"] : 0), e.placement = L(t), e.offsets.popper = C(i), e;
          }
        },
        hide: {
          order: 800,
          enabled: !0,
          fn: function fn(e) {
            if (!V(e.instance.modifiers, "hide", "preventOverflow")) return e;
            var t = e.offsets.reference,
                n = P(e.instance.modifiers, function (e) {
              return "preventOverflow" === e.name;
            }).boundaries;

            if (t.bottom < n.top || t.left > n.right || t.top > n.bottom || t.right < n.left) {
              if (!0 === e.hide) return e;
              e.hide = !0, e.attributes["x-out-of-boundaries"] = "";
            } else {
              if (!1 === e.hide) return e;
              e.hide = !1, e.attributes["x-out-of-boundaries"] = !1;
            }

            return e;
          }
        },
        computeStyle: {
          order: 850,
          enabled: !0,
          fn: function fn(e, t) {
            var n = t.x,
                r = t.y,
                i = e.offsets.popper,
                o = P(e.instance.modifiers, function (e) {
              return "applyStyle" === e.name;
            }).gpuAcceleration;
            void 0 !== o && console.warn("WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!");

            var a = void 0 !== o ? o : t.gpuAcceleration,
                s = h(e.instance.popper),
                u = A(s),
                c = {
              position: i.position
            },
                l = function (e, t) {
              var n = e.offsets,
                  r = n.popper,
                  i = n.reference,
                  o = -1 !== ["left", "right"].indexOf(e.placement),
                  a = -1 !== e.placement.indexOf("-"),
                  s = i.width % 2 == r.width % 2,
                  u = i.width % 2 == 1 && r.width % 2 == 1,
                  c = function c(e) {
                return e;
              },
                  l = t ? o || a || s ? Math.round : Math.floor : c,
                  f = t ? Math.round : c;

              return {
                left: l(u && !a && t ? r.left - 1 : r.left),
                top: f(r.top),
                bottom: f(r.bottom),
                right: l(r.right)
              };
            }(e, window.devicePixelRatio < 2 || !U),
                f = "bottom" === n ? "top" : "bottom",
                p = "right" === r ? "left" : "right",
                d = H("transform"),
                v = void 0,
                g = void 0;

            if (g = "bottom" === f ? "HTML" === s.nodeName ? -s.clientHeight + l.bottom : -u.height + l.bottom : l.top, v = "right" === p ? "HTML" === s.nodeName ? -s.clientWidth + l.right : -u.width + l.right : l.left, a && d) c[d] = "translate3d(" + v + "px, " + g + "px, 0)", c[f] = 0, c[p] = 0, c.willChange = "transform";else {
              var m = "bottom" === f ? -1 : 1,
                  y = "right" === p ? -1 : 1;
              c[f] = g * m, c[p] = v * y, c.willChange = f + ", " + p;
            }
            var _ = {
              "x-placement": e.placement
            };
            return e.attributes = x({}, _, e.attributes), e.styles = x({}, c, e.styles), e.arrowStyles = x({}, e.offsets.arrow, e.arrowStyles), e;
          },
          gpuAcceleration: !0,
          x: "bottom",
          y: "right"
        },
        applyStyle: {
          order: 900,
          enabled: !0,
          fn: function fn(e) {
            var t, n;
            return B(e.instance.popper, e.styles), t = e.instance.popper, n = e.attributes, Object.keys(n).forEach(function (e) {
              !1 !== n[e] ? t.setAttribute(e, n[e]) : t.removeAttribute(e);
            }), e.arrowElement && Object.keys(e.arrowStyles).length && B(e.arrowElement, e.arrowStyles), e;
          },
          onLoad: function onLoad(e, t, n, r, i) {
            var o = k(i, t, e, n.positionFixed),
                a = I(n.placement, o, t, e, n.modifiers.flip.boundariesElement, n.modifiers.flip.padding);
            return t.setAttribute("x-placement", a), B(t, {
              position: n.positionFixed ? "fixed" : "absolute"
            }), n;
          },
          gpuAcceleration: void 0
        }
      }
    },
        J = function () {
      function e(t, n) {
        var r = this,
            i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
        w(this, e), this.scheduleUpdate = function () {
          return requestAnimationFrame(r.update);
        }, this.update = a(this.update.bind(this)), this.options = x({}, e.Defaults, i), this.state = {
          isDestroyed: !1,
          isCreated: !1,
          scrollParents: []
        }, this.reference = t && t.jquery ? t[0] : t, this.popper = n && n.jquery ? n[0] : n, this.options.modifiers = {}, Object.keys(x({}, e.Defaults.modifiers, i.modifiers)).forEach(function (t) {
          r.options.modifiers[t] = x({}, e.Defaults.modifiers[t] || {}, i.modifiers ? i.modifiers[t] : {});
        }), this.modifiers = Object.keys(this.options.modifiers).map(function (e) {
          return x({
            name: e
          }, r.options.modifiers[e]);
        }).sort(function (e, t) {
          return e.order - t.order;
        }), this.modifiers.forEach(function (e) {
          e.enabled && s(e.onLoad) && e.onLoad(r.reference, r.popper, r.options, e, r.state);
        }), this.update();
        var o = this.options.eventsEnabled;
        o && this.enableEventListeners(), this.state.eventsEnabled = o;
      }

      return T(e, [{
        key: "update",
        value: function value() {
          return function () {
            if (!this.state.isDestroyed) {
              var e = {
                instance: this,
                styles: {},
                arrowStyles: {},
                attributes: {},
                flipped: !1,
                offsets: {}
              };
              e.offsets.reference = k(this.state, this.popper, this.reference, this.options.positionFixed), e.placement = I(this.options.placement, e.offsets.reference, this.popper, this.reference, this.options.modifiers.flip.boundariesElement, this.options.modifiers.flip.padding), e.originalPlacement = e.placement, e.positionFixed = this.options.positionFixed, e.offsets.popper = j(this.popper, e.offsets.reference, e.placement), e.offsets.popper.position = this.options.positionFixed ? "fixed" : "absolute", e = R(this.modifiers, e), this.state.isCreated ? this.options.onUpdate(e) : (this.state.isCreated = !0, this.options.onCreate(e));
            }
          }.call(this);
        }
      }, {
        key: "destroy",
        value: function value() {
          return function () {
            return this.state.isDestroyed = !0, $(this.modifiers, "applyStyle") && (this.popper.removeAttribute("x-placement"), this.popper.style.position = "", this.popper.style.top = "", this.popper.style.left = "", this.popper.style.right = "", this.popper.style.bottom = "", this.popper.style.willChange = "", this.popper.style[H("transform")] = ""), this.disableEventListeners(), this.options.removeOnDestroy && this.popper.parentNode.removeChild(this.popper), this;
          }.call(this);
        }
      }, {
        key: "enableEventListeners",
        value: function value() {
          return function () {
            this.state.eventsEnabled || (this.state = F(this.reference, this.options, this.state, this.scheduleUpdate));
          }.call(this);
        }
      }, {
        key: "disableEventListeners",
        value: function value() {
          return W.call(this);
        }
      }]), e;
    }();

    J.Utils = ("undefined" != typeof window ? window : e).PopperUtils, J.placements = z, J.Defaults = Y, t["default"] = J;
  }.call(this, n(1));
}, function (e, t, n) {
  var r;
  !function (t, n) {
    "use strict";

    "object" == _typeof(e.exports) ? e.exports = t.document ? n(t, !0) : function (e) {
      if (!e.document) throw new Error("jQuery requires a window with a document");
      return n(e);
    } : n(t);
  }("undefined" != typeof window ? window : this, function (n, i) {
    "use strict";

    var o = [],
        a = n.document,
        s = Object.getPrototypeOf,
        u = o.slice,
        c = o.concat,
        l = o.push,
        f = o.indexOf,
        p = {},
        d = p.toString,
        h = p.hasOwnProperty,
        v = h.toString,
        g = v.call(Object),
        m = {},
        y = function y(e) {
      return "function" == typeof e && "number" != typeof e.nodeType;
    },
        _ = function _(e) {
      return null != e && e === e.window;
    },
        b = {
      type: !0,
      src: !0,
      noModule: !0
    };

    function w(e, t, n) {
      var r,
          i = (t = t || a).createElement("script");
      if (i.text = e, n) for (r in b) {
        n[r] && (i[r] = n[r]);
      }
      t.head.appendChild(i).parentNode.removeChild(i);
    }

    function T(e) {
      return null == e ? e + "" : "object" == _typeof(e) || "function" == typeof e ? p[d.call(e)] || "object" : _typeof(e);
    }

    var E = function E(e, t) {
      return new E.fn.init(e, t);
    },
        x = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;

    function C(e) {
      var t = !!e && "length" in e && e.length,
          n = T(e);
      return !y(e) && !_(e) && ("array" === n || 0 === t || "number" == typeof t && t > 0 && t - 1 in e);
    }

    E.fn = E.prototype = {
      jquery: "3.3.1",
      constructor: E,
      length: 0,
      toArray: function toArray() {
        return u.call(this);
      },
      get: function get(e) {
        return null == e ? u.call(this) : e < 0 ? this[e + this.length] : this[e];
      },
      pushStack: function pushStack(e) {
        var t = E.merge(this.constructor(), e);
        return t.prevObject = this, t;
      },
      each: function each(e) {
        return E.each(this, e);
      },
      map: function map(e) {
        return this.pushStack(E.map(this, function (t, n) {
          return e.call(t, n, t);
        }));
      },
      slice: function slice() {
        return this.pushStack(u.apply(this, arguments));
      },
      first: function first() {
        return this.eq(0);
      },
      last: function last() {
        return this.eq(-1);
      },
      eq: function eq(e) {
        var t = this.length,
            n = +e + (e < 0 ? t : 0);
        return this.pushStack(n >= 0 && n < t ? [this[n]] : []);
      },
      end: function end() {
        return this.prevObject || this.constructor();
      },
      push: l,
      sort: o.sort,
      splice: o.splice
    }, E.extend = E.fn.extend = function () {
      var e,
          t,
          n,
          r,
          i,
          o,
          a = arguments[0] || {},
          s = 1,
          u = arguments.length,
          c = !1;

      for ("boolean" == typeof a && (c = a, a = arguments[s] || {}, s++), "object" == _typeof(a) || y(a) || (a = {}), s === u && (a = this, s--); s < u; s++) {
        if (null != (e = arguments[s])) for (t in e) {
          n = a[t], a !== (r = e[t]) && (c && r && (E.isPlainObject(r) || (i = Array.isArray(r))) ? (i ? (i = !1, o = n && Array.isArray(n) ? n : []) : o = n && E.isPlainObject(n) ? n : {}, a[t] = E.extend(c, o, r)) : void 0 !== r && (a[t] = r));
        }
      }

      return a;
    }, E.extend({
      expando: "jQuery" + ("3.3.1" + Math.random()).replace(/\D/g, ""),
      isReady: !0,
      error: function error(e) {
        throw new Error(e);
      },
      noop: function noop() {},
      isPlainObject: function isPlainObject(e) {
        var t, n;
        return !(!e || "[object Object]" !== d.call(e)) && (!(t = s(e)) || "function" == typeof (n = h.call(t, "constructor") && t.constructor) && v.call(n) === g);
      },
      isEmptyObject: function isEmptyObject(e) {
        var t;

        for (t in e) {
          return !1;
        }

        return !0;
      },
      globalEval: function globalEval(e) {
        w(e);
      },
      each: function each(e, t) {
        var n,
            r = 0;
        if (C(e)) for (n = e.length; r < n && !1 !== t.call(e[r], r, e[r]); r++) {
          ;
        } else for (r in e) {
          if (!1 === t.call(e[r], r, e[r])) break;
        }
        return e;
      },
      trim: function trim(e) {
        return null == e ? "" : (e + "").replace(x, "");
      },
      makeArray: function makeArray(e, t) {
        var n = t || [];
        return null != e && (C(Object(e)) ? E.merge(n, "string" == typeof e ? [e] : e) : l.call(n, e)), n;
      },
      inArray: function inArray(e, t, n) {
        return null == t ? -1 : f.call(t, e, n);
      },
      merge: function merge(e, t) {
        for (var n = +t.length, r = 0, i = e.length; r < n; r++) {
          e[i++] = t[r];
        }

        return e.length = i, e;
      },
      grep: function grep(e, t, n) {
        for (var r = [], i = 0, o = e.length, a = !n; i < o; i++) {
          !t(e[i], i) !== a && r.push(e[i]);
        }

        return r;
      },
      map: function map(e, t, n) {
        var r,
            i,
            o = 0,
            a = [];
        if (C(e)) for (r = e.length; o < r; o++) {
          null != (i = t(e[o], o, n)) && a.push(i);
        } else for (o in e) {
          null != (i = t(e[o], o, n)) && a.push(i);
        }
        return c.apply([], a);
      },
      guid: 1,
      support: m
    }), "function" == typeof Symbol && (E.fn[Symbol.iterator] = o[Symbol.iterator]), E.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "), function (e, t) {
      p["[object " + t + "]"] = t.toLowerCase();
    });

    var A = function (e) {
      var t,
          n,
          r,
          i,
          o,
          a,
          s,
          u,
          c,
          l,
          f,
          p,
          d,
          h,
          v,
          g,
          m,
          y,
          _,
          b = "sizzle" + 1 * new Date(),
          w = e.document,
          T = 0,
          E = 0,
          x = ae(),
          C = ae(),
          A = ae(),
          S = function S(e, t) {
        return e === t && (f = !0), 0;
      },
          O = {}.hasOwnProperty,
          D = [],
          I = D.pop,
          k = D.push,
          N = D.push,
          L = D.slice,
          j = function j(e, t) {
        for (var n = 0, r = e.length; n < r; n++) {
          if (e[n] === t) return n;
        }

        return -1;
      },
          P = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",
          R = "[\\x20\\t\\r\\n\\f]",
          $ = "(?:\\\\.|[\\w-]|[^\0-\\xa0])+",
          H = "\\[" + R + "*(" + $ + ")(?:" + R + "*([*^$|!~]?=)" + R + "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + $ + "))|)" + R + "*\\]",
          M = ":(" + $ + ")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|" + H + ")*)|.*)\\)|)",
          F = new RegExp(R + "+", "g"),
          W = new RegExp("^" + R + "+|((?:^|[^\\\\])(?:\\\\.)*)" + R + "+$", "g"),
          q = new RegExp("^" + R + "*," + R + "*"),
          B = new RegExp("^" + R + "*([>+~]|" + R + ")" + R + "*"),
          U = new RegExp("=" + R + "*([^\\]'\"]*?)" + R + "*\\]", "g"),
          V = new RegExp(M),
          z = new RegExp("^" + $ + "$"),
          K = {
        ID: new RegExp("^#(" + $ + ")"),
        CLASS: new RegExp("^\\.(" + $ + ")"),
        TAG: new RegExp("^(" + $ + "|[*])"),
        ATTR: new RegExp("^" + H),
        PSEUDO: new RegExp("^" + M),
        CHILD: new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + R + "*(even|odd|(([+-]|)(\\d*)n|)" + R + "*(?:([+-]|)" + R + "*(\\d+)|))" + R + "*\\)|)", "i"),
        bool: new RegExp("^(?:" + P + ")$", "i"),
        needsContext: new RegExp("^" + R + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + R + "*((?:-\\d)?\\d*)" + R + "*\\)|)(?=[^-]|$)", "i")
      },
          G = /^(?:input|select|textarea|button)$/i,
          X = /^h\d$/i,
          Q = /^[^{]+\{\s*\[native \w/,
          Y = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
          J = /[+~]/,
          Z = new RegExp("\\\\([\\da-f]{1,6}" + R + "?|(" + R + ")|.)", "ig"),
          ee = function ee(e, t, n) {
        var r = "0x" + t - 65536;
        return r != r || n ? t : r < 0 ? String.fromCharCode(r + 65536) : String.fromCharCode(r >> 10 | 55296, 1023 & r | 56320);
      },
          te = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
          ne = function ne(e, t) {
        return t ? "\0" === e ? "�" : e.slice(0, -1) + "\\" + e.charCodeAt(e.length - 1).toString(16) + " " : "\\" + e;
      },
          re = function re() {
        p();
      },
          ie = ye(function (e) {
        return !0 === e.disabled && ("form" in e || "label" in e);
      }, {
        dir: "parentNode",
        next: "legend"
      });

      try {
        N.apply(D = L.call(w.childNodes), w.childNodes), D[w.childNodes.length].nodeType;
      } catch (e) {
        N = {
          apply: D.length ? function (e, t) {
            k.apply(e, L.call(t));
          } : function (e, t) {
            for (var n = e.length, r = 0; e[n++] = t[r++];) {
              ;
            }

            e.length = n - 1;
          }
        };
      }

      function oe(e, t, r, i) {
        var o,
            s,
            c,
            l,
            f,
            h,
            m,
            y = t && t.ownerDocument,
            T = t ? t.nodeType : 9;
        if (r = r || [], "string" != typeof e || !e || 1 !== T && 9 !== T && 11 !== T) return r;

        if (!i && ((t ? t.ownerDocument || t : w) !== d && p(t), t = t || d, v)) {
          if (11 !== T && (f = Y.exec(e))) if (o = f[1]) {
            if (9 === T) {
              if (!(c = t.getElementById(o))) return r;
              if (c.id === o) return r.push(c), r;
            } else if (y && (c = y.getElementById(o)) && _(t, c) && c.id === o) return r.push(c), r;
          } else {
            if (f[2]) return N.apply(r, t.getElementsByTagName(e)), r;
            if ((o = f[3]) && n.getElementsByClassName && t.getElementsByClassName) return N.apply(r, t.getElementsByClassName(o)), r;
          }

          if (n.qsa && !A[e + " "] && (!g || !g.test(e))) {
            if (1 !== T) y = t, m = e;else if ("object" !== t.nodeName.toLowerCase()) {
              for ((l = t.getAttribute("id")) ? l = l.replace(te, ne) : t.setAttribute("id", l = b), s = (h = a(e)).length; s--;) {
                h[s] = "#" + l + " " + me(h[s]);
              }

              m = h.join(","), y = J.test(e) && ve(t.parentNode) || t;
            }
            if (m) try {
              return N.apply(r, y.querySelectorAll(m)), r;
            } catch (e) {} finally {
              l === b && t.removeAttribute("id");
            }
          }
        }

        return u(e.replace(W, "$1"), t, r, i);
      }

      function ae() {
        var e = [];
        return function t(n, i) {
          return e.push(n + " ") > r.cacheLength && delete t[e.shift()], t[n + " "] = i;
        };
      }

      function se(e) {
        return e[b] = !0, e;
      }

      function ue(e) {
        var t = d.createElement("fieldset");

        try {
          return !!e(t);
        } catch (e) {
          return !1;
        } finally {
          t.parentNode && t.parentNode.removeChild(t), t = null;
        }
      }

      function ce(e, t) {
        for (var n = e.split("|"), i = n.length; i--;) {
          r.attrHandle[n[i]] = t;
        }
      }

      function le(e, t) {
        var n = t && e,
            r = n && 1 === e.nodeType && 1 === t.nodeType && e.sourceIndex - t.sourceIndex;
        if (r) return r;
        if (n) for (; n = n.nextSibling;) {
          if (n === t) return -1;
        }
        return e ? 1 : -1;
      }

      function fe(e) {
        return function (t) {
          return "input" === t.nodeName.toLowerCase() && t.type === e;
        };
      }

      function pe(e) {
        return function (t) {
          var n = t.nodeName.toLowerCase();
          return ("input" === n || "button" === n) && t.type === e;
        };
      }

      function de(e) {
        return function (t) {
          return "form" in t ? t.parentNode && !1 === t.disabled ? "label" in t ? "label" in t.parentNode ? t.parentNode.disabled === e : t.disabled === e : t.isDisabled === e || t.isDisabled !== !e && ie(t) === e : t.disabled === e : "label" in t && t.disabled === e;
        };
      }

      function he(e) {
        return se(function (t) {
          return t = +t, se(function (n, r) {
            for (var i, o = e([], n.length, t), a = o.length; a--;) {
              n[i = o[a]] && (n[i] = !(r[i] = n[i]));
            }
          });
        });
      }

      function ve(e) {
        return e && void 0 !== e.getElementsByTagName && e;
      }

      for (t in n = oe.support = {}, o = oe.isXML = function (e) {
        var t = e && (e.ownerDocument || e).documentElement;
        return !!t && "HTML" !== t.nodeName;
      }, p = oe.setDocument = function (e) {
        var t,
            i,
            a = e ? e.ownerDocument || e : w;
        return a !== d && 9 === a.nodeType && a.documentElement ? (h = (d = a).documentElement, v = !o(d), w !== d && (i = d.defaultView) && i.top !== i && (i.addEventListener ? i.addEventListener("unload", re, !1) : i.attachEvent && i.attachEvent("onunload", re)), n.attributes = ue(function (e) {
          return e.className = "i", !e.getAttribute("className");
        }), n.getElementsByTagName = ue(function (e) {
          return e.appendChild(d.createComment("")), !e.getElementsByTagName("*").length;
        }), n.getElementsByClassName = Q.test(d.getElementsByClassName), n.getById = ue(function (e) {
          return h.appendChild(e).id = b, !d.getElementsByName || !d.getElementsByName(b).length;
        }), n.getById ? (r.filter.ID = function (e) {
          var t = e.replace(Z, ee);
          return function (e) {
            return e.getAttribute("id") === t;
          };
        }, r.find.ID = function (e, t) {
          if (void 0 !== t.getElementById && v) {
            var n = t.getElementById(e);
            return n ? [n] : [];
          }
        }) : (r.filter.ID = function (e) {
          var t = e.replace(Z, ee);
          return function (e) {
            var n = void 0 !== e.getAttributeNode && e.getAttributeNode("id");
            return n && n.value === t;
          };
        }, r.find.ID = function (e, t) {
          if (void 0 !== t.getElementById && v) {
            var n,
                r,
                i,
                o = t.getElementById(e);

            if (o) {
              if ((n = o.getAttributeNode("id")) && n.value === e) return [o];

              for (i = t.getElementsByName(e), r = 0; o = i[r++];) {
                if ((n = o.getAttributeNode("id")) && n.value === e) return [o];
              }
            }

            return [];
          }
        }), r.find.TAG = n.getElementsByTagName ? function (e, t) {
          return void 0 !== t.getElementsByTagName ? t.getElementsByTagName(e) : n.qsa ? t.querySelectorAll(e) : void 0;
        } : function (e, t) {
          var n,
              r = [],
              i = 0,
              o = t.getElementsByTagName(e);

          if ("*" === e) {
            for (; n = o[i++];) {
              1 === n.nodeType && r.push(n);
            }

            return r;
          }

          return o;
        }, r.find.CLASS = n.getElementsByClassName && function (e, t) {
          if (void 0 !== t.getElementsByClassName && v) return t.getElementsByClassName(e);
        }, m = [], g = [], (n.qsa = Q.test(d.querySelectorAll)) && (ue(function (e) {
          h.appendChild(e).innerHTML = "<a id='" + b + "'></a><select id='" + b + "-\r\\' msallowcapture=''><option selected=''></option></select>", e.querySelectorAll("[msallowcapture^='']").length && g.push("[*^$]=" + R + "*(?:''|\"\")"), e.querySelectorAll("[selected]").length || g.push("\\[" + R + "*(?:value|" + P + ")"), e.querySelectorAll("[id~=" + b + "-]").length || g.push("~="), e.querySelectorAll(":checked").length || g.push(":checked"), e.querySelectorAll("a#" + b + "+*").length || g.push(".#.+[+~]");
        }), ue(function (e) {
          e.innerHTML = "<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";
          var t = d.createElement("input");
          t.setAttribute("type", "hidden"), e.appendChild(t).setAttribute("name", "D"), e.querySelectorAll("[name=d]").length && g.push("name" + R + "*[*^$|!~]?="), 2 !== e.querySelectorAll(":enabled").length && g.push(":enabled", ":disabled"), h.appendChild(e).disabled = !0, 2 !== e.querySelectorAll(":disabled").length && g.push(":enabled", ":disabled"), e.querySelectorAll("*,:x"), g.push(",.*:");
        })), (n.matchesSelector = Q.test(y = h.matches || h.webkitMatchesSelector || h.mozMatchesSelector || h.oMatchesSelector || h.msMatchesSelector)) && ue(function (e) {
          n.disconnectedMatch = y.call(e, "*"), y.call(e, "[s!='']:x"), m.push("!=", M);
        }), g = g.length && new RegExp(g.join("|")), m = m.length && new RegExp(m.join("|")), t = Q.test(h.compareDocumentPosition), _ = t || Q.test(h.contains) ? function (e, t) {
          var n = 9 === e.nodeType ? e.documentElement : e,
              r = t && t.parentNode;
          return e === r || !(!r || 1 !== r.nodeType || !(n.contains ? n.contains(r) : e.compareDocumentPosition && 16 & e.compareDocumentPosition(r)));
        } : function (e, t) {
          if (t) for (; t = t.parentNode;) {
            if (t === e) return !0;
          }
          return !1;
        }, S = t ? function (e, t) {
          if (e === t) return f = !0, 0;
          var r = !e.compareDocumentPosition - !t.compareDocumentPosition;
          return r || (1 & (r = (e.ownerDocument || e) === (t.ownerDocument || t) ? e.compareDocumentPosition(t) : 1) || !n.sortDetached && t.compareDocumentPosition(e) === r ? e === d || e.ownerDocument === w && _(w, e) ? -1 : t === d || t.ownerDocument === w && _(w, t) ? 1 : l ? j(l, e) - j(l, t) : 0 : 4 & r ? -1 : 1);
        } : function (e, t) {
          if (e === t) return f = !0, 0;
          var n,
              r = 0,
              i = e.parentNode,
              o = t.parentNode,
              a = [e],
              s = [t];
          if (!i || !o) return e === d ? -1 : t === d ? 1 : i ? -1 : o ? 1 : l ? j(l, e) - j(l, t) : 0;
          if (i === o) return le(e, t);

          for (n = e; n = n.parentNode;) {
            a.unshift(n);
          }

          for (n = t; n = n.parentNode;) {
            s.unshift(n);
          }

          for (; a[r] === s[r];) {
            r++;
          }

          return r ? le(a[r], s[r]) : a[r] === w ? -1 : s[r] === w ? 1 : 0;
        }, d) : d;
      }, oe.matches = function (e, t) {
        return oe(e, null, null, t);
      }, oe.matchesSelector = function (e, t) {
        if ((e.ownerDocument || e) !== d && p(e), t = t.replace(U, "='$1']"), n.matchesSelector && v && !A[t + " "] && (!m || !m.test(t)) && (!g || !g.test(t))) try {
          var r = y.call(e, t);
          if (r || n.disconnectedMatch || e.document && 11 !== e.document.nodeType) return r;
        } catch (e) {}
        return oe(t, d, null, [e]).length > 0;
      }, oe.contains = function (e, t) {
        return (e.ownerDocument || e) !== d && p(e), _(e, t);
      }, oe.attr = function (e, t) {
        (e.ownerDocument || e) !== d && p(e);
        var i = r.attrHandle[t.toLowerCase()],
            o = i && O.call(r.attrHandle, t.toLowerCase()) ? i(e, t, !v) : void 0;
        return void 0 !== o ? o : n.attributes || !v ? e.getAttribute(t) : (o = e.getAttributeNode(t)) && o.specified ? o.value : null;
      }, oe.escape = function (e) {
        return (e + "").replace(te, ne);
      }, oe.error = function (e) {
        throw new Error("Syntax error, unrecognized expression: " + e);
      }, oe.uniqueSort = function (e) {
        var t,
            r = [],
            i = 0,
            o = 0;

        if (f = !n.detectDuplicates, l = !n.sortStable && e.slice(0), e.sort(S), f) {
          for (; t = e[o++];) {
            t === e[o] && (i = r.push(o));
          }

          for (; i--;) {
            e.splice(r[i], 1);
          }
        }

        return l = null, e;
      }, i = oe.getText = function (e) {
        var t,
            n = "",
            r = 0,
            o = e.nodeType;

        if (o) {
          if (1 === o || 9 === o || 11 === o) {
            if ("string" == typeof e.textContent) return e.textContent;

            for (e = e.firstChild; e; e = e.nextSibling) {
              n += i(e);
            }
          } else if (3 === o || 4 === o) return e.nodeValue;
        } else for (; t = e[r++];) {
          n += i(t);
        }

        return n;
      }, (r = oe.selectors = {
        cacheLength: 50,
        createPseudo: se,
        match: K,
        attrHandle: {},
        find: {},
        relative: {
          ">": {
            dir: "parentNode",
            first: !0
          },
          " ": {
            dir: "parentNode"
          },
          "+": {
            dir: "previousSibling",
            first: !0
          },
          "~": {
            dir: "previousSibling"
          }
        },
        preFilter: {
          ATTR: function ATTR(e) {
            return e[1] = e[1].replace(Z, ee), e[3] = (e[3] || e[4] || e[5] || "").replace(Z, ee), "~=" === e[2] && (e[3] = " " + e[3] + " "), e.slice(0, 4);
          },
          CHILD: function CHILD(e) {
            return e[1] = e[1].toLowerCase(), "nth" === e[1].slice(0, 3) ? (e[3] || oe.error(e[0]), e[4] = +(e[4] ? e[5] + (e[6] || 1) : 2 * ("even" === e[3] || "odd" === e[3])), e[5] = +(e[7] + e[8] || "odd" === e[3])) : e[3] && oe.error(e[0]), e;
          },
          PSEUDO: function PSEUDO(e) {
            var t,
                n = !e[6] && e[2];
            return K.CHILD.test(e[0]) ? null : (e[3] ? e[2] = e[4] || e[5] || "" : n && V.test(n) && (t = a(n, !0)) && (t = n.indexOf(")", n.length - t) - n.length) && (e[0] = e[0].slice(0, t), e[2] = n.slice(0, t)), e.slice(0, 3));
          }
        },
        filter: {
          TAG: function TAG(e) {
            var t = e.replace(Z, ee).toLowerCase();
            return "*" === e ? function () {
              return !0;
            } : function (e) {
              return e.nodeName && e.nodeName.toLowerCase() === t;
            };
          },
          CLASS: function CLASS(e) {
            var t = x[e + " "];
            return t || (t = new RegExp("(^|" + R + ")" + e + "(" + R + "|$)")) && x(e, function (e) {
              return t.test("string" == typeof e.className && e.className || void 0 !== e.getAttribute && e.getAttribute("class") || "");
            });
          },
          ATTR: function ATTR(e, t, n) {
            return function (r) {
              var i = oe.attr(r, e);
              return null == i ? "!=" === t : !t || (i += "", "=" === t ? i === n : "!=" === t ? i !== n : "^=" === t ? n && 0 === i.indexOf(n) : "*=" === t ? n && i.indexOf(n) > -1 : "$=" === t ? n && i.slice(-n.length) === n : "~=" === t ? (" " + i.replace(F, " ") + " ").indexOf(n) > -1 : "|=" === t && (i === n || i.slice(0, n.length + 1) === n + "-"));
            };
          },
          CHILD: function CHILD(e, t, n, r, i) {
            var o = "nth" !== e.slice(0, 3),
                a = "last" !== e.slice(-4),
                s = "of-type" === t;
            return 1 === r && 0 === i ? function (e) {
              return !!e.parentNode;
            } : function (t, n, u) {
              var c,
                  l,
                  f,
                  p,
                  d,
                  h,
                  v = o !== a ? "nextSibling" : "previousSibling",
                  g = t.parentNode,
                  m = s && t.nodeName.toLowerCase(),
                  y = !u && !s,
                  _ = !1;

              if (g) {
                if (o) {
                  for (; v;) {
                    for (p = t; p = p[v];) {
                      if (s ? p.nodeName.toLowerCase() === m : 1 === p.nodeType) return !1;
                    }

                    h = v = "only" === e && !h && "nextSibling";
                  }

                  return !0;
                }

                if (h = [a ? g.firstChild : g.lastChild], a && y) {
                  for (_ = (d = (c = (l = (f = (p = g)[b] || (p[b] = {}))[p.uniqueID] || (f[p.uniqueID] = {}))[e] || [])[0] === T && c[1]) && c[2], p = d && g.childNodes[d]; p = ++d && p && p[v] || (_ = d = 0) || h.pop();) {
                    if (1 === p.nodeType && ++_ && p === t) {
                      l[e] = [T, d, _];
                      break;
                    }
                  }
                } else if (y && (_ = d = (c = (l = (f = (p = t)[b] || (p[b] = {}))[p.uniqueID] || (f[p.uniqueID] = {}))[e] || [])[0] === T && c[1]), !1 === _) for (; (p = ++d && p && p[v] || (_ = d = 0) || h.pop()) && ((s ? p.nodeName.toLowerCase() !== m : 1 !== p.nodeType) || !++_ || (y && ((l = (f = p[b] || (p[b] = {}))[p.uniqueID] || (f[p.uniqueID] = {}))[e] = [T, _]), p !== t));) {
                  ;
                }

                return (_ -= i) === r || _ % r == 0 && _ / r >= 0;
              }
            };
          },
          PSEUDO: function PSEUDO(e, t) {
            var n,
                i = r.pseudos[e] || r.setFilters[e.toLowerCase()] || oe.error("unsupported pseudo: " + e);
            return i[b] ? i(t) : i.length > 1 ? (n = [e, e, "", t], r.setFilters.hasOwnProperty(e.toLowerCase()) ? se(function (e, n) {
              for (var r, o = i(e, t), a = o.length; a--;) {
                e[r = j(e, o[a])] = !(n[r] = o[a]);
              }
            }) : function (e) {
              return i(e, 0, n);
            }) : i;
          }
        },
        pseudos: {
          not: se(function (e) {
            var t = [],
                n = [],
                r = s(e.replace(W, "$1"));
            return r[b] ? se(function (e, t, n, i) {
              for (var o, a = r(e, null, i, []), s = e.length; s--;) {
                (o = a[s]) && (e[s] = !(t[s] = o));
              }
            }) : function (e, i, o) {
              return t[0] = e, r(t, null, o, n), t[0] = null, !n.pop();
            };
          }),
          has: se(function (e) {
            return function (t) {
              return oe(e, t).length > 0;
            };
          }),
          contains: se(function (e) {
            return e = e.replace(Z, ee), function (t) {
              return (t.textContent || t.innerText || i(t)).indexOf(e) > -1;
            };
          }),
          lang: se(function (e) {
            return z.test(e || "") || oe.error("unsupported lang: " + e), e = e.replace(Z, ee).toLowerCase(), function (t) {
              var n;

              do {
                if (n = v ? t.lang : t.getAttribute("xml:lang") || t.getAttribute("lang")) return (n = n.toLowerCase()) === e || 0 === n.indexOf(e + "-");
              } while ((t = t.parentNode) && 1 === t.nodeType);

              return !1;
            };
          }),
          target: function target(t) {
            var n = e.location && e.location.hash;
            return n && n.slice(1) === t.id;
          },
          root: function root(e) {
            return e === h;
          },
          focus: function focus(e) {
            return e === d.activeElement && (!d.hasFocus || d.hasFocus()) && !!(e.type || e.href || ~e.tabIndex);
          },
          enabled: de(!1),
          disabled: de(!0),
          checked: function checked(e) {
            var t = e.nodeName.toLowerCase();
            return "input" === t && !!e.checked || "option" === t && !!e.selected;
          },
          selected: function selected(e) {
            return e.parentNode && e.parentNode.selectedIndex, !0 === e.selected;
          },
          empty: function empty(e) {
            for (e = e.firstChild; e; e = e.nextSibling) {
              if (e.nodeType < 6) return !1;
            }

            return !0;
          },
          parent: function parent(e) {
            return !r.pseudos.empty(e);
          },
          header: function header(e) {
            return X.test(e.nodeName);
          },
          input: function input(e) {
            return G.test(e.nodeName);
          },
          button: function button(e) {
            var t = e.nodeName.toLowerCase();
            return "input" === t && "button" === e.type || "button" === t;
          },
          text: function text(e) {
            var t;
            return "input" === e.nodeName.toLowerCase() && "text" === e.type && (null == (t = e.getAttribute("type")) || "text" === t.toLowerCase());
          },
          first: he(function () {
            return [0];
          }),
          last: he(function (e, t) {
            return [t - 1];
          }),
          eq: he(function (e, t, n) {
            return [n < 0 ? n + t : n];
          }),
          even: he(function (e, t) {
            for (var n = 0; n < t; n += 2) {
              e.push(n);
            }

            return e;
          }),
          odd: he(function (e, t) {
            for (var n = 1; n < t; n += 2) {
              e.push(n);
            }

            return e;
          }),
          lt: he(function (e, t, n) {
            for (var r = n < 0 ? n + t : n; --r >= 0;) {
              e.push(r);
            }

            return e;
          }),
          gt: he(function (e, t, n) {
            for (var r = n < 0 ? n + t : n; ++r < t;) {
              e.push(r);
            }

            return e;
          })
        }
      }).pseudos.nth = r.pseudos.eq, {
        radio: !0,
        checkbox: !0,
        file: !0,
        password: !0,
        image: !0
      }) {
        r.pseudos[t] = fe(t);
      }

      for (t in {
        submit: !0,
        reset: !0
      }) {
        r.pseudos[t] = pe(t);
      }

      function ge() {}

      function me(e) {
        for (var t = 0, n = e.length, r = ""; t < n; t++) {
          r += e[t].value;
        }

        return r;
      }

      function ye(e, t, n) {
        var r = t.dir,
            i = t.next,
            o = i || r,
            a = n && "parentNode" === o,
            s = E++;
        return t.first ? function (t, n, i) {
          for (; t = t[r];) {
            if (1 === t.nodeType || a) return e(t, n, i);
          }

          return !1;
        } : function (t, n, u) {
          var c,
              l,
              f,
              p = [T, s];

          if (u) {
            for (; t = t[r];) {
              if ((1 === t.nodeType || a) && e(t, n, u)) return !0;
            }
          } else for (; t = t[r];) {
            if (1 === t.nodeType || a) if (l = (f = t[b] || (t[b] = {}))[t.uniqueID] || (f[t.uniqueID] = {}), i && i === t.nodeName.toLowerCase()) t = t[r] || t;else {
              if ((c = l[o]) && c[0] === T && c[1] === s) return p[2] = c[2];
              if (l[o] = p, p[2] = e(t, n, u)) return !0;
            }
          }

          return !1;
        };
      }

      function _e(e) {
        return e.length > 1 ? function (t, n, r) {
          for (var i = e.length; i--;) {
            if (!e[i](t, n, r)) return !1;
          }

          return !0;
        } : e[0];
      }

      function be(e, t, n, r, i) {
        for (var o, a = [], s = 0, u = e.length, c = null != t; s < u; s++) {
          (o = e[s]) && (n && !n(o, r, i) || (a.push(o), c && t.push(s)));
        }

        return a;
      }

      function we(e, t, n, r, i, o) {
        return r && !r[b] && (r = we(r)), i && !i[b] && (i = we(i, o)), se(function (o, a, s, u) {
          var c,
              l,
              f,
              p = [],
              d = [],
              h = a.length,
              v = o || function (e, t, n) {
            for (var r = 0, i = t.length; r < i; r++) {
              oe(e, t[r], n);
            }

            return n;
          }(t || "*", s.nodeType ? [s] : s, []),
              g = !e || !o && t ? v : be(v, p, e, s, u),
              m = n ? i || (o ? e : h || r) ? [] : a : g;

          if (n && n(g, m, s, u), r) for (c = be(m, d), r(c, [], s, u), l = c.length; l--;) {
            (f = c[l]) && (m[d[l]] = !(g[d[l]] = f));
          }

          if (o) {
            if (i || e) {
              if (i) {
                for (c = [], l = m.length; l--;) {
                  (f = m[l]) && c.push(g[l] = f);
                }

                i(null, m = [], c, u);
              }

              for (l = m.length; l--;) {
                (f = m[l]) && (c = i ? j(o, f) : p[l]) > -1 && (o[c] = !(a[c] = f));
              }
            }
          } else m = be(m === a ? m.splice(h, m.length) : m), i ? i(null, a, m, u) : N.apply(a, m);
        });
      }

      function Te(e) {
        for (var t, n, i, o = e.length, a = r.relative[e[0].type], s = a || r.relative[" "], u = a ? 1 : 0, l = ye(function (e) {
          return e === t;
        }, s, !0), f = ye(function (e) {
          return j(t, e) > -1;
        }, s, !0), p = [function (e, n, r) {
          var i = !a && (r || n !== c) || ((t = n).nodeType ? l(e, n, r) : f(e, n, r));
          return t = null, i;
        }]; u < o; u++) {
          if (n = r.relative[e[u].type]) p = [ye(_e(p), n)];else {
            if ((n = r.filter[e[u].type].apply(null, e[u].matches))[b]) {
              for (i = ++u; i < o && !r.relative[e[i].type]; i++) {
                ;
              }

              return we(u > 1 && _e(p), u > 1 && me(e.slice(0, u - 1).concat({
                value: " " === e[u - 2].type ? "*" : ""
              })).replace(W, "$1"), n, u < i && Te(e.slice(u, i)), i < o && Te(e = e.slice(i)), i < o && me(e));
            }

            p.push(n);
          }
        }

        return _e(p);
      }

      return ge.prototype = r.filters = r.pseudos, r.setFilters = new ge(), a = oe.tokenize = function (e, t) {
        var n,
            i,
            o,
            a,
            s,
            u,
            c,
            l = C[e + " "];
        if (l) return t ? 0 : l.slice(0);

        for (s = e, u = [], c = r.preFilter; s;) {
          for (a in n && !(i = q.exec(s)) || (i && (s = s.slice(i[0].length) || s), u.push(o = [])), n = !1, (i = B.exec(s)) && (n = i.shift(), o.push({
            value: n,
            type: i[0].replace(W, " ")
          }), s = s.slice(n.length)), r.filter) {
            !(i = K[a].exec(s)) || c[a] && !(i = c[a](i)) || (n = i.shift(), o.push({
              value: n,
              type: a,
              matches: i
            }), s = s.slice(n.length));
          }

          if (!n) break;
        }

        return t ? s.length : s ? oe.error(e) : C(e, u).slice(0);
      }, s = oe.compile = function (e, t) {
        var n,
            i = [],
            o = [],
            s = A[e + " "];

        if (!s) {
          for (t || (t = a(e)), n = t.length; n--;) {
            (s = Te(t[n]))[b] ? i.push(s) : o.push(s);
          }

          (s = A(e, function (e, t) {
            var n = t.length > 0,
                i = e.length > 0,
                o = function o(_o2, a, s, u, l) {
              var f,
                  h,
                  g,
                  m = 0,
                  y = "0",
                  _ = _o2 && [],
                  b = [],
                  w = c,
                  E = _o2 || i && r.find.TAG("*", l),
                  x = T += null == w ? 1 : Math.random() || .1,
                  C = E.length;

              for (l && (c = a === d || a || l); y !== C && null != (f = E[y]); y++) {
                if (i && f) {
                  for (h = 0, a || f.ownerDocument === d || (p(f), s = !v); g = e[h++];) {
                    if (g(f, a || d, s)) {
                      u.push(f);
                      break;
                    }
                  }

                  l && (T = x);
                }

                n && ((f = !g && f) && m--, _o2 && _.push(f));
              }

              if (m += y, n && y !== m) {
                for (h = 0; g = t[h++];) {
                  g(_, b, a, s);
                }

                if (_o2) {
                  if (m > 0) for (; y--;) {
                    _[y] || b[y] || (b[y] = I.call(u));
                  }
                  b = be(b);
                }

                N.apply(u, b), l && !_o2 && b.length > 0 && m + t.length > 1 && oe.uniqueSort(u);
              }

              return l && (T = x, c = w), _;
            };

            return n ? se(o) : o;
          }(o, i))).selector = e;
        }

        return s;
      }, u = oe.select = function (e, t, n, i) {
        var o,
            u,
            c,
            l,
            f,
            p = "function" == typeof e && e,
            d = !i && a(e = p.selector || e);

        if (n = n || [], 1 === d.length) {
          if ((u = d[0] = d[0].slice(0)).length > 2 && "ID" === (c = u[0]).type && 9 === t.nodeType && v && r.relative[u[1].type]) {
            if (!(t = (r.find.ID(c.matches[0].replace(Z, ee), t) || [])[0])) return n;
            p && (t = t.parentNode), e = e.slice(u.shift().value.length);
          }

          for (o = K.needsContext.test(e) ? 0 : u.length; o-- && (c = u[o], !r.relative[l = c.type]);) {
            if ((f = r.find[l]) && (i = f(c.matches[0].replace(Z, ee), J.test(u[0].type) && ve(t.parentNode) || t))) {
              if (u.splice(o, 1), !(e = i.length && me(u))) return N.apply(n, i), n;
              break;
            }
          }
        }

        return (p || s(e, d))(i, t, !v, n, !t || J.test(e) && ve(t.parentNode) || t), n;
      }, n.sortStable = b.split("").sort(S).join("") === b, n.detectDuplicates = !!f, p(), n.sortDetached = ue(function (e) {
        return 1 & e.compareDocumentPosition(d.createElement("fieldset"));
      }), ue(function (e) {
        return e.innerHTML = "<a href='#'></a>", "#" === e.firstChild.getAttribute("href");
      }) || ce("type|href|height|width", function (e, t, n) {
        if (!n) return e.getAttribute(t, "type" === t.toLowerCase() ? 1 : 2);
      }), n.attributes && ue(function (e) {
        return e.innerHTML = "<input/>", e.firstChild.setAttribute("value", ""), "" === e.firstChild.getAttribute("value");
      }) || ce("value", function (e, t, n) {
        if (!n && "input" === e.nodeName.toLowerCase()) return e.defaultValue;
      }), ue(function (e) {
        return null == e.getAttribute("disabled");
      }) || ce(P, function (e, t, n) {
        var r;
        if (!n) return !0 === e[t] ? t.toLowerCase() : (r = e.getAttributeNode(t)) && r.specified ? r.value : null;
      }), oe;
    }(n);

    E.find = A, E.expr = A.selectors, E.expr[":"] = E.expr.pseudos, E.uniqueSort = E.unique = A.uniqueSort, E.text = A.getText, E.isXMLDoc = A.isXML, E.contains = A.contains, E.escapeSelector = A.escape;

    var S = function S(e, t, n) {
      for (var r = [], i = void 0 !== n; (e = e[t]) && 9 !== e.nodeType;) {
        if (1 === e.nodeType) {
          if (i && E(e).is(n)) break;
          r.push(e);
        }
      }

      return r;
    },
        O = function O(e, t) {
      for (var n = []; e; e = e.nextSibling) {
        1 === e.nodeType && e !== t && n.push(e);
      }

      return n;
    },
        D = E.expr.match.needsContext;

    function I(e, t) {
      return e.nodeName && e.nodeName.toLowerCase() === t.toLowerCase();
    }

    var k = /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;

    function N(e, t, n) {
      return y(t) ? E.grep(e, function (e, r) {
        return !!t.call(e, r, e) !== n;
      }) : t.nodeType ? E.grep(e, function (e) {
        return e === t !== n;
      }) : "string" != typeof t ? E.grep(e, function (e) {
        return f.call(t, e) > -1 !== n;
      }) : E.filter(t, e, n);
    }

    E.filter = function (e, t, n) {
      var r = t[0];
      return n && (e = ":not(" + e + ")"), 1 === t.length && 1 === r.nodeType ? E.find.matchesSelector(r, e) ? [r] : [] : E.find.matches(e, E.grep(t, function (e) {
        return 1 === e.nodeType;
      }));
    }, E.fn.extend({
      find: function find(e) {
        var t,
            n,
            r = this.length,
            i = this;
        if ("string" != typeof e) return this.pushStack(E(e).filter(function () {
          for (t = 0; t < r; t++) {
            if (E.contains(i[t], this)) return !0;
          }
        }));

        for (n = this.pushStack([]), t = 0; t < r; t++) {
          E.find(e, i[t], n);
        }

        return r > 1 ? E.uniqueSort(n) : n;
      },
      filter: function filter(e) {
        return this.pushStack(N(this, e || [], !1));
      },
      not: function not(e) {
        return this.pushStack(N(this, e || [], !0));
      },
      is: function is(e) {
        return !!N(this, "string" == typeof e && D.test(e) ? E(e) : e || [], !1).length;
      }
    });
    var L,
        j = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;
    (E.fn.init = function (e, t, n) {
      var r, i;
      if (!e) return this;

      if (n = n || L, "string" == typeof e) {
        if (!(r = "<" === e[0] && ">" === e[e.length - 1] && e.length >= 3 ? [null, e, null] : j.exec(e)) || !r[1] && t) return !t || t.jquery ? (t || n).find(e) : this.constructor(t).find(e);

        if (r[1]) {
          if (t = t instanceof E ? t[0] : t, E.merge(this, E.parseHTML(r[1], t && t.nodeType ? t.ownerDocument || t : a, !0)), k.test(r[1]) && E.isPlainObject(t)) for (r in t) {
            y(this[r]) ? this[r](t[r]) : this.attr(r, t[r]);
          }
          return this;
        }

        return (i = a.getElementById(r[2])) && (this[0] = i, this.length = 1), this;
      }

      return e.nodeType ? (this[0] = e, this.length = 1, this) : y(e) ? void 0 !== n.ready ? n.ready(e) : e(E) : E.makeArray(e, this);
    }).prototype = E.fn, L = E(a);
    var P = /^(?:parents|prev(?:Until|All))/,
        R = {
      children: !0,
      contents: !0,
      next: !0,
      prev: !0
    };

    function $(e, t) {
      for (; (e = e[t]) && 1 !== e.nodeType;) {
        ;
      }

      return e;
    }

    E.fn.extend({
      has: function has(e) {
        var t = E(e, this),
            n = t.length;
        return this.filter(function () {
          for (var e = 0; e < n; e++) {
            if (E.contains(this, t[e])) return !0;
          }
        });
      },
      closest: function closest(e, t) {
        var n,
            r = 0,
            i = this.length,
            o = [],
            a = "string" != typeof e && E(e);
        if (!D.test(e)) for (; r < i; r++) {
          for (n = this[r]; n && n !== t; n = n.parentNode) {
            if (n.nodeType < 11 && (a ? a.index(n) > -1 : 1 === n.nodeType && E.find.matchesSelector(n, e))) {
              o.push(n);
              break;
            }
          }
        }
        return this.pushStack(o.length > 1 ? E.uniqueSort(o) : o);
      },
      index: function index(e) {
        return e ? "string" == typeof e ? f.call(E(e), this[0]) : f.call(this, e.jquery ? e[0] : e) : this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
      },
      add: function add(e, t) {
        return this.pushStack(E.uniqueSort(E.merge(this.get(), E(e, t))));
      },
      addBack: function addBack(e) {
        return this.add(null == e ? this.prevObject : this.prevObject.filter(e));
      }
    }), E.each({
      parent: function parent(e) {
        var t = e.parentNode;
        return t && 11 !== t.nodeType ? t : null;
      },
      parents: function parents(e) {
        return S(e, "parentNode");
      },
      parentsUntil: function parentsUntil(e, t, n) {
        return S(e, "parentNode", n);
      },
      next: function next(e) {
        return $(e, "nextSibling");
      },
      prev: function prev(e) {
        return $(e, "previousSibling");
      },
      nextAll: function nextAll(e) {
        return S(e, "nextSibling");
      },
      prevAll: function prevAll(e) {
        return S(e, "previousSibling");
      },
      nextUntil: function nextUntil(e, t, n) {
        return S(e, "nextSibling", n);
      },
      prevUntil: function prevUntil(e, t, n) {
        return S(e, "previousSibling", n);
      },
      siblings: function siblings(e) {
        return O((e.parentNode || {}).firstChild, e);
      },
      children: function children(e) {
        return O(e.firstChild);
      },
      contents: function contents(e) {
        return I(e, "iframe") ? e.contentDocument : (I(e, "template") && (e = e.content || e), E.merge([], e.childNodes));
      }
    }, function (e, t) {
      E.fn[e] = function (n, r) {
        var i = E.map(this, t, n);
        return "Until" !== e.slice(-5) && (r = n), r && "string" == typeof r && (i = E.filter(r, i)), this.length > 1 && (R[e] || E.uniqueSort(i), P.test(e) && i.reverse()), this.pushStack(i);
      };
    });
    var H = /[^\x20\t\r\n\f]+/g;

    function M(e) {
      return e;
    }

    function F(e) {
      throw e;
    }

    function W(e, t, n, r) {
      var i;

      try {
        e && y(i = e.promise) ? i.call(e).done(t).fail(n) : e && y(i = e.then) ? i.call(e, t, n) : t.apply(void 0, [e].slice(r));
      } catch (e) {
        n.apply(void 0, [e]);
      }
    }

    E.Callbacks = function (e) {
      e = "string" == typeof e ? function (e) {
        var t = {};
        return E.each(e.match(H) || [], function (e, n) {
          t[n] = !0;
        }), t;
      }(e) : E.extend({}, e);

      var t,
          n,
          r,
          i,
          o = [],
          a = [],
          s = -1,
          u = function u() {
        for (i = i || e.once, r = t = !0; a.length; s = -1) {
          for (n = a.shift(); ++s < o.length;) {
            !1 === o[s].apply(n[0], n[1]) && e.stopOnFalse && (s = o.length, n = !1);
          }
        }

        e.memory || (n = !1), t = !1, i && (o = n ? [] : "");
      },
          c = {
        add: function add() {
          return o && (n && !t && (s = o.length - 1, a.push(n)), function t(n) {
            E.each(n, function (n, r) {
              y(r) ? e.unique && c.has(r) || o.push(r) : r && r.length && "string" !== T(r) && t(r);
            });
          }(arguments), n && !t && u()), this;
        },
        remove: function remove() {
          return E.each(arguments, function (e, t) {
            for (var n; (n = E.inArray(t, o, n)) > -1;) {
              o.splice(n, 1), n <= s && s--;
            }
          }), this;
        },
        has: function has(e) {
          return e ? E.inArray(e, o) > -1 : o.length > 0;
        },
        empty: function empty() {
          return o && (o = []), this;
        },
        disable: function disable() {
          return i = a = [], o = n = "", this;
        },
        disabled: function disabled() {
          return !o;
        },
        lock: function lock() {
          return i = a = [], n || t || (o = n = ""), this;
        },
        locked: function locked() {
          return !!i;
        },
        fireWith: function fireWith(e, n) {
          return i || (n = [e, (n = n || []).slice ? n.slice() : n], a.push(n), t || u()), this;
        },
        fire: function fire() {
          return c.fireWith(this, arguments), this;
        },
        fired: function fired() {
          return !!r;
        }
      };

      return c;
    }, E.extend({
      Deferred: function Deferred(e) {
        var t = [["notify", "progress", E.Callbacks("memory"), E.Callbacks("memory"), 2], ["resolve", "done", E.Callbacks("once memory"), E.Callbacks("once memory"), 0, "resolved"], ["reject", "fail", E.Callbacks("once memory"), E.Callbacks("once memory"), 1, "rejected"]],
            r = "pending",
            i = {
          state: function state() {
            return r;
          },
          always: function always() {
            return o.done(arguments).fail(arguments), this;
          },
          "catch": function _catch(e) {
            return i.then(null, e);
          },
          pipe: function pipe() {
            var e = arguments;
            return E.Deferred(function (n) {
              E.each(t, function (t, r) {
                var i = y(e[r[4]]) && e[r[4]];
                o[r[1]](function () {
                  var e = i && i.apply(this, arguments);
                  e && y(e.promise) ? e.promise().progress(n.notify).done(n.resolve).fail(n.reject) : n[r[0] + "With"](this, i ? [e] : arguments);
                });
              }), e = null;
            }).promise();
          },
          then: function then(e, r, i) {
            var o = 0;

            function a(e, t, r, i) {
              return function () {
                var s = this,
                    u = arguments,
                    c = function c() {
                  var n, c;

                  if (!(e < o)) {
                    if ((n = r.apply(s, u)) === t.promise()) throw new TypeError("Thenable self-resolution");
                    c = n && ("object" == _typeof(n) || "function" == typeof n) && n.then, y(c) ? i ? c.call(n, a(o, t, M, i), a(o, t, F, i)) : (o++, c.call(n, a(o, t, M, i), a(o, t, F, i), a(o, t, M, t.notifyWith))) : (r !== M && (s = void 0, u = [n]), (i || t.resolveWith)(s, u));
                  }
                },
                    l = i ? c : function () {
                  try {
                    c();
                  } catch (n) {
                    E.Deferred.exceptionHook && E.Deferred.exceptionHook(n, l.stackTrace), e + 1 >= o && (r !== F && (s = void 0, u = [n]), t.rejectWith(s, u));
                  }
                };

                e ? l() : (E.Deferred.getStackHook && (l.stackTrace = E.Deferred.getStackHook()), n.setTimeout(l));
              };
            }

            return E.Deferred(function (n) {
              t[0][3].add(a(0, n, y(i) ? i : M, n.notifyWith)), t[1][3].add(a(0, n, y(e) ? e : M)), t[2][3].add(a(0, n, y(r) ? r : F));
            }).promise();
          },
          promise: function promise(e) {
            return null != e ? E.extend(e, i) : i;
          }
        },
            o = {};
        return E.each(t, function (e, n) {
          var a = n[2],
              s = n[5];
          i[n[1]] = a.add, s && a.add(function () {
            r = s;
          }, t[3 - e][2].disable, t[3 - e][3].disable, t[0][2].lock, t[0][3].lock), a.add(n[3].fire), o[n[0]] = function () {
            return o[n[0] + "With"](this === o ? void 0 : this, arguments), this;
          }, o[n[0] + "With"] = a.fireWith;
        }), i.promise(o), e && e.call(o, o), o;
      },
      when: function when(e) {
        var t = arguments.length,
            n = t,
            r = Array(n),
            i = u.call(arguments),
            o = E.Deferred(),
            a = function a(e) {
          return function (n) {
            r[e] = this, i[e] = arguments.length > 1 ? u.call(arguments) : n, --t || o.resolveWith(r, i);
          };
        };

        if (t <= 1 && (W(e, o.done(a(n)).resolve, o.reject, !t), "pending" === o.state() || y(i[n] && i[n].then))) return o.then();

        for (; n--;) {
          W(i[n], a(n), o.reject);
        }

        return o.promise();
      }
    });
    var q = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;
    E.Deferred.exceptionHook = function (e, t) {
      n.console && n.console.warn && e && q.test(e.name) && n.console.warn("jQuery.Deferred exception: " + e.message, e.stack, t);
    }, E.readyException = function (e) {
      n.setTimeout(function () {
        throw e;
      });
    };
    var B = E.Deferred();

    function U() {
      a.removeEventListener("DOMContentLoaded", U), n.removeEventListener("load", U), E.ready();
    }

    E.fn.ready = function (e) {
      return B.then(e)["catch"](function (e) {
        E.readyException(e);
      }), this;
    }, E.extend({
      isReady: !1,
      readyWait: 1,
      ready: function ready(e) {
        (!0 === e ? --E.readyWait : E.isReady) || (E.isReady = !0, !0 !== e && --E.readyWait > 0 || B.resolveWith(a, [E]));
      }
    }), E.ready.then = B.then, "complete" === a.readyState || "loading" !== a.readyState && !a.documentElement.doScroll ? n.setTimeout(E.ready) : (a.addEventListener("DOMContentLoaded", U), n.addEventListener("load", U));

    var V = function V(e, t, n, r, i, o, a) {
      var s = 0,
          u = e.length,
          c = null == n;
      if ("object" === T(n)) for (s in i = !0, n) {
        V(e, t, s, n[s], !0, o, a);
      } else if (void 0 !== r && (i = !0, y(r) || (a = !0), c && (a ? (t.call(e, r), t = null) : (c = t, t = function t(e, _t2, n) {
        return c.call(E(e), n);
      })), t)) for (; s < u; s++) {
        t(e[s], n, a ? r : r.call(e[s], s, t(e[s], n)));
      }
      return i ? e : c ? t.call(e) : u ? t(e[0], n) : o;
    },
        z = /^-ms-/,
        K = /-([a-z])/g;

    function G(e, t) {
      return t.toUpperCase();
    }

    function X(e) {
      return e.replace(z, "ms-").replace(K, G);
    }

    var Q = function Q(e) {
      return 1 === e.nodeType || 9 === e.nodeType || !+e.nodeType;
    };

    function Y() {
      this.expando = E.expando + Y.uid++;
    }

    Y.uid = 1, Y.prototype = {
      cache: function cache(e) {
        var t = e[this.expando];
        return t || (t = {}, Q(e) && (e.nodeType ? e[this.expando] = t : Object.defineProperty(e, this.expando, {
          value: t,
          configurable: !0
        }))), t;
      },
      set: function set(e, t, n) {
        var r,
            i = this.cache(e);
        if ("string" == typeof t) i[X(t)] = n;else for (r in t) {
          i[X(r)] = t[r];
        }
        return i;
      },
      get: function get(e, t) {
        return void 0 === t ? this.cache(e) : e[this.expando] && e[this.expando][X(t)];
      },
      access: function access(e, t, n) {
        return void 0 === t || t && "string" == typeof t && void 0 === n ? this.get(e, t) : (this.set(e, t, n), void 0 !== n ? n : t);
      },
      remove: function remove(e, t) {
        var n,
            r = e[this.expando];

        if (void 0 !== r) {
          if (void 0 !== t) {
            n = (t = Array.isArray(t) ? t.map(X) : (t = X(t)) in r ? [t] : t.match(H) || []).length;

            for (; n--;) {
              delete r[t[n]];
            }
          }

          (void 0 === t || E.isEmptyObject(r)) && (e.nodeType ? e[this.expando] = void 0 : delete e[this.expando]);
        }
      },
      hasData: function hasData(e) {
        var t = e[this.expando];
        return void 0 !== t && !E.isEmptyObject(t);
      }
    };
    var J = new Y(),
        Z = new Y(),
        ee = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
        te = /[A-Z]/g;

    function ne(e, t, n) {
      var r;
      if (void 0 === n && 1 === e.nodeType) if (r = "data-" + t.replace(te, "-$&").toLowerCase(), "string" == typeof (n = e.getAttribute(r))) {
        try {
          n = function (e) {
            return "true" === e || "false" !== e && ("null" === e ? null : e === +e + "" ? +e : ee.test(e) ? JSON.parse(e) : e);
          }(n);
        } catch (e) {}

        Z.set(e, t, n);
      } else n = void 0;
      return n;
    }

    E.extend({
      hasData: function hasData(e) {
        return Z.hasData(e) || J.hasData(e);
      },
      data: function data(e, t, n) {
        return Z.access(e, t, n);
      },
      removeData: function removeData(e, t) {
        Z.remove(e, t);
      },
      _data: function _data(e, t, n) {
        return J.access(e, t, n);
      },
      _removeData: function _removeData(e, t) {
        J.remove(e, t);
      }
    }), E.fn.extend({
      data: function data(e, t) {
        var n,
            r,
            i,
            o = this[0],
            a = o && o.attributes;

        if (void 0 === e) {
          if (this.length && (i = Z.get(o), 1 === o.nodeType && !J.get(o, "hasDataAttrs"))) {
            for (n = a.length; n--;) {
              a[n] && 0 === (r = a[n].name).indexOf("data-") && (r = X(r.slice(5)), ne(o, r, i[r]));
            }

            J.set(o, "hasDataAttrs", !0);
          }

          return i;
        }

        return "object" == _typeof(e) ? this.each(function () {
          Z.set(this, e);
        }) : V(this, function (t) {
          var n;
          if (o && void 0 === t) return void 0 !== (n = Z.get(o, e)) ? n : void 0 !== (n = ne(o, e)) ? n : void 0;
          this.each(function () {
            Z.set(this, e, t);
          });
        }, null, t, arguments.length > 1, null, !0);
      },
      removeData: function removeData(e) {
        return this.each(function () {
          Z.remove(this, e);
        });
      }
    }), E.extend({
      queue: function queue(e, t, n) {
        var r;
        if (e) return t = (t || "fx") + "queue", r = J.get(e, t), n && (!r || Array.isArray(n) ? r = J.access(e, t, E.makeArray(n)) : r.push(n)), r || [];
      },
      dequeue: function dequeue(e, t) {
        t = t || "fx";

        var n = E.queue(e, t),
            r = n.length,
            i = n.shift(),
            o = E._queueHooks(e, t);

        "inprogress" === i && (i = n.shift(), r--), i && ("fx" === t && n.unshift("inprogress"), delete o.stop, i.call(e, function () {
          E.dequeue(e, t);
        }, o)), !r && o && o.empty.fire();
      },
      _queueHooks: function _queueHooks(e, t) {
        var n = t + "queueHooks";
        return J.get(e, n) || J.access(e, n, {
          empty: E.Callbacks("once memory").add(function () {
            J.remove(e, [t + "queue", n]);
          })
        });
      }
    }), E.fn.extend({
      queue: function queue(e, t) {
        var n = 2;
        return "string" != typeof e && (t = e, e = "fx", n--), arguments.length < n ? E.queue(this[0], e) : void 0 === t ? this : this.each(function () {
          var n = E.queue(this, e, t);
          E._queueHooks(this, e), "fx" === e && "inprogress" !== n[0] && E.dequeue(this, e);
        });
      },
      dequeue: function dequeue(e) {
        return this.each(function () {
          E.dequeue(this, e);
        });
      },
      clearQueue: function clearQueue(e) {
        return this.queue(e || "fx", []);
      },
      promise: function promise(e, t) {
        var n,
            r = 1,
            i = E.Deferred(),
            o = this,
            a = this.length,
            s = function s() {
          --r || i.resolveWith(o, [o]);
        };

        for ("string" != typeof e && (t = e, e = void 0), e = e || "fx"; a--;) {
          (n = J.get(o[a], e + "queueHooks")) && n.empty && (r++, n.empty.add(s));
        }

        return s(), i.promise(t);
      }
    });

    var re = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,
        ie = new RegExp("^(?:([+-])=|)(" + re + ")([a-z%]*)$", "i"),
        oe = ["Top", "Right", "Bottom", "Left"],
        ae = function ae(e, t) {
      return "none" === (e = t || e).style.display || "" === e.style.display && E.contains(e.ownerDocument, e) && "none" === E.css(e, "display");
    },
        se = function se(e, t, n, r) {
      var i,
          o,
          a = {};

      for (o in t) {
        a[o] = e.style[o], e.style[o] = t[o];
      }

      for (o in i = n.apply(e, r || []), t) {
        e.style[o] = a[o];
      }

      return i;
    };

    function ue(e, t, n, r) {
      var i,
          o,
          a = 20,
          s = r ? function () {
        return r.cur();
      } : function () {
        return E.css(e, t, "");
      },
          u = s(),
          c = n && n[3] || (E.cssNumber[t] ? "" : "px"),
          l = (E.cssNumber[t] || "px" !== c && +u) && ie.exec(E.css(e, t));

      if (l && l[3] !== c) {
        for (u /= 2, c = c || l[3], l = +u || 1; a--;) {
          E.style(e, t, l + c), (1 - o) * (1 - (o = s() / u || .5)) <= 0 && (a = 0), l /= o;
        }

        l *= 2, E.style(e, t, l + c), n = n || [];
      }

      return n && (l = +l || +u || 0, i = n[1] ? l + (n[1] + 1) * n[2] : +n[2], r && (r.unit = c, r.start = l, r.end = i)), i;
    }

    var ce = {};

    function le(e) {
      var t,
          n = e.ownerDocument,
          r = e.nodeName,
          i = ce[r];
      return i || (t = n.body.appendChild(n.createElement(r)), i = E.css(t, "display"), t.parentNode.removeChild(t), "none" === i && (i = "block"), ce[r] = i, i);
    }

    function fe(e, t) {
      for (var n, r, i = [], o = 0, a = e.length; o < a; o++) {
        (r = e[o]).style && (n = r.style.display, t ? ("none" === n && (i[o] = J.get(r, "display") || null, i[o] || (r.style.display = "")), "" === r.style.display && ae(r) && (i[o] = le(r))) : "none" !== n && (i[o] = "none", J.set(r, "display", n)));
      }

      for (o = 0; o < a; o++) {
        null != i[o] && (e[o].style.display = i[o]);
      }

      return e;
    }

    E.fn.extend({
      show: function show() {
        return fe(this, !0);
      },
      hide: function hide() {
        return fe(this);
      },
      toggle: function toggle(e) {
        return "boolean" == typeof e ? e ? this.show() : this.hide() : this.each(function () {
          ae(this) ? E(this).show() : E(this).hide();
        });
      }
    });
    var pe = /^(?:checkbox|radio)$/i,
        de = /<([a-z][^\/\0>\x20\t\r\n\f]+)/i,
        he = /^$|^module$|\/(?:java|ecma)script/i,
        ve = {
      option: [1, "<select multiple='multiple'>", "</select>"],
      thead: [1, "<table>", "</table>"],
      col: [2, "<table><colgroup>", "</colgroup></table>"],
      tr: [2, "<table><tbody>", "</tbody></table>"],
      td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],
      _default: [0, "", ""]
    };

    function ge(e, t) {
      var n;
      return n = void 0 !== e.getElementsByTagName ? e.getElementsByTagName(t || "*") : void 0 !== e.querySelectorAll ? e.querySelectorAll(t || "*") : [], void 0 === t || t && I(e, t) ? E.merge([e], n) : n;
    }

    function me(e, t) {
      for (var n = 0, r = e.length; n < r; n++) {
        J.set(e[n], "globalEval", !t || J.get(t[n], "globalEval"));
      }
    }

    ve.optgroup = ve.option, ve.tbody = ve.tfoot = ve.colgroup = ve.caption = ve.thead, ve.th = ve.td;

    var ye,
        _e,
        be = /<|&#?\w+;/;

    function we(e, t, n, r, i) {
      for (var o, a, s, u, c, l, f = t.createDocumentFragment(), p = [], d = 0, h = e.length; d < h; d++) {
        if ((o = e[d]) || 0 === o) if ("object" === T(o)) E.merge(p, o.nodeType ? [o] : o);else if (be.test(o)) {
          for (a = a || f.appendChild(t.createElement("div")), s = (de.exec(o) || ["", ""])[1].toLowerCase(), u = ve[s] || ve._default, a.innerHTML = u[1] + E.htmlPrefilter(o) + u[2], l = u[0]; l--;) {
            a = a.lastChild;
          }

          E.merge(p, a.childNodes), (a = f.firstChild).textContent = "";
        } else p.push(t.createTextNode(o));
      }

      for (f.textContent = "", d = 0; o = p[d++];) {
        if (r && E.inArray(o, r) > -1) i && i.push(o);else if (c = E.contains(o.ownerDocument, o), a = ge(f.appendChild(o), "script"), c && me(a), n) for (l = 0; o = a[l++];) {
          he.test(o.type || "") && n.push(o);
        }
      }

      return f;
    }

    ye = a.createDocumentFragment().appendChild(a.createElement("div")), (_e = a.createElement("input")).setAttribute("type", "radio"), _e.setAttribute("checked", "checked"), _e.setAttribute("name", "t"), ye.appendChild(_e), m.checkClone = ye.cloneNode(!0).cloneNode(!0).lastChild.checked, ye.innerHTML = "<textarea>x</textarea>", m.noCloneChecked = !!ye.cloneNode(!0).lastChild.defaultValue;
    var Te = a.documentElement,
        Ee = /^key/,
        xe = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
        Ce = /^([^.]*)(?:\.(.+)|)/;

    function Ae() {
      return !0;
    }

    function Se() {
      return !1;
    }

    function Oe() {
      try {
        return a.activeElement;
      } catch (e) {}
    }

    function De(e, t, n, r, i, o) {
      var a, s;

      if ("object" == _typeof(t)) {
        for (s in "string" != typeof n && (r = r || n, n = void 0), t) {
          De(e, s, n, r, t[s], o);
        }

        return e;
      }

      if (null == r && null == i ? (i = n, r = n = void 0) : null == i && ("string" == typeof n ? (i = r, r = void 0) : (i = r, r = n, n = void 0)), !1 === i) i = Se;else if (!i) return e;
      return 1 === o && (a = i, (i = function i(e) {
        return E().off(e), a.apply(this, arguments);
      }).guid = a.guid || (a.guid = E.guid++)), e.each(function () {
        E.event.add(this, t, i, r, n);
      });
    }

    E.event = {
      global: {},
      add: function add(e, t, n, r, i) {
        var o,
            a,
            s,
            u,
            c,
            l,
            f,
            p,
            d,
            h,
            v,
            g = J.get(e);
        if (g) for (n.handler && (n = (o = n).handler, i = o.selector), i && E.find.matchesSelector(Te, i), n.guid || (n.guid = E.guid++), (u = g.events) || (u = g.events = {}), (a = g.handle) || (a = g.handle = function (t) {
          return void 0 !== E && E.event.triggered !== t.type ? E.event.dispatch.apply(e, arguments) : void 0;
        }), c = (t = (t || "").match(H) || [""]).length; c--;) {
          d = v = (s = Ce.exec(t[c]) || [])[1], h = (s[2] || "").split(".").sort(), d && (f = E.event.special[d] || {}, d = (i ? f.delegateType : f.bindType) || d, f = E.event.special[d] || {}, l = E.extend({
            type: d,
            origType: v,
            data: r,
            handler: n,
            guid: n.guid,
            selector: i,
            needsContext: i && E.expr.match.needsContext.test(i),
            namespace: h.join(".")
          }, o), (p = u[d]) || ((p = u[d] = []).delegateCount = 0, f.setup && !1 !== f.setup.call(e, r, h, a) || e.addEventListener && e.addEventListener(d, a)), f.add && (f.add.call(e, l), l.handler.guid || (l.handler.guid = n.guid)), i ? p.splice(p.delegateCount++, 0, l) : p.push(l), E.event.global[d] = !0);
        }
      },
      remove: function remove(e, t, n, r, i) {
        var o,
            a,
            s,
            u,
            c,
            l,
            f,
            p,
            d,
            h,
            v,
            g = J.hasData(e) && J.get(e);

        if (g && (u = g.events)) {
          for (c = (t = (t || "").match(H) || [""]).length; c--;) {
            if (d = v = (s = Ce.exec(t[c]) || [])[1], h = (s[2] || "").split(".").sort(), d) {
              for (f = E.event.special[d] || {}, p = u[d = (r ? f.delegateType : f.bindType) || d] || [], s = s[2] && new RegExp("(^|\\.)" + h.join("\\.(?:.*\\.|)") + "(\\.|$)"), a = o = p.length; o--;) {
                l = p[o], !i && v !== l.origType || n && n.guid !== l.guid || s && !s.test(l.namespace) || r && r !== l.selector && ("**" !== r || !l.selector) || (p.splice(o, 1), l.selector && p.delegateCount--, f.remove && f.remove.call(e, l));
              }

              a && !p.length && (f.teardown && !1 !== f.teardown.call(e, h, g.handle) || E.removeEvent(e, d, g.handle), delete u[d]);
            } else for (d in u) {
              E.event.remove(e, d + t[c], n, r, !0);
            }
          }

          E.isEmptyObject(u) && J.remove(e, "handle events");
        }
      },
      dispatch: function dispatch(e) {
        var t,
            n,
            r,
            i,
            o,
            a,
            s = E.event.fix(e),
            u = new Array(arguments.length),
            c = (J.get(this, "events") || {})[s.type] || [],
            l = E.event.special[s.type] || {};

        for (u[0] = s, t = 1; t < arguments.length; t++) {
          u[t] = arguments[t];
        }

        if (s.delegateTarget = this, !l.preDispatch || !1 !== l.preDispatch.call(this, s)) {
          for (a = E.event.handlers.call(this, s, c), t = 0; (i = a[t++]) && !s.isPropagationStopped();) {
            for (s.currentTarget = i.elem, n = 0; (o = i.handlers[n++]) && !s.isImmediatePropagationStopped();) {
              s.rnamespace && !s.rnamespace.test(o.namespace) || (s.handleObj = o, s.data = o.data, void 0 !== (r = ((E.event.special[o.origType] || {}).handle || o.handler).apply(i.elem, u)) && !1 === (s.result = r) && (s.preventDefault(), s.stopPropagation()));
            }
          }

          return l.postDispatch && l.postDispatch.call(this, s), s.result;
        }
      },
      handlers: function handlers(e, t) {
        var n,
            r,
            i,
            o,
            a,
            s = [],
            u = t.delegateCount,
            c = e.target;
        if (u && c.nodeType && !("click" === e.type && e.button >= 1)) for (; c !== this; c = c.parentNode || this) {
          if (1 === c.nodeType && ("click" !== e.type || !0 !== c.disabled)) {
            for (o = [], a = {}, n = 0; n < u; n++) {
              void 0 === a[i = (r = t[n]).selector + " "] && (a[i] = r.needsContext ? E(i, this).index(c) > -1 : E.find(i, this, null, [c]).length), a[i] && o.push(r);
            }

            o.length && s.push({
              elem: c,
              handlers: o
            });
          }
        }
        return c = this, u < t.length && s.push({
          elem: c,
          handlers: t.slice(u)
        }), s;
      },
      addProp: function addProp(e, t) {
        Object.defineProperty(E.Event.prototype, e, {
          enumerable: !0,
          configurable: !0,
          get: y(t) ? function () {
            if (this.originalEvent) return t(this.originalEvent);
          } : function () {
            if (this.originalEvent) return this.originalEvent[e];
          },
          set: function set(t) {
            Object.defineProperty(this, e, {
              enumerable: !0,
              configurable: !0,
              writable: !0,
              value: t
            });
          }
        });
      },
      fix: function fix(e) {
        return e[E.expando] ? e : new E.Event(e);
      },
      special: {
        load: {
          noBubble: !0
        },
        focus: {
          trigger: function trigger() {
            if (this !== Oe() && this.focus) return this.focus(), !1;
          },
          delegateType: "focusin"
        },
        blur: {
          trigger: function trigger() {
            if (this === Oe() && this.blur) return this.blur(), !1;
          },
          delegateType: "focusout"
        },
        click: {
          trigger: function trigger() {
            if ("checkbox" === this.type && this.click && I(this, "input")) return this.click(), !1;
          },
          _default: function _default(e) {
            return I(e.target, "a");
          }
        },
        beforeunload: {
          postDispatch: function postDispatch(e) {
            void 0 !== e.result && e.originalEvent && (e.originalEvent.returnValue = e.result);
          }
        }
      }
    }, E.removeEvent = function (e, t, n) {
      e.removeEventListener && e.removeEventListener(t, n);
    }, E.Event = function (e, t) {
      if (!(this instanceof E.Event)) return new E.Event(e, t);
      e && e.type ? (this.originalEvent = e, this.type = e.type, this.isDefaultPrevented = e.defaultPrevented || void 0 === e.defaultPrevented && !1 === e.returnValue ? Ae : Se, this.target = e.target && 3 === e.target.nodeType ? e.target.parentNode : e.target, this.currentTarget = e.currentTarget, this.relatedTarget = e.relatedTarget) : this.type = e, t && E.extend(this, t), this.timeStamp = e && e.timeStamp || Date.now(), this[E.expando] = !0;
    }, E.Event.prototype = {
      constructor: E.Event,
      isDefaultPrevented: Se,
      isPropagationStopped: Se,
      isImmediatePropagationStopped: Se,
      isSimulated: !1,
      preventDefault: function preventDefault() {
        var e = this.originalEvent;
        this.isDefaultPrevented = Ae, e && !this.isSimulated && e.preventDefault();
      },
      stopPropagation: function stopPropagation() {
        var e = this.originalEvent;
        this.isPropagationStopped = Ae, e && !this.isSimulated && e.stopPropagation();
      },
      stopImmediatePropagation: function stopImmediatePropagation() {
        var e = this.originalEvent;
        this.isImmediatePropagationStopped = Ae, e && !this.isSimulated && e.stopImmediatePropagation(), this.stopPropagation();
      }
    }, E.each({
      altKey: !0,
      bubbles: !0,
      cancelable: !0,
      changedTouches: !0,
      ctrlKey: !0,
      detail: !0,
      eventPhase: !0,
      metaKey: !0,
      pageX: !0,
      pageY: !0,
      shiftKey: !0,
      view: !0,
      "char": !0,
      charCode: !0,
      key: !0,
      keyCode: !0,
      button: !0,
      buttons: !0,
      clientX: !0,
      clientY: !0,
      offsetX: !0,
      offsetY: !0,
      pointerId: !0,
      pointerType: !0,
      screenX: !0,
      screenY: !0,
      targetTouches: !0,
      toElement: !0,
      touches: !0,
      which: function which(e) {
        var t = e.button;
        return null == e.which && Ee.test(e.type) ? null != e.charCode ? e.charCode : e.keyCode : !e.which && void 0 !== t && xe.test(e.type) ? 1 & t ? 1 : 2 & t ? 3 : 4 & t ? 2 : 0 : e.which;
      }
    }, E.event.addProp), E.each({
      mouseenter: "mouseover",
      mouseleave: "mouseout",
      pointerenter: "pointerover",
      pointerleave: "pointerout"
    }, function (e, t) {
      E.event.special[e] = {
        delegateType: t,
        bindType: t,
        handle: function handle(e) {
          var n,
              r = e.relatedTarget,
              i = e.handleObj;
          return r && (r === this || E.contains(this, r)) || (e.type = i.origType, n = i.handler.apply(this, arguments), e.type = t), n;
        }
      };
    }), E.fn.extend({
      on: function on(e, t, n, r) {
        return De(this, e, t, n, r);
      },
      one: function one(e, t, n, r) {
        return De(this, e, t, n, r, 1);
      },
      off: function off(e, t, n) {
        var r, i;
        if (e && e.preventDefault && e.handleObj) return r = e.handleObj, E(e.delegateTarget).off(r.namespace ? r.origType + "." + r.namespace : r.origType, r.selector, r.handler), this;

        if ("object" == _typeof(e)) {
          for (i in e) {
            this.off(i, t, e[i]);
          }

          return this;
        }

        return !1 !== t && "function" != typeof t || (n = t, t = void 0), !1 === n && (n = Se), this.each(function () {
          E.event.remove(this, e, n, t);
        });
      }
    });
    var Ie = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,
        ke = /<script|<style|<link/i,
        Ne = /checked\s*(?:[^=]|=\s*.checked.)/i,
        Le = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

    function je(e, t) {
      return I(e, "table") && I(11 !== t.nodeType ? t : t.firstChild, "tr") && E(e).children("tbody")[0] || e;
    }

    function Pe(e) {
      return e.type = (null !== e.getAttribute("type")) + "/" + e.type, e;
    }

    function Re(e) {
      return "true/" === (e.type || "").slice(0, 5) ? e.type = e.type.slice(5) : e.removeAttribute("type"), e;
    }

    function $e(e, t) {
      var n, r, i, o, a, s, u, c;

      if (1 === t.nodeType) {
        if (J.hasData(e) && (o = J.access(e), a = J.set(t, o), c = o.events)) for (i in delete a.handle, a.events = {}, c) {
          for (n = 0, r = c[i].length; n < r; n++) {
            E.event.add(t, i, c[i][n]);
          }
        }
        Z.hasData(e) && (s = Z.access(e), u = E.extend({}, s), Z.set(t, u));
      }
    }

    function He(e, t, n, r) {
      t = c.apply([], t);
      var i,
          o,
          a,
          s,
          u,
          l,
          f = 0,
          p = e.length,
          d = p - 1,
          h = t[0],
          v = y(h);
      if (v || p > 1 && "string" == typeof h && !m.checkClone && Ne.test(h)) return e.each(function (i) {
        var o = e.eq(i);
        v && (t[0] = h.call(this, i, o.html())), He(o, t, n, r);
      });

      if (p && (o = (i = we(t, e[0].ownerDocument, !1, e, r)).firstChild, 1 === i.childNodes.length && (i = o), o || r)) {
        for (s = (a = E.map(ge(i, "script"), Pe)).length; f < p; f++) {
          u = i, f !== d && (u = E.clone(u, !0, !0), s && E.merge(a, ge(u, "script"))), n.call(e[f], u, f);
        }

        if (s) for (l = a[a.length - 1].ownerDocument, E.map(a, Re), f = 0; f < s; f++) {
          u = a[f], he.test(u.type || "") && !J.access(u, "globalEval") && E.contains(l, u) && (u.src && "module" !== (u.type || "").toLowerCase() ? E._evalUrl && E._evalUrl(u.src) : w(u.textContent.replace(Le, ""), l, u));
        }
      }

      return e;
    }

    function Me(e, t, n) {
      for (var r, i = t ? E.filter(t, e) : e, o = 0; null != (r = i[o]); o++) {
        n || 1 !== r.nodeType || E.cleanData(ge(r)), r.parentNode && (n && E.contains(r.ownerDocument, r) && me(ge(r, "script")), r.parentNode.removeChild(r));
      }

      return e;
    }

    E.extend({
      htmlPrefilter: function htmlPrefilter(e) {
        return e.replace(Ie, "<$1></$2>");
      },
      clone: function clone(e, t, n) {
        var r,
            i,
            o,
            a,
            s,
            u,
            c,
            l = e.cloneNode(!0),
            f = E.contains(e.ownerDocument, e);
        if (!(m.noCloneChecked || 1 !== e.nodeType && 11 !== e.nodeType || E.isXMLDoc(e))) for (a = ge(l), r = 0, i = (o = ge(e)).length; r < i; r++) {
          s = o[r], u = a[r], c = void 0, "input" === (c = u.nodeName.toLowerCase()) && pe.test(s.type) ? u.checked = s.checked : "input" !== c && "textarea" !== c || (u.defaultValue = s.defaultValue);
        }
        if (t) if (n) for (o = o || ge(e), a = a || ge(l), r = 0, i = o.length; r < i; r++) {
          $e(o[r], a[r]);
        } else $e(e, l);
        return (a = ge(l, "script")).length > 0 && me(a, !f && ge(e, "script")), l;
      },
      cleanData: function cleanData(e) {
        for (var t, n, r, i = E.event.special, o = 0; void 0 !== (n = e[o]); o++) {
          if (Q(n)) {
            if (t = n[J.expando]) {
              if (t.events) for (r in t.events) {
                i[r] ? E.event.remove(n, r) : E.removeEvent(n, r, t.handle);
              }
              n[J.expando] = void 0;
            }

            n[Z.expando] && (n[Z.expando] = void 0);
          }
        }
      }
    }), E.fn.extend({
      detach: function detach(e) {
        return Me(this, e, !0);
      },
      remove: function remove(e) {
        return Me(this, e);
      },
      text: function text(e) {
        return V(this, function (e) {
          return void 0 === e ? E.text(this) : this.empty().each(function () {
            1 !== this.nodeType && 11 !== this.nodeType && 9 !== this.nodeType || (this.textContent = e);
          });
        }, null, e, arguments.length);
      },
      append: function append() {
        return He(this, arguments, function (e) {
          1 !== this.nodeType && 11 !== this.nodeType && 9 !== this.nodeType || je(this, e).appendChild(e);
        });
      },
      prepend: function prepend() {
        return He(this, arguments, function (e) {
          if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {
            var t = je(this, e);
            t.insertBefore(e, t.firstChild);
          }
        });
      },
      before: function before() {
        return He(this, arguments, function (e) {
          this.parentNode && this.parentNode.insertBefore(e, this);
        });
      },
      after: function after() {
        return He(this, arguments, function (e) {
          this.parentNode && this.parentNode.insertBefore(e, this.nextSibling);
        });
      },
      empty: function empty() {
        for (var e, t = 0; null != (e = this[t]); t++) {
          1 === e.nodeType && (E.cleanData(ge(e, !1)), e.textContent = "");
        }

        return this;
      },
      clone: function clone(e, t) {
        return e = null != e && e, t = null == t ? e : t, this.map(function () {
          return E.clone(this, e, t);
        });
      },
      html: function html(e) {
        return V(this, function (e) {
          var t = this[0] || {},
              n = 0,
              r = this.length;
          if (void 0 === e && 1 === t.nodeType) return t.innerHTML;

          if ("string" == typeof e && !ke.test(e) && !ve[(de.exec(e) || ["", ""])[1].toLowerCase()]) {
            e = E.htmlPrefilter(e);

            try {
              for (; n < r; n++) {
                1 === (t = this[n] || {}).nodeType && (E.cleanData(ge(t, !1)), t.innerHTML = e);
              }

              t = 0;
            } catch (e) {}
          }

          t && this.empty().append(e);
        }, null, e, arguments.length);
      },
      replaceWith: function replaceWith() {
        var e = [];
        return He(this, arguments, function (t) {
          var n = this.parentNode;
          E.inArray(this, e) < 0 && (E.cleanData(ge(this)), n && n.replaceChild(t, this));
        }, e);
      }
    }), E.each({
      appendTo: "append",
      prependTo: "prepend",
      insertBefore: "before",
      insertAfter: "after",
      replaceAll: "replaceWith"
    }, function (e, t) {
      E.fn[e] = function (e) {
        for (var n, r = [], i = E(e), o = i.length - 1, a = 0; a <= o; a++) {
          n = a === o ? this : this.clone(!0), E(i[a])[t](n), l.apply(r, n.get());
        }

        return this.pushStack(r);
      };
    });

    var Fe = new RegExp("^(" + re + ")(?!px)[a-z%]+$", "i"),
        We = function We(e) {
      var t = e.ownerDocument.defaultView;
      return t && t.opener || (t = n), t.getComputedStyle(e);
    },
        qe = new RegExp(oe.join("|"), "i");

    function Be(e, t, n) {
      var r,
          i,
          o,
          a,
          s = e.style;
      return (n = n || We(e)) && ("" !== (a = n.getPropertyValue(t) || n[t]) || E.contains(e.ownerDocument, e) || (a = E.style(e, t)), !m.pixelBoxStyles() && Fe.test(a) && qe.test(t) && (r = s.width, i = s.minWidth, o = s.maxWidth, s.minWidth = s.maxWidth = s.width = a, a = n.width, s.width = r, s.minWidth = i, s.maxWidth = o)), void 0 !== a ? a + "" : a;
    }

    function Ue(e, t) {
      return {
        get: function get() {
          if (!e()) return (this.get = t).apply(this, arguments);
          delete this.get;
        }
      };
    }

    !function () {
      function e() {
        if (l) {
          c.style.cssText = "position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0", l.style.cssText = "position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%", Te.appendChild(c).appendChild(l);
          var e = n.getComputedStyle(l);
          r = "1%" !== e.top, u = 12 === t(e.marginLeft), l.style.right = "60%", s = 36 === t(e.right), i = 36 === t(e.width), l.style.position = "absolute", o = 36 === l.offsetWidth || "absolute", Te.removeChild(c), l = null;
        }
      }

      function t(e) {
        return Math.round(parseFloat(e));
      }

      var r,
          i,
          o,
          s,
          u,
          c = a.createElement("div"),
          l = a.createElement("div");
      l.style && (l.style.backgroundClip = "content-box", l.cloneNode(!0).style.backgroundClip = "", m.clearCloneStyle = "content-box" === l.style.backgroundClip, E.extend(m, {
        boxSizingReliable: function boxSizingReliable() {
          return e(), i;
        },
        pixelBoxStyles: function pixelBoxStyles() {
          return e(), s;
        },
        pixelPosition: function pixelPosition() {
          return e(), r;
        },
        reliableMarginLeft: function reliableMarginLeft() {
          return e(), u;
        },
        scrollboxSize: function scrollboxSize() {
          return e(), o;
        }
      }));
    }();
    var Ve = /^(none|table(?!-c[ea]).+)/,
        ze = /^--/,
        Ke = {
      position: "absolute",
      visibility: "hidden",
      display: "block"
    },
        Ge = {
      letterSpacing: "0",
      fontWeight: "400"
    },
        Xe = ["Webkit", "Moz", "ms"],
        Qe = a.createElement("div").style;

    function Ye(e) {
      var t = E.cssProps[e];
      return t || (t = E.cssProps[e] = function (e) {
        if (e in Qe) return e;

        for (var t = e[0].toUpperCase() + e.slice(1), n = Xe.length; n--;) {
          if ((e = Xe[n] + t) in Qe) return e;
        }
      }(e) || e), t;
    }

    function Je(e, t, n) {
      var r = ie.exec(t);
      return r ? Math.max(0, r[2] - (n || 0)) + (r[3] || "px") : t;
    }

    function Ze(e, t, n, r, i, o) {
      var a = "width" === t ? 1 : 0,
          s = 0,
          u = 0;
      if (n === (r ? "border" : "content")) return 0;

      for (; a < 4; a += 2) {
        "margin" === n && (u += E.css(e, n + oe[a], !0, i)), r ? ("content" === n && (u -= E.css(e, "padding" + oe[a], !0, i)), "margin" !== n && (u -= E.css(e, "border" + oe[a] + "Width", !0, i))) : (u += E.css(e, "padding" + oe[a], !0, i), "padding" !== n ? u += E.css(e, "border" + oe[a] + "Width", !0, i) : s += E.css(e, "border" + oe[a] + "Width", !0, i));
      }

      return !r && o >= 0 && (u += Math.max(0, Math.ceil(e["offset" + t[0].toUpperCase() + t.slice(1)] - o - u - s - .5))), u;
    }

    function et(e, t, n) {
      var r = We(e),
          i = Be(e, t, r),
          o = "border-box" === E.css(e, "boxSizing", !1, r),
          a = o;

      if (Fe.test(i)) {
        if (!n) return i;
        i = "auto";
      }

      return a = a && (m.boxSizingReliable() || i === e.style[t]), ("auto" === i || !parseFloat(i) && "inline" === E.css(e, "display", !1, r)) && (i = e["offset" + t[0].toUpperCase() + t.slice(1)], a = !0), (i = parseFloat(i) || 0) + Ze(e, t, n || (o ? "border" : "content"), a, r, i) + "px";
    }

    function tt(e, t, n, r, i) {
      return new tt.prototype.init(e, t, n, r, i);
    }

    E.extend({
      cssHooks: {
        opacity: {
          get: function get(e, t) {
            if (t) {
              var n = Be(e, "opacity");
              return "" === n ? "1" : n;
            }
          }
        }
      },
      cssNumber: {
        animationIterationCount: !0,
        columnCount: !0,
        fillOpacity: !0,
        flexGrow: !0,
        flexShrink: !0,
        fontWeight: !0,
        lineHeight: !0,
        opacity: !0,
        order: !0,
        orphans: !0,
        widows: !0,
        zIndex: !0,
        zoom: !0
      },
      cssProps: {},
      style: function style(e, t, n, r) {
        if (e && 3 !== e.nodeType && 8 !== e.nodeType && e.style) {
          var i,
              o,
              a,
              s = X(t),
              u = ze.test(t),
              c = e.style;
          if (u || (t = Ye(s)), a = E.cssHooks[t] || E.cssHooks[s], void 0 === n) return a && "get" in a && void 0 !== (i = a.get(e, !1, r)) ? i : c[t];
          "string" === (o = _typeof(n)) && (i = ie.exec(n)) && i[1] && (n = ue(e, t, i), o = "number"), null != n && n == n && ("number" === o && (n += i && i[3] || (E.cssNumber[s] ? "" : "px")), m.clearCloneStyle || "" !== n || 0 !== t.indexOf("background") || (c[t] = "inherit"), a && "set" in a && void 0 === (n = a.set(e, n, r)) || (u ? c.setProperty(t, n) : c[t] = n));
        }
      },
      css: function css(e, t, n, r) {
        var i,
            o,
            a,
            s = X(t);
        return ze.test(t) || (t = Ye(s)), (a = E.cssHooks[t] || E.cssHooks[s]) && "get" in a && (i = a.get(e, !0, n)), void 0 === i && (i = Be(e, t, r)), "normal" === i && t in Ge && (i = Ge[t]), "" === n || n ? (o = parseFloat(i), !0 === n || isFinite(o) ? o || 0 : i) : i;
      }
    }), E.each(["height", "width"], function (e, t) {
      E.cssHooks[t] = {
        get: function get(e, n, r) {
          if (n) return !Ve.test(E.css(e, "display")) || e.getClientRects().length && e.getBoundingClientRect().width ? et(e, t, r) : se(e, Ke, function () {
            return et(e, t, r);
          });
        },
        set: function set(e, n, r) {
          var i,
              o = We(e),
              a = "border-box" === E.css(e, "boxSizing", !1, o),
              s = r && Ze(e, t, r, a, o);
          return a && m.scrollboxSize() === o.position && (s -= Math.ceil(e["offset" + t[0].toUpperCase() + t.slice(1)] - parseFloat(o[t]) - Ze(e, t, "border", !1, o) - .5)), s && (i = ie.exec(n)) && "px" !== (i[3] || "px") && (e.style[t] = n, n = E.css(e, t)), Je(0, n, s);
        }
      };
    }), E.cssHooks.marginLeft = Ue(m.reliableMarginLeft, function (e, t) {
      if (t) return (parseFloat(Be(e, "marginLeft")) || e.getBoundingClientRect().left - se(e, {
        marginLeft: 0
      }, function () {
        return e.getBoundingClientRect().left;
      })) + "px";
    }), E.each({
      margin: "",
      padding: "",
      border: "Width"
    }, function (e, t) {
      E.cssHooks[e + t] = {
        expand: function expand(n) {
          for (var r = 0, i = {}, o = "string" == typeof n ? n.split(" ") : [n]; r < 4; r++) {
            i[e + oe[r] + t] = o[r] || o[r - 2] || o[0];
          }

          return i;
        }
      }, "margin" !== e && (E.cssHooks[e + t].set = Je);
    }), E.fn.extend({
      css: function css(e, t) {
        return V(this, function (e, t, n) {
          var r,
              i,
              o = {},
              a = 0;

          if (Array.isArray(t)) {
            for (r = We(e), i = t.length; a < i; a++) {
              o[t[a]] = E.css(e, t[a], !1, r);
            }

            return o;
          }

          return void 0 !== n ? E.style(e, t, n) : E.css(e, t);
        }, e, t, arguments.length > 1);
      }
    }), E.Tween = tt, tt.prototype = {
      constructor: tt,
      init: function init(e, t, n, r, i, o) {
        this.elem = e, this.prop = n, this.easing = i || E.easing._default, this.options = t, this.start = this.now = this.cur(), this.end = r, this.unit = o || (E.cssNumber[n] ? "" : "px");
      },
      cur: function cur() {
        var e = tt.propHooks[this.prop];
        return e && e.get ? e.get(this) : tt.propHooks._default.get(this);
      },
      run: function run(e) {
        var t,
            n = tt.propHooks[this.prop];
        return this.options.duration ? this.pos = t = E.easing[this.easing](e, this.options.duration * e, 0, 1, this.options.duration) : this.pos = t = e, this.now = (this.end - this.start) * t + this.start, this.options.step && this.options.step.call(this.elem, this.now, this), n && n.set ? n.set(this) : tt.propHooks._default.set(this), this;
      }
    }, tt.prototype.init.prototype = tt.prototype, tt.propHooks = {
      _default: {
        get: function get(e) {
          var t;
          return 1 !== e.elem.nodeType || null != e.elem[e.prop] && null == e.elem.style[e.prop] ? e.elem[e.prop] : (t = E.css(e.elem, e.prop, "")) && "auto" !== t ? t : 0;
        },
        set: function set(e) {
          E.fx.step[e.prop] ? E.fx.step[e.prop](e) : 1 !== e.elem.nodeType || null == e.elem.style[E.cssProps[e.prop]] && !E.cssHooks[e.prop] ? e.elem[e.prop] = e.now : E.style(e.elem, e.prop, e.now + e.unit);
        }
      }
    }, tt.propHooks.scrollTop = tt.propHooks.scrollLeft = {
      set: function set(e) {
        e.elem.nodeType && e.elem.parentNode && (e.elem[e.prop] = e.now);
      }
    }, E.easing = {
      linear: function linear(e) {
        return e;
      },
      swing: function swing(e) {
        return .5 - Math.cos(e * Math.PI) / 2;
      },
      _default: "swing"
    }, E.fx = tt.prototype.init, E.fx.step = {};
    var nt,
        rt,
        it = /^(?:toggle|show|hide)$/,
        ot = /queueHooks$/;

    function at() {
      rt && (!1 === a.hidden && n.requestAnimationFrame ? n.requestAnimationFrame(at) : n.setTimeout(at, E.fx.interval), E.fx.tick());
    }

    function st() {
      return n.setTimeout(function () {
        nt = void 0;
      }), nt = Date.now();
    }

    function ut(e, t) {
      var n,
          r = 0,
          i = {
        height: e
      };

      for (t = t ? 1 : 0; r < 4; r += 2 - t) {
        i["margin" + (n = oe[r])] = i["padding" + n] = e;
      }

      return t && (i.opacity = i.width = e), i;
    }

    function ct(e, t, n) {
      for (var r, i = (lt.tweeners[t] || []).concat(lt.tweeners["*"]), o = 0, a = i.length; o < a; o++) {
        if (r = i[o].call(n, t, e)) return r;
      }
    }

    function lt(e, t, n) {
      var r,
          i,
          o = 0,
          a = lt.prefilters.length,
          s = E.Deferred().always(function () {
        delete u.elem;
      }),
          u = function u() {
        if (i) return !1;

        for (var t = nt || st(), n = Math.max(0, c.startTime + c.duration - t), r = 1 - (n / c.duration || 0), o = 0, a = c.tweens.length; o < a; o++) {
          c.tweens[o].run(r);
        }

        return s.notifyWith(e, [c, r, n]), r < 1 && a ? n : (a || s.notifyWith(e, [c, 1, 0]), s.resolveWith(e, [c]), !1);
      },
          c = s.promise({
        elem: e,
        props: E.extend({}, t),
        opts: E.extend(!0, {
          specialEasing: {},
          easing: E.easing._default
        }, n),
        originalProperties: t,
        originalOptions: n,
        startTime: nt || st(),
        duration: n.duration,
        tweens: [],
        createTween: function createTween(t, n) {
          var r = E.Tween(e, c.opts, t, n, c.opts.specialEasing[t] || c.opts.easing);
          return c.tweens.push(r), r;
        },
        stop: function stop(t) {
          var n = 0,
              r = t ? c.tweens.length : 0;
          if (i) return this;

          for (i = !0; n < r; n++) {
            c.tweens[n].run(1);
          }

          return t ? (s.notifyWith(e, [c, 1, 0]), s.resolveWith(e, [c, t])) : s.rejectWith(e, [c, t]), this;
        }
      }),
          l = c.props;

      for (!function (e, t) {
        var n, r, i, o, a;

        for (n in e) {
          if (i = t[r = X(n)], o = e[n], Array.isArray(o) && (i = o[1], o = e[n] = o[0]), n !== r && (e[r] = o, delete e[n]), (a = E.cssHooks[r]) && ("expand" in a)) for (n in o = a.expand(o), delete e[r], o) {
            (n in e) || (e[n] = o[n], t[n] = i);
          } else t[r] = i;
        }
      }(l, c.opts.specialEasing); o < a; o++) {
        if (r = lt.prefilters[o].call(c, e, l, c.opts)) return y(r.stop) && (E._queueHooks(c.elem, c.opts.queue).stop = r.stop.bind(r)), r;
      }

      return E.map(l, ct, c), y(c.opts.start) && c.opts.start.call(e, c), c.progress(c.opts.progress).done(c.opts.done, c.opts.complete).fail(c.opts.fail).always(c.opts.always), E.fx.timer(E.extend(u, {
        elem: e,
        anim: c,
        queue: c.opts.queue
      })), c;
    }

    E.Animation = E.extend(lt, {
      tweeners: {
        "*": [function (e, t) {
          var n = this.createTween(e, t);
          return ue(n.elem, e, ie.exec(t), n), n;
        }]
      },
      tweener: function tweener(e, t) {
        y(e) ? (t = e, e = ["*"]) : e = e.match(H);

        for (var n, r = 0, i = e.length; r < i; r++) {
          n = e[r], lt.tweeners[n] = lt.tweeners[n] || [], lt.tweeners[n].unshift(t);
        }
      },
      prefilters: [function (e, t, n) {
        var r,
            i,
            o,
            a,
            s,
            u,
            c,
            l,
            f = "width" in t || "height" in t,
            p = this,
            d = {},
            h = e.style,
            v = e.nodeType && ae(e),
            g = J.get(e, "fxshow");

        for (r in n.queue || (null == (a = E._queueHooks(e, "fx")).unqueued && (a.unqueued = 0, s = a.empty.fire, a.empty.fire = function () {
          a.unqueued || s();
        }), a.unqueued++, p.always(function () {
          p.always(function () {
            a.unqueued--, E.queue(e, "fx").length || a.empty.fire();
          });
        })), t) {
          if (i = t[r], it.test(i)) {
            if (delete t[r], o = o || "toggle" === i, i === (v ? "hide" : "show")) {
              if ("show" !== i || !g || void 0 === g[r]) continue;
              v = !0;
            }

            d[r] = g && g[r] || E.style(e, r);
          }
        }

        if ((u = !E.isEmptyObject(t)) || !E.isEmptyObject(d)) for (r in f && 1 === e.nodeType && (n.overflow = [h.overflow, h.overflowX, h.overflowY], null == (c = g && g.display) && (c = J.get(e, "display")), "none" === (l = E.css(e, "display")) && (c ? l = c : (fe([e], !0), c = e.style.display || c, l = E.css(e, "display"), fe([e]))), ("inline" === l || "inline-block" === l && null != c) && "none" === E.css(e, "float") && (u || (p.done(function () {
          h.display = c;
        }), null == c && (l = h.display, c = "none" === l ? "" : l)), h.display = "inline-block")), n.overflow && (h.overflow = "hidden", p.always(function () {
          h.overflow = n.overflow[0], h.overflowX = n.overflow[1], h.overflowY = n.overflow[2];
        })), u = !1, d) {
          u || (g ? "hidden" in g && (v = g.hidden) : g = J.access(e, "fxshow", {
            display: c
          }), o && (g.hidden = !v), v && fe([e], !0), p.done(function () {
            for (r in v || fe([e]), J.remove(e, "fxshow"), d) {
              E.style(e, r, d[r]);
            }
          })), u = ct(v ? g[r] : 0, r, p), r in g || (g[r] = u.start, v && (u.end = u.start, u.start = 0));
        }
      }],
      prefilter: function prefilter(e, t) {
        t ? lt.prefilters.unshift(e) : lt.prefilters.push(e);
      }
    }), E.speed = function (e, t, n) {
      var r = e && "object" == _typeof(e) ? E.extend({}, e) : {
        complete: n || !n && t || y(e) && e,
        duration: e,
        easing: n && t || t && !y(t) && t
      };
      return E.fx.off ? r.duration = 0 : "number" != typeof r.duration && (r.duration in E.fx.speeds ? r.duration = E.fx.speeds[r.duration] : r.duration = E.fx.speeds._default), null != r.queue && !0 !== r.queue || (r.queue = "fx"), r.old = r.complete, r.complete = function () {
        y(r.old) && r.old.call(this), r.queue && E.dequeue(this, r.queue);
      }, r;
    }, E.fn.extend({
      fadeTo: function fadeTo(e, t, n, r) {
        return this.filter(ae).css("opacity", 0).show().end().animate({
          opacity: t
        }, e, n, r);
      },
      animate: function animate(e, t, n, r) {
        var i = E.isEmptyObject(e),
            o = E.speed(t, n, r),
            a = function a() {
          var t = lt(this, E.extend({}, e), o);
          (i || J.get(this, "finish")) && t.stop(!0);
        };

        return a.finish = a, i || !1 === o.queue ? this.each(a) : this.queue(o.queue, a);
      },
      stop: function stop(e, t, n) {
        var r = function r(e) {
          var t = e.stop;
          delete e.stop, t(n);
        };

        return "string" != typeof e && (n = t, t = e, e = void 0), t && !1 !== e && this.queue(e || "fx", []), this.each(function () {
          var t = !0,
              i = null != e && e + "queueHooks",
              o = E.timers,
              a = J.get(this);
          if (i) a[i] && a[i].stop && r(a[i]);else for (i in a) {
            a[i] && a[i].stop && ot.test(i) && r(a[i]);
          }

          for (i = o.length; i--;) {
            o[i].elem !== this || null != e && o[i].queue !== e || (o[i].anim.stop(n), t = !1, o.splice(i, 1));
          }

          !t && n || E.dequeue(this, e);
        });
      },
      finish: function finish(e) {
        return !1 !== e && (e = e || "fx"), this.each(function () {
          var t,
              n = J.get(this),
              r = n[e + "queue"],
              i = n[e + "queueHooks"],
              o = E.timers,
              a = r ? r.length : 0;

          for (n.finish = !0, E.queue(this, e, []), i && i.stop && i.stop.call(this, !0), t = o.length; t--;) {
            o[t].elem === this && o[t].queue === e && (o[t].anim.stop(!0), o.splice(t, 1));
          }

          for (t = 0; t < a; t++) {
            r[t] && r[t].finish && r[t].finish.call(this);
          }

          delete n.finish;
        });
      }
    }), E.each(["toggle", "show", "hide"], function (e, t) {
      var n = E.fn[t];

      E.fn[t] = function (e, r, i) {
        return null == e || "boolean" == typeof e ? n.apply(this, arguments) : this.animate(ut(t, !0), e, r, i);
      };
    }), E.each({
      slideDown: ut("show"),
      slideUp: ut("hide"),
      slideToggle: ut("toggle"),
      fadeIn: {
        opacity: "show"
      },
      fadeOut: {
        opacity: "hide"
      },
      fadeToggle: {
        opacity: "toggle"
      }
    }, function (e, t) {
      E.fn[e] = function (e, n, r) {
        return this.animate(t, e, n, r);
      };
    }), E.timers = [], E.fx.tick = function () {
      var e,
          t = 0,
          n = E.timers;

      for (nt = Date.now(); t < n.length; t++) {
        (e = n[t])() || n[t] !== e || n.splice(t--, 1);
      }

      n.length || E.fx.stop(), nt = void 0;
    }, E.fx.timer = function (e) {
      E.timers.push(e), E.fx.start();
    }, E.fx.interval = 13, E.fx.start = function () {
      rt || (rt = !0, at());
    }, E.fx.stop = function () {
      rt = null;
    }, E.fx.speeds = {
      slow: 600,
      fast: 200,
      _default: 400
    }, E.fn.delay = function (e, t) {
      return e = E.fx && E.fx.speeds[e] || e, t = t || "fx", this.queue(t, function (t, r) {
        var i = n.setTimeout(t, e);

        r.stop = function () {
          n.clearTimeout(i);
        };
      });
    }, function () {
      var e = a.createElement("input"),
          t = a.createElement("select").appendChild(a.createElement("option"));
      e.type = "checkbox", m.checkOn = "" !== e.value, m.optSelected = t.selected, (e = a.createElement("input")).value = "t", e.type = "radio", m.radioValue = "t" === e.value;
    }();
    var ft,
        pt = E.expr.attrHandle;
    E.fn.extend({
      attr: function attr(e, t) {
        return V(this, E.attr, e, t, arguments.length > 1);
      },
      removeAttr: function removeAttr(e) {
        return this.each(function () {
          E.removeAttr(this, e);
        });
      }
    }), E.extend({
      attr: function attr(e, t, n) {
        var r,
            i,
            o = e.nodeType;
        if (3 !== o && 8 !== o && 2 !== o) return void 0 === e.getAttribute ? E.prop(e, t, n) : (1 === o && E.isXMLDoc(e) || (i = E.attrHooks[t.toLowerCase()] || (E.expr.match.bool.test(t) ? ft : void 0)), void 0 !== n ? null === n ? void E.removeAttr(e, t) : i && "set" in i && void 0 !== (r = i.set(e, n, t)) ? r : (e.setAttribute(t, n + ""), n) : i && "get" in i && null !== (r = i.get(e, t)) ? r : null == (r = E.find.attr(e, t)) ? void 0 : r);
      },
      attrHooks: {
        type: {
          set: function set(e, t) {
            if (!m.radioValue && "radio" === t && I(e, "input")) {
              var n = e.value;
              return e.setAttribute("type", t), n && (e.value = n), t;
            }
          }
        }
      },
      removeAttr: function removeAttr(e, t) {
        var n,
            r = 0,
            i = t && t.match(H);
        if (i && 1 === e.nodeType) for (; n = i[r++];) {
          e.removeAttribute(n);
        }
      }
    }), ft = {
      set: function set(e, t, n) {
        return !1 === t ? E.removeAttr(e, n) : e.setAttribute(n, n), n;
      }
    }, E.each(E.expr.match.bool.source.match(/\w+/g), function (e, t) {
      var n = pt[t] || E.find.attr;

      pt[t] = function (e, t, r) {
        var i,
            o,
            a = t.toLowerCase();
        return r || (o = pt[a], pt[a] = i, i = null != n(e, t, r) ? a : null, pt[a] = o), i;
      };
    });
    var dt = /^(?:input|select|textarea|button)$/i,
        ht = /^(?:a|area)$/i;

    function vt(e) {
      return (e.match(H) || []).join(" ");
    }

    function gt(e) {
      return e.getAttribute && e.getAttribute("class") || "";
    }

    function mt(e) {
      return Array.isArray(e) ? e : "string" == typeof e && e.match(H) || [];
    }

    E.fn.extend({
      prop: function prop(e, t) {
        return V(this, E.prop, e, t, arguments.length > 1);
      },
      removeProp: function removeProp(e) {
        return this.each(function () {
          delete this[E.propFix[e] || e];
        });
      }
    }), E.extend({
      prop: function prop(e, t, n) {
        var r,
            i,
            o = e.nodeType;
        if (3 !== o && 8 !== o && 2 !== o) return 1 === o && E.isXMLDoc(e) || (t = E.propFix[t] || t, i = E.propHooks[t]), void 0 !== n ? i && "set" in i && void 0 !== (r = i.set(e, n, t)) ? r : e[t] = n : i && "get" in i && null !== (r = i.get(e, t)) ? r : e[t];
      },
      propHooks: {
        tabIndex: {
          get: function get(e) {
            var t = E.find.attr(e, "tabindex");
            return t ? parseInt(t, 10) : dt.test(e.nodeName) || ht.test(e.nodeName) && e.href ? 0 : -1;
          }
        }
      },
      propFix: {
        "for": "htmlFor",
        "class": "className"
      }
    }), m.optSelected || (E.propHooks.selected = {
      get: function get(e) {
        var t = e.parentNode;
        return t && t.parentNode && t.parentNode.selectedIndex, null;
      },
      set: function set(e) {
        var t = e.parentNode;
        t && (t.selectedIndex, t.parentNode && t.parentNode.selectedIndex);
      }
    }), E.each(["tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable"], function () {
      E.propFix[this.toLowerCase()] = this;
    }), E.fn.extend({
      addClass: function addClass(e) {
        var t,
            n,
            r,
            i,
            o,
            a,
            s,
            u = 0;
        if (y(e)) return this.each(function (t) {
          E(this).addClass(e.call(this, t, gt(this)));
        });
        if ((t = mt(e)).length) for (; n = this[u++];) {
          if (i = gt(n), r = 1 === n.nodeType && " " + vt(i) + " ") {
            for (a = 0; o = t[a++];) {
              r.indexOf(" " + o + " ") < 0 && (r += o + " ");
            }

            i !== (s = vt(r)) && n.setAttribute("class", s);
          }
        }
        return this;
      },
      removeClass: function removeClass(e) {
        var t,
            n,
            r,
            i,
            o,
            a,
            s,
            u = 0;
        if (y(e)) return this.each(function (t) {
          E(this).removeClass(e.call(this, t, gt(this)));
        });
        if (!arguments.length) return this.attr("class", "");
        if ((t = mt(e)).length) for (; n = this[u++];) {
          if (i = gt(n), r = 1 === n.nodeType && " " + vt(i) + " ") {
            for (a = 0; o = t[a++];) {
              for (; r.indexOf(" " + o + " ") > -1;) {
                r = r.replace(" " + o + " ", " ");
              }
            }

            i !== (s = vt(r)) && n.setAttribute("class", s);
          }
        }
        return this;
      },
      toggleClass: function toggleClass(e, t) {
        var n = _typeof(e),
            r = "string" === n || Array.isArray(e);

        return "boolean" == typeof t && r ? t ? this.addClass(e) : this.removeClass(e) : y(e) ? this.each(function (n) {
          E(this).toggleClass(e.call(this, n, gt(this), t), t);
        }) : this.each(function () {
          var t, i, o, a;
          if (r) for (i = 0, o = E(this), a = mt(e); t = a[i++];) {
            o.hasClass(t) ? o.removeClass(t) : o.addClass(t);
          } else void 0 !== e && "boolean" !== n || ((t = gt(this)) && J.set(this, "__className__", t), this.setAttribute && this.setAttribute("class", t || !1 === e ? "" : J.get(this, "__className__") || ""));
        });
      },
      hasClass: function hasClass(e) {
        var t,
            n,
            r = 0;

        for (t = " " + e + " "; n = this[r++];) {
          if (1 === n.nodeType && (" " + vt(gt(n)) + " ").indexOf(t) > -1) return !0;
        }

        return !1;
      }
    });
    var yt = /\r/g;
    E.fn.extend({
      val: function val(e) {
        var t,
            n,
            r,
            i = this[0];
        return arguments.length ? (r = y(e), this.each(function (n) {
          var i;
          1 === this.nodeType && (null == (i = r ? e.call(this, n, E(this).val()) : e) ? i = "" : "number" == typeof i ? i += "" : Array.isArray(i) && (i = E.map(i, function (e) {
            return null == e ? "" : e + "";
          })), (t = E.valHooks[this.type] || E.valHooks[this.nodeName.toLowerCase()]) && "set" in t && void 0 !== t.set(this, i, "value") || (this.value = i));
        })) : i ? (t = E.valHooks[i.type] || E.valHooks[i.nodeName.toLowerCase()]) && "get" in t && void 0 !== (n = t.get(i, "value")) ? n : "string" == typeof (n = i.value) ? n.replace(yt, "") : null == n ? "" : n : void 0;
      }
    }), E.extend({
      valHooks: {
        option: {
          get: function get(e) {
            var t = E.find.attr(e, "value");
            return null != t ? t : vt(E.text(e));
          }
        },
        select: {
          get: function get(e) {
            var t,
                n,
                r,
                i = e.options,
                o = e.selectedIndex,
                a = "select-one" === e.type,
                s = a ? null : [],
                u = a ? o + 1 : i.length;

            for (r = o < 0 ? u : a ? o : 0; r < u; r++) {
              if (((n = i[r]).selected || r === o) && !n.disabled && (!n.parentNode.disabled || !I(n.parentNode, "optgroup"))) {
                if (t = E(n).val(), a) return t;
                s.push(t);
              }
            }

            return s;
          },
          set: function set(e, t) {
            for (var n, r, i = e.options, o = E.makeArray(t), a = i.length; a--;) {
              ((r = i[a]).selected = E.inArray(E.valHooks.option.get(r), o) > -1) && (n = !0);
            }

            return n || (e.selectedIndex = -1), o;
          }
        }
      }
    }), E.each(["radio", "checkbox"], function () {
      E.valHooks[this] = {
        set: function set(e, t) {
          if (Array.isArray(t)) return e.checked = E.inArray(E(e).val(), t) > -1;
        }
      }, m.checkOn || (E.valHooks[this].get = function (e) {
        return null === e.getAttribute("value") ? "on" : e.value;
      });
    }), m.focusin = "onfocusin" in n;

    var _t = /^(?:focusinfocus|focusoutblur)$/,
        bt = function bt(e) {
      e.stopPropagation();
    };

    E.extend(E.event, {
      trigger: function trigger(e, t, r, i) {
        var o,
            s,
            u,
            c,
            l,
            f,
            p,
            d,
            v = [r || a],
            g = h.call(e, "type") ? e.type : e,
            m = h.call(e, "namespace") ? e.namespace.split(".") : [];

        if (s = d = u = r = r || a, 3 !== r.nodeType && 8 !== r.nodeType && !_t.test(g + E.event.triggered) && (g.indexOf(".") > -1 && (m = g.split("."), g = m.shift(), m.sort()), l = g.indexOf(":") < 0 && "on" + g, (e = e[E.expando] ? e : new E.Event(g, "object" == _typeof(e) && e)).isTrigger = i ? 2 : 3, e.namespace = m.join("."), e.rnamespace = e.namespace ? new RegExp("(^|\\.)" + m.join("\\.(?:.*\\.|)") + "(\\.|$)") : null, e.result = void 0, e.target || (e.target = r), t = null == t ? [e] : E.makeArray(t, [e]), p = E.event.special[g] || {}, i || !p.trigger || !1 !== p.trigger.apply(r, t))) {
          if (!i && !p.noBubble && !_(r)) {
            for (c = p.delegateType || g, _t.test(c + g) || (s = s.parentNode); s; s = s.parentNode) {
              v.push(s), u = s;
            }

            u === (r.ownerDocument || a) && v.push(u.defaultView || u.parentWindow || n);
          }

          for (o = 0; (s = v[o++]) && !e.isPropagationStopped();) {
            d = s, e.type = o > 1 ? c : p.bindType || g, (f = (J.get(s, "events") || {})[e.type] && J.get(s, "handle")) && f.apply(s, t), (f = l && s[l]) && f.apply && Q(s) && (e.result = f.apply(s, t), !1 === e.result && e.preventDefault());
          }

          return e.type = g, i || e.isDefaultPrevented() || p._default && !1 !== p._default.apply(v.pop(), t) || !Q(r) || l && y(r[g]) && !_(r) && ((u = r[l]) && (r[l] = null), E.event.triggered = g, e.isPropagationStopped() && d.addEventListener(g, bt), r[g](), e.isPropagationStopped() && d.removeEventListener(g, bt), E.event.triggered = void 0, u && (r[l] = u)), e.result;
        }
      },
      simulate: function simulate(e, t, n) {
        var r = E.extend(new E.Event(), n, {
          type: e,
          isSimulated: !0
        });
        E.event.trigger(r, null, t);
      }
    }), E.fn.extend({
      trigger: function trigger(e, t) {
        return this.each(function () {
          E.event.trigger(e, t, this);
        });
      },
      triggerHandler: function triggerHandler(e, t) {
        var n = this[0];
        if (n) return E.event.trigger(e, t, n, !0);
      }
    }), m.focusin || E.each({
      focus: "focusin",
      blur: "focusout"
    }, function (e, t) {
      var n = function n(e) {
        E.event.simulate(t, e.target, E.event.fix(e));
      };

      E.event.special[t] = {
        setup: function setup() {
          var r = this.ownerDocument || this,
              i = J.access(r, t);
          i || r.addEventListener(e, n, !0), J.access(r, t, (i || 0) + 1);
        },
        teardown: function teardown() {
          var r = this.ownerDocument || this,
              i = J.access(r, t) - 1;
          i ? J.access(r, t, i) : (r.removeEventListener(e, n, !0), J.remove(r, t));
        }
      };
    });
    var wt = n.location,
        Tt = Date.now(),
        Et = /\?/;

    E.parseXML = function (e) {
      var t;
      if (!e || "string" != typeof e) return null;

      try {
        t = new n.DOMParser().parseFromString(e, "text/xml");
      } catch (e) {
        t = void 0;
      }

      return t && !t.getElementsByTagName("parsererror").length || E.error("Invalid XML: " + e), t;
    };

    var xt = /\[\]$/,
        Ct = /\r?\n/g,
        At = /^(?:submit|button|image|reset|file)$/i,
        St = /^(?:input|select|textarea|keygen)/i;

    function Ot(e, t, n, r) {
      var i;
      if (Array.isArray(t)) E.each(t, function (t, i) {
        n || xt.test(e) ? r(e, i) : Ot(e + "[" + ("object" == _typeof(i) && null != i ? t : "") + "]", i, n, r);
      });else if (n || "object" !== T(t)) r(e, t);else for (i in t) {
        Ot(e + "[" + i + "]", t[i], n, r);
      }
    }

    E.param = function (e, t) {
      var n,
          r = [],
          i = function i(e, t) {
        var n = y(t) ? t() : t;
        r[r.length] = encodeURIComponent(e) + "=" + encodeURIComponent(null == n ? "" : n);
      };

      if (Array.isArray(e) || e.jquery && !E.isPlainObject(e)) E.each(e, function () {
        i(this.name, this.value);
      });else for (n in e) {
        Ot(n, e[n], t, i);
      }
      return r.join("&");
    }, E.fn.extend({
      serialize: function serialize() {
        return E.param(this.serializeArray());
      },
      serializeArray: function serializeArray() {
        return this.map(function () {
          var e = E.prop(this, "elements");
          return e ? E.makeArray(e) : this;
        }).filter(function () {
          var e = this.type;
          return this.name && !E(this).is(":disabled") && St.test(this.nodeName) && !At.test(e) && (this.checked || !pe.test(e));
        }).map(function (e, t) {
          var n = E(this).val();
          return null == n ? null : Array.isArray(n) ? E.map(n, function (e) {
            return {
              name: t.name,
              value: e.replace(Ct, "\r\n")
            };
          }) : {
            name: t.name,
            value: n.replace(Ct, "\r\n")
          };
        }).get();
      }
    });
    var Dt = /%20/g,
        It = /#.*$/,
        kt = /([?&])_=[^&]*/,
        Nt = /^(.*?):[ \t]*([^\r\n]*)$/gm,
        Lt = /^(?:GET|HEAD)$/,
        jt = /^\/\//,
        Pt = {},
        Rt = {},
        $t = "*/".concat("*"),
        Ht = a.createElement("a");

    function Mt(e) {
      return function (t, n) {
        "string" != typeof t && (n = t, t = "*");
        var r,
            i = 0,
            o = t.toLowerCase().match(H) || [];
        if (y(n)) for (; r = o[i++];) {
          "+" === r[0] ? (r = r.slice(1) || "*", (e[r] = e[r] || []).unshift(n)) : (e[r] = e[r] || []).push(n);
        }
      };
    }

    function Ft(e, t, n, r) {
      var i = {},
          o = e === Rt;

      function a(s) {
        var u;
        return i[s] = !0, E.each(e[s] || [], function (e, s) {
          var c = s(t, n, r);
          return "string" != typeof c || o || i[c] ? o ? !(u = c) : void 0 : (t.dataTypes.unshift(c), a(c), !1);
        }), u;
      }

      return a(t.dataTypes[0]) || !i["*"] && a("*");
    }

    function Wt(e, t) {
      var n,
          r,
          i = E.ajaxSettings.flatOptions || {};

      for (n in t) {
        void 0 !== t[n] && ((i[n] ? e : r || (r = {}))[n] = t[n]);
      }

      return r && E.extend(!0, e, r), e;
    }

    Ht.href = wt.href, E.extend({
      active: 0,
      lastModified: {},
      etag: {},
      ajaxSettings: {
        url: wt.href,
        type: "GET",
        isLocal: /^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(wt.protocol),
        global: !0,
        processData: !0,
        async: !0,
        contentType: "application/x-www-form-urlencoded; charset=UTF-8",
        accepts: {
          "*": $t,
          text: "text/plain",
          html: "text/html",
          xml: "application/xml, text/xml",
          json: "application/json, text/javascript"
        },
        contents: {
          xml: /\bxml\b/,
          html: /\bhtml/,
          json: /\bjson\b/
        },
        responseFields: {
          xml: "responseXML",
          text: "responseText",
          json: "responseJSON"
        },
        converters: {
          "* text": String,
          "text html": !0,
          "text json": JSON.parse,
          "text xml": E.parseXML
        },
        flatOptions: {
          url: !0,
          context: !0
        }
      },
      ajaxSetup: function ajaxSetup(e, t) {
        return t ? Wt(Wt(e, E.ajaxSettings), t) : Wt(E.ajaxSettings, e);
      },
      ajaxPrefilter: Mt(Pt),
      ajaxTransport: Mt(Rt),
      ajax: function ajax(e, t) {
        "object" == _typeof(e) && (t = e, e = void 0), t = t || {};

        var r,
            i,
            o,
            s,
            u,
            c,
            l,
            f,
            p,
            d,
            h = E.ajaxSetup({}, t),
            v = h.context || h,
            g = h.context && (v.nodeType || v.jquery) ? E(v) : E.event,
            m = E.Deferred(),
            y = E.Callbacks("once memory"),
            _ = h.statusCode || {},
            b = {},
            w = {},
            T = "canceled",
            x = {
          readyState: 0,
          getResponseHeader: function getResponseHeader(e) {
            var t;

            if (l) {
              if (!s) for (s = {}; t = Nt.exec(o);) {
                s[t[1].toLowerCase()] = t[2];
              }
              t = s[e.toLowerCase()];
            }

            return null == t ? null : t;
          },
          getAllResponseHeaders: function getAllResponseHeaders() {
            return l ? o : null;
          },
          setRequestHeader: function setRequestHeader(e, t) {
            return null == l && (e = w[e.toLowerCase()] = w[e.toLowerCase()] || e, b[e] = t), this;
          },
          overrideMimeType: function overrideMimeType(e) {
            return null == l && (h.mimeType = e), this;
          },
          statusCode: function statusCode(e) {
            var t;
            if (e) if (l) x.always(e[x.status]);else for (t in e) {
              _[t] = [_[t], e[t]];
            }
            return this;
          },
          abort: function abort(e) {
            var t = e || T;
            return r && r.abort(t), C(0, t), this;
          }
        };

        if (m.promise(x), h.url = ((e || h.url || wt.href) + "").replace(jt, wt.protocol + "//"), h.type = t.method || t.type || h.method || h.type, h.dataTypes = (h.dataType || "*").toLowerCase().match(H) || [""], null == h.crossDomain) {
          c = a.createElement("a");

          try {
            c.href = h.url, c.href = c.href, h.crossDomain = Ht.protocol + "//" + Ht.host != c.protocol + "//" + c.host;
          } catch (e) {
            h.crossDomain = !0;
          }
        }

        if (h.data && h.processData && "string" != typeof h.data && (h.data = E.param(h.data, h.traditional)), Ft(Pt, h, t, x), l) return x;

        for (p in (f = E.event && h.global) && 0 == E.active++ && E.event.trigger("ajaxStart"), h.type = h.type.toUpperCase(), h.hasContent = !Lt.test(h.type), i = h.url.replace(It, ""), h.hasContent ? h.data && h.processData && 0 === (h.contentType || "").indexOf("application/x-www-form-urlencoded") && (h.data = h.data.replace(Dt, "+")) : (d = h.url.slice(i.length), h.data && (h.processData || "string" == typeof h.data) && (i += (Et.test(i) ? "&" : "?") + h.data, delete h.data), !1 === h.cache && (i = i.replace(kt, "$1"), d = (Et.test(i) ? "&" : "?") + "_=" + Tt++ + d), h.url = i + d), h.ifModified && (E.lastModified[i] && x.setRequestHeader("If-Modified-Since", E.lastModified[i]), E.etag[i] && x.setRequestHeader("If-None-Match", E.etag[i])), (h.data && h.hasContent && !1 !== h.contentType || t.contentType) && x.setRequestHeader("Content-Type", h.contentType), x.setRequestHeader("Accept", h.dataTypes[0] && h.accepts[h.dataTypes[0]] ? h.accepts[h.dataTypes[0]] + ("*" !== h.dataTypes[0] ? ", " + $t + "; q=0.01" : "") : h.accepts["*"]), h.headers) {
          x.setRequestHeader(p, h.headers[p]);
        }

        if (h.beforeSend && (!1 === h.beforeSend.call(v, x, h) || l)) return x.abort();

        if (T = "abort", y.add(h.complete), x.done(h.success), x.fail(h.error), r = Ft(Rt, h, t, x)) {
          if (x.readyState = 1, f && g.trigger("ajaxSend", [x, h]), l) return x;
          h.async && h.timeout > 0 && (u = n.setTimeout(function () {
            x.abort("timeout");
          }, h.timeout));

          try {
            l = !1, r.send(b, C);
          } catch (e) {
            if (l) throw e;
            C(-1, e);
          }
        } else C(-1, "No Transport");

        function C(e, t, a, s) {
          var c,
              p,
              d,
              b,
              w,
              T = t;
          l || (l = !0, u && n.clearTimeout(u), r = void 0, o = s || "", x.readyState = e > 0 ? 4 : 0, c = e >= 200 && e < 300 || 304 === e, a && (b = function (e, t, n) {
            for (var r, i, o, a, s = e.contents, u = e.dataTypes; "*" === u[0];) {
              u.shift(), void 0 === r && (r = e.mimeType || t.getResponseHeader("Content-Type"));
            }

            if (r) for (i in s) {
              if (s[i] && s[i].test(r)) {
                u.unshift(i);
                break;
              }
            }
            if (u[0] in n) o = u[0];else {
              for (i in n) {
                if (!u[0] || e.converters[i + " " + u[0]]) {
                  o = i;
                  break;
                }

                a || (a = i);
              }

              o = o || a;
            }
            if (o) return o !== u[0] && u.unshift(o), n[o];
          }(h, x, a)), b = function (e, t, n, r) {
            var i,
                o,
                a,
                s,
                u,
                c = {},
                l = e.dataTypes.slice();
            if (l[1]) for (a in e.converters) {
              c[a.toLowerCase()] = e.converters[a];
            }

            for (o = l.shift(); o;) {
              if (e.responseFields[o] && (n[e.responseFields[o]] = t), !u && r && e.dataFilter && (t = e.dataFilter(t, e.dataType)), u = o, o = l.shift()) if ("*" === o) o = u;else if ("*" !== u && u !== o) {
                if (!(a = c[u + " " + o] || c["* " + o])) for (i in c) {
                  if ((s = i.split(" "))[1] === o && (a = c[u + " " + s[0]] || c["* " + s[0]])) {
                    !0 === a ? a = c[i] : !0 !== c[i] && (o = s[0], l.unshift(s[1]));
                    break;
                  }
                }
                if (!0 !== a) if (a && e["throws"]) t = a(t);else try {
                  t = a(t);
                } catch (e) {
                  return {
                    state: "parsererror",
                    error: a ? e : "No conversion from " + u + " to " + o
                  };
                }
              }
            }

            return {
              state: "success",
              data: t
            };
          }(h, b, x, c), c ? (h.ifModified && ((w = x.getResponseHeader("Last-Modified")) && (E.lastModified[i] = w), (w = x.getResponseHeader("etag")) && (E.etag[i] = w)), 204 === e || "HEAD" === h.type ? T = "nocontent" : 304 === e ? T = "notmodified" : (T = b.state, p = b.data, c = !(d = b.error))) : (d = T, !e && T || (T = "error", e < 0 && (e = 0))), x.status = e, x.statusText = (t || T) + "", c ? m.resolveWith(v, [p, T, x]) : m.rejectWith(v, [x, T, d]), x.statusCode(_), _ = void 0, f && g.trigger(c ? "ajaxSuccess" : "ajaxError", [x, h, c ? p : d]), y.fireWith(v, [x, T]), f && (g.trigger("ajaxComplete", [x, h]), --E.active || E.event.trigger("ajaxStop")));
        }

        return x;
      },
      getJSON: function getJSON(e, t, n) {
        return E.get(e, t, n, "json");
      },
      getScript: function getScript(e, t) {
        return E.get(e, void 0, t, "script");
      }
    }), E.each(["get", "post"], function (e, t) {
      E[t] = function (e, n, r, i) {
        return y(n) && (i = i || r, r = n, n = void 0), E.ajax(E.extend({
          url: e,
          type: t,
          dataType: i,
          data: n,
          success: r
        }, E.isPlainObject(e) && e));
      };
    }), E._evalUrl = function (e) {
      return E.ajax({
        url: e,
        type: "GET",
        dataType: "script",
        cache: !0,
        async: !1,
        global: !1,
        "throws": !0
      });
    }, E.fn.extend({
      wrapAll: function wrapAll(e) {
        var t;
        return this[0] && (y(e) && (e = e.call(this[0])), t = E(e, this[0].ownerDocument).eq(0).clone(!0), this[0].parentNode && t.insertBefore(this[0]), t.map(function () {
          for (var e = this; e.firstElementChild;) {
            e = e.firstElementChild;
          }

          return e;
        }).append(this)), this;
      },
      wrapInner: function wrapInner(e) {
        return y(e) ? this.each(function (t) {
          E(this).wrapInner(e.call(this, t));
        }) : this.each(function () {
          var t = E(this),
              n = t.contents();
          n.length ? n.wrapAll(e) : t.append(e);
        });
      },
      wrap: function wrap(e) {
        var t = y(e);
        return this.each(function (n) {
          E(this).wrapAll(t ? e.call(this, n) : e);
        });
      },
      unwrap: function unwrap(e) {
        return this.parent(e).not("body").each(function () {
          E(this).replaceWith(this.childNodes);
        }), this;
      }
    }), E.expr.pseudos.hidden = function (e) {
      return !E.expr.pseudos.visible(e);
    }, E.expr.pseudos.visible = function (e) {
      return !!(e.offsetWidth || e.offsetHeight || e.getClientRects().length);
    }, E.ajaxSettings.xhr = function () {
      try {
        return new n.XMLHttpRequest();
      } catch (e) {}
    };
    var qt = {
      0: 200,
      1223: 204
    },
        Bt = E.ajaxSettings.xhr();
    m.cors = !!Bt && "withCredentials" in Bt, m.ajax = Bt = !!Bt, E.ajaxTransport(function (e) {
      var _t3, r;

      if (m.cors || Bt && !e.crossDomain) return {
        send: function send(i, o) {
          var a,
              s = e.xhr();
          if (s.open(e.type, e.url, e.async, e.username, e.password), e.xhrFields) for (a in e.xhrFields) {
            s[a] = e.xhrFields[a];
          }

          for (a in e.mimeType && s.overrideMimeType && s.overrideMimeType(e.mimeType), e.crossDomain || i["X-Requested-With"] || (i["X-Requested-With"] = "XMLHttpRequest"), i) {
            s.setRequestHeader(a, i[a]);
          }

          _t3 = function t(e) {
            return function () {
              _t3 && (_t3 = r = s.onload = s.onerror = s.onabort = s.ontimeout = s.onreadystatechange = null, "abort" === e ? s.abort() : "error" === e ? "number" != typeof s.status ? o(0, "error") : o(s.status, s.statusText) : o(qt[s.status] || s.status, s.statusText, "text" !== (s.responseType || "text") || "string" != typeof s.responseText ? {
                binary: s.response
              } : {
                text: s.responseText
              }, s.getAllResponseHeaders()));
            };
          }, s.onload = _t3(), r = s.onerror = s.ontimeout = _t3("error"), void 0 !== s.onabort ? s.onabort = r : s.onreadystatechange = function () {
            4 === s.readyState && n.setTimeout(function () {
              _t3 && r();
            });
          }, _t3 = _t3("abort");

          try {
            s.send(e.hasContent && e.data || null);
          } catch (e) {
            if (_t3) throw e;
          }
        },
        abort: function abort() {
          _t3 && _t3();
        }
      };
    }), E.ajaxPrefilter(function (e) {
      e.crossDomain && (e.contents.script = !1);
    }), E.ajaxSetup({
      accepts: {
        script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
      },
      contents: {
        script: /\b(?:java|ecma)script\b/
      },
      converters: {
        "text script": function textScript(e) {
          return E.globalEval(e), e;
        }
      }
    }), E.ajaxPrefilter("script", function (e) {
      void 0 === e.cache && (e.cache = !1), e.crossDomain && (e.type = "GET");
    }), E.ajaxTransport("script", function (e) {
      var t, _n2;

      if (e.crossDomain) return {
        send: function send(r, i) {
          t = E("<script>").prop({
            charset: e.scriptCharset,
            src: e.url
          }).on("load error", _n2 = function n(e) {
            t.remove(), _n2 = null, e && i("error" === e.type ? 404 : 200, e.type);
          }), a.head.appendChild(t[0]);
        },
        abort: function abort() {
          _n2 && _n2();
        }
      };
    });
    var Ut,
        Vt = [],
        zt = /(=)\?(?=&|$)|\?\?/;
    E.ajaxSetup({
      jsonp: "callback",
      jsonpCallback: function jsonpCallback() {
        var e = Vt.pop() || E.expando + "_" + Tt++;
        return this[e] = !0, e;
      }
    }), E.ajaxPrefilter("json jsonp", function (e, t, r) {
      var i,
          o,
          a,
          s = !1 !== e.jsonp && (zt.test(e.url) ? "url" : "string" == typeof e.data && 0 === (e.contentType || "").indexOf("application/x-www-form-urlencoded") && zt.test(e.data) && "data");
      if (s || "jsonp" === e.dataTypes[0]) return i = e.jsonpCallback = y(e.jsonpCallback) ? e.jsonpCallback() : e.jsonpCallback, s ? e[s] = e[s].replace(zt, "$1" + i) : !1 !== e.jsonp && (e.url += (Et.test(e.url) ? "&" : "?") + e.jsonp + "=" + i), e.converters["script json"] = function () {
        return a || E.error(i + " was not called"), a[0];
      }, e.dataTypes[0] = "json", o = n[i], n[i] = function () {
        a = arguments;
      }, r.always(function () {
        void 0 === o ? E(n).removeProp(i) : n[i] = o, e[i] && (e.jsonpCallback = t.jsonpCallback, Vt.push(i)), a && y(o) && o(a[0]), a = o = void 0;
      }), "script";
    }), m.createHTMLDocument = ((Ut = a.implementation.createHTMLDocument("").body).innerHTML = "<form></form><form></form>", 2 === Ut.childNodes.length), E.parseHTML = function (e, t, n) {
      return "string" != typeof e ? [] : ("boolean" == typeof t && (n = t, t = !1), t || (m.createHTMLDocument ? ((r = (t = a.implementation.createHTMLDocument("")).createElement("base")).href = a.location.href, t.head.appendChild(r)) : t = a), o = !n && [], (i = k.exec(e)) ? [t.createElement(i[1])] : (i = we([e], t, o), o && o.length && E(o).remove(), E.merge([], i.childNodes)));
      var r, i, o;
    }, E.fn.load = function (e, t, n) {
      var r,
          i,
          o,
          a = this,
          s = e.indexOf(" ");
      return s > -1 && (r = vt(e.slice(s)), e = e.slice(0, s)), y(t) ? (n = t, t = void 0) : t && "object" == _typeof(t) && (i = "POST"), a.length > 0 && E.ajax({
        url: e,
        type: i || "GET",
        dataType: "html",
        data: t
      }).done(function (e) {
        o = arguments, a.html(r ? E("<div>").append(E.parseHTML(e)).find(r) : e);
      }).always(n && function (e, t) {
        a.each(function () {
          n.apply(this, o || [e.responseText, t, e]);
        });
      }), this;
    }, E.each(["ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend"], function (e, t) {
      E.fn[t] = function (e) {
        return this.on(t, e);
      };
    }), E.expr.pseudos.animated = function (e) {
      return E.grep(E.timers, function (t) {
        return e === t.elem;
      }).length;
    }, E.offset = {
      setOffset: function setOffset(e, t, n) {
        var r,
            i,
            o,
            a,
            s,
            u,
            c = E.css(e, "position"),
            l = E(e),
            f = {};
        "static" === c && (e.style.position = "relative"), s = l.offset(), o = E.css(e, "top"), u = E.css(e, "left"), ("absolute" === c || "fixed" === c) && (o + u).indexOf("auto") > -1 ? (a = (r = l.position()).top, i = r.left) : (a = parseFloat(o) || 0, i = parseFloat(u) || 0), y(t) && (t = t.call(e, n, E.extend({}, s))), null != t.top && (f.top = t.top - s.top + a), null != t.left && (f.left = t.left - s.left + i), "using" in t ? t.using.call(e, f) : l.css(f);
      }
    }, E.fn.extend({
      offset: function offset(e) {
        if (arguments.length) return void 0 === e ? this : this.each(function (t) {
          E.offset.setOffset(this, e, t);
        });
        var t,
            n,
            r = this[0];
        return r ? r.getClientRects().length ? (t = r.getBoundingClientRect(), n = r.ownerDocument.defaultView, {
          top: t.top + n.pageYOffset,
          left: t.left + n.pageXOffset
        }) : {
          top: 0,
          left: 0
        } : void 0;
      },
      position: function position() {
        if (this[0]) {
          var e,
              t,
              n,
              r = this[0],
              i = {
            top: 0,
            left: 0
          };
          if ("fixed" === E.css(r, "position")) t = r.getBoundingClientRect();else {
            for (t = this.offset(), n = r.ownerDocument, e = r.offsetParent || n.documentElement; e && (e === n.body || e === n.documentElement) && "static" === E.css(e, "position");) {
              e = e.parentNode;
            }

            e && e !== r && 1 === e.nodeType && ((i = E(e).offset()).top += E.css(e, "borderTopWidth", !0), i.left += E.css(e, "borderLeftWidth", !0));
          }
          return {
            top: t.top - i.top - E.css(r, "marginTop", !0),
            left: t.left - i.left - E.css(r, "marginLeft", !0)
          };
        }
      },
      offsetParent: function offsetParent() {
        return this.map(function () {
          for (var e = this.offsetParent; e && "static" === E.css(e, "position");) {
            e = e.offsetParent;
          }

          return e || Te;
        });
      }
    }), E.each({
      scrollLeft: "pageXOffset",
      scrollTop: "pageYOffset"
    }, function (e, t) {
      var n = "pageYOffset" === t;

      E.fn[e] = function (r) {
        return V(this, function (e, r, i) {
          var o;
          if (_(e) ? o = e : 9 === e.nodeType && (o = e.defaultView), void 0 === i) return o ? o[t] : e[r];
          o ? o.scrollTo(n ? o.pageXOffset : i, n ? i : o.pageYOffset) : e[r] = i;
        }, e, r, arguments.length);
      };
    }), E.each(["top", "left"], function (e, t) {
      E.cssHooks[t] = Ue(m.pixelPosition, function (e, n) {
        if (n) return n = Be(e, t), Fe.test(n) ? E(e).position()[t] + "px" : n;
      });
    }), E.each({
      Height: "height",
      Width: "width"
    }, function (e, t) {
      E.each({
        padding: "inner" + e,
        content: t,
        "": "outer" + e
      }, function (n, r) {
        E.fn[r] = function (i, o) {
          var a = arguments.length && (n || "boolean" != typeof i),
              s = n || (!0 === i || !0 === o ? "margin" : "border");
          return V(this, function (t, n, i) {
            var o;
            return _(t) ? 0 === r.indexOf("outer") ? t["inner" + e] : t.document.documentElement["client" + e] : 9 === t.nodeType ? (o = t.documentElement, Math.max(t.body["scroll" + e], o["scroll" + e], t.body["offset" + e], o["offset" + e], o["client" + e])) : void 0 === i ? E.css(t, n, s) : E.style(t, n, i, s);
          }, t, a ? i : void 0, a);
        };
      });
    }), E.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "), function (e, t) {
      E.fn[t] = function (e, n) {
        return arguments.length > 0 ? this.on(t, null, e, n) : this.trigger(t);
      };
    }), E.fn.extend({
      hover: function hover(e, t) {
        return this.mouseenter(e).mouseleave(t || e);
      }
    }), E.fn.extend({
      bind: function bind(e, t, n) {
        return this.on(e, null, t, n);
      },
      unbind: function unbind(e, t) {
        return this.off(e, null, t);
      },
      delegate: function delegate(e, t, n, r) {
        return this.on(t, e, n, r);
      },
      undelegate: function undelegate(e, t, n) {
        return 1 === arguments.length ? this.off(e, "**") : this.off(t, e || "**", n);
      }
    }), E.proxy = function (e, t) {
      var n, r, i;
      if ("string" == typeof t && (n = e[t], t = e, e = n), y(e)) return r = u.call(arguments, 2), (i = function i() {
        return e.apply(t || this, r.concat(u.call(arguments)));
      }).guid = e.guid = e.guid || E.guid++, i;
    }, E.holdReady = function (e) {
      e ? E.readyWait++ : E.ready(!0);
    }, E.isArray = Array.isArray, E.parseJSON = JSON.parse, E.nodeName = I, E.isFunction = y, E.isWindow = _, E.camelCase = X, E.type = T, E.now = Date.now, E.isNumeric = function (e) {
      var t = E.type(e);
      return ("number" === t || "string" === t) && !isNaN(e - parseFloat(e));
    }, void 0 === (r = function () {
      return E;
    }.apply(t, [])) || (e.exports = r);
    var Kt = n.jQuery,
        Gt = n.$;
    return E.noConflict = function (e) {
      return n.$ === E && (n.$ = Gt), e && n.jQuery === E && (n.jQuery = Kt), E;
    }, i || (n.jQuery = n.$ = E), E;
  });
}, function (e, t, n) {
  "use strict";

  e.exports = function (e, t) {
    return function () {
      for (var n = new Array(arguments.length), r = 0; r < n.length; r++) {
        n[r] = arguments[r];
      }

      return e.apply(t, n);
    };
  };
}, function (e, t) {
  var n,
      r,
      i = e.exports = {};

  function o() {
    throw new Error("setTimeout has not been defined");
  }

  function a() {
    throw new Error("clearTimeout has not been defined");
  }

  function s(e) {
    if (n === setTimeout) return setTimeout(e, 0);
    if ((n === o || !n) && setTimeout) return n = setTimeout, setTimeout(e, 0);

    try {
      return n(e, 0);
    } catch (t) {
      try {
        return n.call(null, e, 0);
      } catch (t) {
        return n.call(this, e, 0);
      }
    }
  }

  !function () {
    try {
      n = "function" == typeof setTimeout ? setTimeout : o;
    } catch (e) {
      n = o;
    }

    try {
      r = "function" == typeof clearTimeout ? clearTimeout : a;
    } catch (e) {
      r = a;
    }
  }();
  var u,
      c = [],
      l = !1,
      f = -1;

  function p() {
    l && u && (l = !1, u.length ? c = u.concat(c) : f = -1, c.length && d());
  }

  function d() {
    if (!l) {
      var e = s(p);
      l = !0;

      for (var t = c.length; t;) {
        for (u = c, c = []; ++f < t;) {
          u && u[f].run();
        }

        f = -1, t = c.length;
      }

      u = null, l = !1, function (e) {
        if (r === clearTimeout) return clearTimeout(e);
        if ((r === a || !r) && clearTimeout) return r = clearTimeout, clearTimeout(e);

        try {
          r(e);
        } catch (t) {
          try {
            return r.call(null, e);
          } catch (t) {
            return r.call(this, e);
          }
        }
      }(e);
    }
  }

  function h(e, t) {
    this.fun = e, this.array = t;
  }

  function v() {}

  i.nextTick = function (e) {
    var t = new Array(arguments.length - 1);
    if (arguments.length > 1) for (var n = 1; n < arguments.length; n++) {
      t[n - 1] = arguments[n];
    }
    c.push(new h(e, t)), 1 !== c.length || l || s(d);
  }, h.prototype.run = function () {
    this.fun.apply(null, this.array);
  }, i.title = "browser", i.browser = !0, i.env = {}, i.argv = [], i.version = "", i.versions = {}, i.on = v, i.addListener = v, i.once = v, i.off = v, i.removeListener = v, i.removeAllListeners = v, i.emit = v, i.prependListener = v, i.prependOnceListener = v, i.listeners = function (e) {
    return [];
  }, i.binding = function (e) {
    throw new Error("process.binding is not supported");
  }, i.cwd = function () {
    return "/";
  }, i.chdir = function (e) {
    throw new Error("process.chdir is not supported");
  }, i.umask = function () {
    return 0;
  };
}, function (e, t, n) {
  "use strict";

  var r = n(0),
      i = n(22),
      o = n(24),
      a = n(25),
      s = n(26),
      u = n(8),
      c = "undefined" != typeof window && window.btoa && window.btoa.bind(window) || n(27);

  e.exports = function (e) {
    return new Promise(function (t, l) {
      var f = e.data,
          p = e.headers;
      r.isFormData(f) && delete p["Content-Type"];
      var d = new XMLHttpRequest(),
          h = "onreadystatechange",
          v = !1;

      if ("undefined" == typeof window || !window.XDomainRequest || "withCredentials" in d || s(e.url) || (d = new window.XDomainRequest(), h = "onload", v = !0, d.onprogress = function () {}, d.ontimeout = function () {}), e.auth) {
        var g = e.auth.username || "",
            m = e.auth.password || "";
        p.Authorization = "Basic " + c(g + ":" + m);
      }

      if (d.open(e.method.toUpperCase(), o(e.url, e.params, e.paramsSerializer), !0), d.timeout = e.timeout, d[h] = function () {
        if (d && (4 === d.readyState || v) && (0 !== d.status || d.responseURL && 0 === d.responseURL.indexOf("file:"))) {
          var n = "getAllResponseHeaders" in d ? a(d.getAllResponseHeaders()) : null,
              r = {
            data: e.responseType && "text" !== e.responseType ? d.response : d.responseText,
            status: 1223 === d.status ? 204 : d.status,
            statusText: 1223 === d.status ? "No Content" : d.statusText,
            headers: n,
            config: e,
            request: d
          };
          i(t, l, r), d = null;
        }
      }, d.onerror = function () {
        l(u("Network Error", e, null, d)), d = null;
      }, d.ontimeout = function () {
        l(u("timeout of " + e.timeout + "ms exceeded", e, "ECONNABORTED", d)), d = null;
      }, r.isStandardBrowserEnv()) {
        var y = n(28),
            _ = (e.withCredentials || s(e.url)) && e.xsrfCookieName ? y.read(e.xsrfCookieName) : void 0;

        _ && (p[e.xsrfHeaderName] = _);
      }

      if ("setRequestHeader" in d && r.forEach(p, function (e, t) {
        void 0 === f && "content-type" === t.toLowerCase() ? delete p[t] : d.setRequestHeader(t, e);
      }), e.withCredentials && (d.withCredentials = !0), e.responseType) try {
        d.responseType = e.responseType;
      } catch (t) {
        if ("json" !== e.responseType) throw t;
      }
      "function" == typeof e.onDownloadProgress && d.addEventListener("progress", e.onDownloadProgress), "function" == typeof e.onUploadProgress && d.upload && d.upload.addEventListener("progress", e.onUploadProgress), e.cancelToken && e.cancelToken.promise.then(function (e) {
        d && (d.abort(), l(e), d = null);
      }), void 0 === f && (f = null), d.send(f);
    });
  };
}, function (e, t, n) {
  "use strict";

  var r = n(23);

  e.exports = function (e, t, n, i, o) {
    var a = new Error(e);
    return r(a, t, n, i, o);
  };
}, function (e, t, n) {
  "use strict";

  e.exports = function (e) {
    return !(!e || !e.__CANCEL__);
  };
}, function (e, t, n) {
  "use strict";

  function r(e) {
    this.message = e;
  }

  r.prototype.toString = function () {
    return "Cancel" + (this.message ? ": " + this.message : "");
  }, r.prototype.__CANCEL__ = !0, e.exports = r;
}, function (e, t, n) {
  n(12), e.exports = n(40);
}, function (e, t, n) {
  n(13), window.Vue = n(36), Vue.component("example-component", n(39)["default"]);
  new Vue({
    el: "#app"
  });
}, function (e, t, n) {
  window._ = n(14);

  try {
    window.Popper = n(3)["default"], window.$ = window.jQuery = n(4), n(16);
  } catch (e) {}

  window.axios = n(17), window.axios.defaults.headers.common["X-Requested-With"] = "XMLHttpRequest";
  var r = document.head.querySelector('meta[name="csrf-token"]');
  r ? window.axios.defaults.headers.common["X-CSRF-TOKEN"] = r.content : console.error("CSRF token not found: https://laravel.com/docs/csrf#csrf-x-csrf-token");
}, function (e, t, n) {
  (function (e, r) {
    var i;
    (function () {
      var o,
          a = 200,
          s = "Unsupported core-js use. Try https://npms.io/search?q=ponyfill.",
          u = "Expected a function",
          c = "__lodash_hash_undefined__",
          l = 500,
          f = "__lodash_placeholder__",
          p = 1,
          d = 2,
          h = 4,
          v = 1,
          g = 2,
          m = 1,
          y = 2,
          _ = 4,
          b = 8,
          w = 16,
          T = 32,
          E = 64,
          x = 128,
          C = 256,
          A = 512,
          S = 30,
          O = "...",
          D = 800,
          I = 16,
          k = 1,
          N = 2,
          L = 1 / 0,
          j = 9007199254740991,
          P = 1.7976931348623157e308,
          R = NaN,
          $ = 4294967295,
          H = $ - 1,
          M = $ >>> 1,
          F = [["ary", x], ["bind", m], ["bindKey", y], ["curry", b], ["curryRight", w], ["flip", A], ["partial", T], ["partialRight", E], ["rearg", C]],
          W = "[object Arguments]",
          q = "[object Array]",
          B = "[object AsyncFunction]",
          U = "[object Boolean]",
          V = "[object Date]",
          z = "[object DOMException]",
          K = "[object Error]",
          G = "[object Function]",
          X = "[object GeneratorFunction]",
          Q = "[object Map]",
          Y = "[object Number]",
          J = "[object Null]",
          Z = "[object Object]",
          ee = "[object Proxy]",
          te = "[object RegExp]",
          ne = "[object Set]",
          re = "[object String]",
          ie = "[object Symbol]",
          oe = "[object Undefined]",
          ae = "[object WeakMap]",
          se = "[object WeakSet]",
          ue = "[object ArrayBuffer]",
          ce = "[object DataView]",
          le = "[object Float32Array]",
          fe = "[object Float64Array]",
          pe = "[object Int8Array]",
          de = "[object Int16Array]",
          he = "[object Int32Array]",
          ve = "[object Uint8Array]",
          ge = "[object Uint8ClampedArray]",
          me = "[object Uint16Array]",
          ye = "[object Uint32Array]",
          _e = /\b__p \+= '';/g,
          be = /\b(__p \+=) '' \+/g,
          we = /(__e\(.*?\)|\b__t\)) \+\n'';/g,
          Te = /&(?:amp|lt|gt|quot|#39);/g,
          Ee = /[&<>"']/g,
          xe = RegExp(Te.source),
          Ce = RegExp(Ee.source),
          Ae = /<%-([\s\S]+?)%>/g,
          Se = /<%([\s\S]+?)%>/g,
          Oe = /<%=([\s\S]+?)%>/g,
          De = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
          Ie = /^\w*$/,
          ke = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,
          Ne = /[\\^$.*+?()[\]{}|]/g,
          Le = RegExp(Ne.source),
          je = /^\s+|\s+$/g,
          Pe = /^\s+/,
          Re = /\s+$/,
          $e = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
          He = /\{\n\/\* \[wrapped with (.+)\] \*/,
          Me = /,? & /,
          Fe = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,
          We = /\\(\\)?/g,
          qe = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,
          Be = /\w*$/,
          Ue = /^[-+]0x[0-9a-f]+$/i,
          Ve = /^0b[01]+$/i,
          ze = /^\[object .+?Constructor\]$/,
          Ke = /^0o[0-7]+$/i,
          Ge = /^(?:0|[1-9]\d*)$/,
          Xe = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,
          Qe = /($^)/,
          Ye = /['\n\r\u2028\u2029\\]/g,
          Je = "\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",
          Ze = "\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",
          et = "[\\ud800-\\udfff]",
          tt = "[" + Ze + "]",
          nt = "[" + Je + "]",
          rt = "\\d+",
          it = "[\\u2700-\\u27bf]",
          ot = "[a-z\\xdf-\\xf6\\xf8-\\xff]",
          at = "[^\\ud800-\\udfff" + Ze + rt + "\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde]",
          st = "\\ud83c[\\udffb-\\udfff]",
          ut = "[^\\ud800-\\udfff]",
          ct = "(?:\\ud83c[\\udde6-\\uddff]){2}",
          lt = "[\\ud800-\\udbff][\\udc00-\\udfff]",
          ft = "[A-Z\\xc0-\\xd6\\xd8-\\xde]",
          pt = "(?:" + ot + "|" + at + ")",
          dt = "(?:" + ft + "|" + at + ")",
          ht = "(?:" + nt + "|" + st + ")" + "?",
          vt = "[\\ufe0e\\ufe0f]?" + ht + ("(?:\\u200d(?:" + [ut, ct, lt].join("|") + ")[\\ufe0e\\ufe0f]?" + ht + ")*"),
          gt = "(?:" + [it, ct, lt].join("|") + ")" + vt,
          mt = "(?:" + [ut + nt + "?", nt, ct, lt, et].join("|") + ")",
          yt = RegExp("['’]", "g"),
          _t = RegExp(nt, "g"),
          bt = RegExp(st + "(?=" + st + ")|" + mt + vt, "g"),
          wt = RegExp([ft + "?" + ot + "+(?:['’](?:d|ll|m|re|s|t|ve))?(?=" + [tt, ft, "$"].join("|") + ")", dt + "+(?:['’](?:D|LL|M|RE|S|T|VE))?(?=" + [tt, ft + pt, "$"].join("|") + ")", ft + "?" + pt + "+(?:['’](?:d|ll|m|re|s|t|ve))?", ft + "+(?:['’](?:D|LL|M|RE|S|T|VE))?", "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])", "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])", rt, gt].join("|"), "g"),
          Tt = RegExp("[\\u200d\\ud800-\\udfff" + Je + "\\ufe0e\\ufe0f]"),
          Et = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,
          xt = ["Array", "Buffer", "DataView", "Date", "Error", "Float32Array", "Float64Array", "Function", "Int8Array", "Int16Array", "Int32Array", "Map", "Math", "Object", "Promise", "RegExp", "Set", "String", "Symbol", "TypeError", "Uint8Array", "Uint8ClampedArray", "Uint16Array", "Uint32Array", "WeakMap", "_", "clearTimeout", "isFinite", "parseInt", "setTimeout"],
          Ct = -1,
          At = {};

      At[le] = At[fe] = At[pe] = At[de] = At[he] = At[ve] = At[ge] = At[me] = At[ye] = !0, At[W] = At[q] = At[ue] = At[U] = At[ce] = At[V] = At[K] = At[G] = At[Q] = At[Y] = At[Z] = At[te] = At[ne] = At[re] = At[ae] = !1;
      var St = {};
      St[W] = St[q] = St[ue] = St[ce] = St[U] = St[V] = St[le] = St[fe] = St[pe] = St[de] = St[he] = St[Q] = St[Y] = St[Z] = St[te] = St[ne] = St[re] = St[ie] = St[ve] = St[ge] = St[me] = St[ye] = !0, St[K] = St[G] = St[ae] = !1;

      var Ot = {
        "\\": "\\",
        "'": "'",
        "\n": "n",
        "\r": "r",
        "\u2028": "u2028",
        "\u2029": "u2029"
      },
          Dt = parseFloat,
          It = parseInt,
          kt = "object" == _typeof(e) && e && e.Object === Object && e,
          Nt = "object" == (typeof self === "undefined" ? "undefined" : _typeof(self)) && self && self.Object === Object && self,
          Lt = kt || Nt || Function("return this")(),
          jt = t && !t.nodeType && t,
          Pt = jt && "object" == _typeof(r) && r && !r.nodeType && r,
          Rt = Pt && Pt.exports === jt,
          $t = Rt && kt.process,
          Ht = function () {
        try {
          var e = Pt && Pt.require && Pt.require("util").types;

          return e || $t && $t.binding && $t.binding("util");
        } catch (e) {}
      }(),
          Mt = Ht && Ht.isArrayBuffer,
          Ft = Ht && Ht.isDate,
          Wt = Ht && Ht.isMap,
          qt = Ht && Ht.isRegExp,
          Bt = Ht && Ht.isSet,
          Ut = Ht && Ht.isTypedArray;

      function Vt(e, t, n) {
        switch (n.length) {
          case 0:
            return e.call(t);

          case 1:
            return e.call(t, n[0]);

          case 2:
            return e.call(t, n[0], n[1]);

          case 3:
            return e.call(t, n[0], n[1], n[2]);
        }

        return e.apply(t, n);
      }

      function zt(e, t, n, r) {
        for (var i = -1, o = null == e ? 0 : e.length; ++i < o;) {
          var a = e[i];
          t(r, a, n(a), e);
        }

        return r;
      }

      function Kt(e, t) {
        for (var n = -1, r = null == e ? 0 : e.length; ++n < r && !1 !== t(e[n], n, e);) {
          ;
        }

        return e;
      }

      function Gt(e, t) {
        for (var n = null == e ? 0 : e.length; n-- && !1 !== t(e[n], n, e);) {
          ;
        }

        return e;
      }

      function Xt(e, t) {
        for (var n = -1, r = null == e ? 0 : e.length; ++n < r;) {
          if (!t(e[n], n, e)) return !1;
        }

        return !0;
      }

      function Qt(e, t) {
        for (var n = -1, r = null == e ? 0 : e.length, i = 0, o = []; ++n < r;) {
          var a = e[n];
          t(a, n, e) && (o[i++] = a);
        }

        return o;
      }

      function Yt(e, t) {
        return !!(null == e ? 0 : e.length) && un(e, t, 0) > -1;
      }

      function Jt(e, t, n) {
        for (var r = -1, i = null == e ? 0 : e.length; ++r < i;) {
          if (n(t, e[r])) return !0;
        }

        return !1;
      }

      function Zt(e, t) {
        for (var n = -1, r = null == e ? 0 : e.length, i = Array(r); ++n < r;) {
          i[n] = t(e[n], n, e);
        }

        return i;
      }

      function en(e, t) {
        for (var n = -1, r = t.length, i = e.length; ++n < r;) {
          e[i + n] = t[n];
        }

        return e;
      }

      function tn(e, t, n, r) {
        var i = -1,
            o = null == e ? 0 : e.length;

        for (r && o && (n = e[++i]); ++i < o;) {
          n = t(n, e[i], i, e);
        }

        return n;
      }

      function nn(e, t, n, r) {
        var i = null == e ? 0 : e.length;

        for (r && i && (n = e[--i]); i--;) {
          n = t(n, e[i], i, e);
        }

        return n;
      }

      function rn(e, t) {
        for (var n = -1, r = null == e ? 0 : e.length; ++n < r;) {
          if (t(e[n], n, e)) return !0;
        }

        return !1;
      }

      var on = pn("length");

      function an(e, t, n) {
        var r;
        return n(e, function (e, n, i) {
          if (t(e, n, i)) return r = n, !1;
        }), r;
      }

      function sn(e, t, n, r) {
        for (var i = e.length, o = n + (r ? 1 : -1); r ? o-- : ++o < i;) {
          if (t(e[o], o, e)) return o;
        }

        return -1;
      }

      function un(e, t, n) {
        return t == t ? function (e, t, n) {
          var r = n - 1,
              i = e.length;

          for (; ++r < i;) {
            if (e[r] === t) return r;
          }

          return -1;
        }(e, t, n) : sn(e, ln, n);
      }

      function cn(e, t, n, r) {
        for (var i = n - 1, o = e.length; ++i < o;) {
          if (r(e[i], t)) return i;
        }

        return -1;
      }

      function ln(e) {
        return e != e;
      }

      function fn(e, t) {
        var n = null == e ? 0 : e.length;
        return n ? vn(e, t) / n : R;
      }

      function pn(e) {
        return function (t) {
          return null == t ? o : t[e];
        };
      }

      function dn(e) {
        return function (t) {
          return null == e ? o : e[t];
        };
      }

      function hn(e, t, n, r, i) {
        return i(e, function (e, i, o) {
          n = r ? (r = !1, e) : t(n, e, i, o);
        }), n;
      }

      function vn(e, t) {
        for (var n, r = -1, i = e.length; ++r < i;) {
          var a = t(e[r]);
          a !== o && (n = n === o ? a : n + a);
        }

        return n;
      }

      function gn(e, t) {
        for (var n = -1, r = Array(e); ++n < e;) {
          r[n] = t(n);
        }

        return r;
      }

      function mn(e) {
        return function (t) {
          return e(t);
        };
      }

      function yn(e, t) {
        return Zt(t, function (t) {
          return e[t];
        });
      }

      function _n(e, t) {
        return e.has(t);
      }

      function bn(e, t) {
        for (var n = -1, r = e.length; ++n < r && un(t, e[n], 0) > -1;) {
          ;
        }

        return n;
      }

      function wn(e, t) {
        for (var n = e.length; n-- && un(t, e[n], 0) > -1;) {
          ;
        }

        return n;
      }

      var Tn = dn({
        "À": "A",
        "Á": "A",
        "Â": "A",
        "Ã": "A",
        "Ä": "A",
        "Å": "A",
        "à": "a",
        "á": "a",
        "â": "a",
        "ã": "a",
        "ä": "a",
        "å": "a",
        "Ç": "C",
        "ç": "c",
        "Ð": "D",
        "ð": "d",
        "È": "E",
        "É": "E",
        "Ê": "E",
        "Ë": "E",
        "è": "e",
        "é": "e",
        "ê": "e",
        "ë": "e",
        "Ì": "I",
        "Í": "I",
        "Î": "I",
        "Ï": "I",
        "ì": "i",
        "í": "i",
        "î": "i",
        "ï": "i",
        "Ñ": "N",
        "ñ": "n",
        "Ò": "O",
        "Ó": "O",
        "Ô": "O",
        "Õ": "O",
        "Ö": "O",
        "Ø": "O",
        "ò": "o",
        "ó": "o",
        "ô": "o",
        "õ": "o",
        "ö": "o",
        "ø": "o",
        "Ù": "U",
        "Ú": "U",
        "Û": "U",
        "Ü": "U",
        "ù": "u",
        "ú": "u",
        "û": "u",
        "ü": "u",
        "Ý": "Y",
        "ý": "y",
        "ÿ": "y",
        "Æ": "Ae",
        "æ": "ae",
        "Þ": "Th",
        "þ": "th",
        "ß": "ss",
        "Ā": "A",
        "Ă": "A",
        "Ą": "A",
        "ā": "a",
        "ă": "a",
        "ą": "a",
        "Ć": "C",
        "Ĉ": "C",
        "Ċ": "C",
        "Č": "C",
        "ć": "c",
        "ĉ": "c",
        "ċ": "c",
        "č": "c",
        "Ď": "D",
        "Đ": "D",
        "ď": "d",
        "đ": "d",
        "Ē": "E",
        "Ĕ": "E",
        "Ė": "E",
        "Ę": "E",
        "Ě": "E",
        "ē": "e",
        "ĕ": "e",
        "ė": "e",
        "ę": "e",
        "ě": "e",
        "Ĝ": "G",
        "Ğ": "G",
        "Ġ": "G",
        "Ģ": "G",
        "ĝ": "g",
        "ğ": "g",
        "ġ": "g",
        "ģ": "g",
        "Ĥ": "H",
        "Ħ": "H",
        "ĥ": "h",
        "ħ": "h",
        "Ĩ": "I",
        "Ī": "I",
        "Ĭ": "I",
        "Į": "I",
        "İ": "I",
        "ĩ": "i",
        "ī": "i",
        "ĭ": "i",
        "į": "i",
        "ı": "i",
        "Ĵ": "J",
        "ĵ": "j",
        "Ķ": "K",
        "ķ": "k",
        "ĸ": "k",
        "Ĺ": "L",
        "Ļ": "L",
        "Ľ": "L",
        "Ŀ": "L",
        "Ł": "L",
        "ĺ": "l",
        "ļ": "l",
        "ľ": "l",
        "ŀ": "l",
        "ł": "l",
        "Ń": "N",
        "Ņ": "N",
        "Ň": "N",
        "Ŋ": "N",
        "ń": "n",
        "ņ": "n",
        "ň": "n",
        "ŋ": "n",
        "Ō": "O",
        "Ŏ": "O",
        "Ő": "O",
        "ō": "o",
        "ŏ": "o",
        "ő": "o",
        "Ŕ": "R",
        "Ŗ": "R",
        "Ř": "R",
        "ŕ": "r",
        "ŗ": "r",
        "ř": "r",
        "Ś": "S",
        "Ŝ": "S",
        "Ş": "S",
        "Š": "S",
        "ś": "s",
        "ŝ": "s",
        "ş": "s",
        "š": "s",
        "Ţ": "T",
        "Ť": "T",
        "Ŧ": "T",
        "ţ": "t",
        "ť": "t",
        "ŧ": "t",
        "Ũ": "U",
        "Ū": "U",
        "Ŭ": "U",
        "Ů": "U",
        "Ű": "U",
        "Ų": "U",
        "ũ": "u",
        "ū": "u",
        "ŭ": "u",
        "ů": "u",
        "ű": "u",
        "ų": "u",
        "Ŵ": "W",
        "ŵ": "w",
        "Ŷ": "Y",
        "ŷ": "y",
        "Ÿ": "Y",
        "Ź": "Z",
        "Ż": "Z",
        "Ž": "Z",
        "ź": "z",
        "ż": "z",
        "ž": "z",
        "Ĳ": "IJ",
        "ĳ": "ij",
        "Œ": "Oe",
        "œ": "oe",
        "ŉ": "'n",
        "ſ": "s"
      }),
          En = dn({
        "&": "&amp;",
        "<": "&lt;",
        ">": "&gt;",
        '"': "&quot;",
        "'": "&#39;"
      });

      function xn(e) {
        return "\\" + Ot[e];
      }

      function Cn(e) {
        return Tt.test(e);
      }

      function An(e) {
        var t = -1,
            n = Array(e.size);
        return e.forEach(function (e, r) {
          n[++t] = [r, e];
        }), n;
      }

      function Sn(e, t) {
        return function (n) {
          return e(t(n));
        };
      }

      function On(e, t) {
        for (var n = -1, r = e.length, i = 0, o = []; ++n < r;) {
          var a = e[n];
          a !== t && a !== f || (e[n] = f, o[i++] = n);
        }

        return o;
      }

      function Dn(e) {
        var t = -1,
            n = Array(e.size);
        return e.forEach(function (e) {
          n[++t] = e;
        }), n;
      }

      function In(e) {
        var t = -1,
            n = Array(e.size);
        return e.forEach(function (e) {
          n[++t] = [e, e];
        }), n;
      }

      function kn(e) {
        return Cn(e) ? function (e) {
          var t = bt.lastIndex = 0;

          for (; bt.test(e);) {
            ++t;
          }

          return t;
        }(e) : on(e);
      }

      function Nn(e) {
        return Cn(e) ? function (e) {
          return e.match(bt) || [];
        }(e) : function (e) {
          return e.split("");
        }(e);
      }

      var Ln = dn({
        "&amp;": "&",
        "&lt;": "<",
        "&gt;": ">",
        "&quot;": '"',
        "&#39;": "'"
      });

      var jn = function e(t) {
        var n,
            r = (t = null == t ? Lt : jn.defaults(Lt.Object(), t, jn.pick(Lt, xt))).Array,
            i = t.Date,
            Je = t.Error,
            Ze = t.Function,
            et = t.Math,
            tt = t.Object,
            nt = t.RegExp,
            rt = t.String,
            it = t.TypeError,
            ot = r.prototype,
            at = Ze.prototype,
            st = tt.prototype,
            ut = t["__core-js_shared__"],
            ct = at.toString,
            lt = st.hasOwnProperty,
            ft = 0,
            pt = (n = /[^.]+$/.exec(ut && ut.keys && ut.keys.IE_PROTO || "")) ? "Symbol(src)_1." + n : "",
            dt = st.toString,
            ht = ct.call(tt),
            vt = Lt._,
            gt = nt("^" + ct.call(lt).replace(Ne, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"),
            mt = Rt ? t.Buffer : o,
            bt = t.Symbol,
            Tt = t.Uint8Array,
            Ot = mt ? mt.allocUnsafe : o,
            kt = Sn(tt.getPrototypeOf, tt),
            Nt = tt.create,
            jt = st.propertyIsEnumerable,
            Pt = ot.splice,
            $t = bt ? bt.isConcatSpreadable : o,
            Ht = bt ? bt.iterator : o,
            on = bt ? bt.toStringTag : o,
            dn = function () {
          try {
            var e = Mo(tt, "defineProperty");
            return e({}, "", {}), e;
          } catch (e) {}
        }(),
            Pn = t.clearTimeout !== Lt.clearTimeout && t.clearTimeout,
            Rn = i && i.now !== Lt.Date.now && i.now,
            $n = t.setTimeout !== Lt.setTimeout && t.setTimeout,
            Hn = et.ceil,
            Mn = et.floor,
            Fn = tt.getOwnPropertySymbols,
            Wn = mt ? mt.isBuffer : o,
            qn = t.isFinite,
            Bn = ot.join,
            Un = Sn(tt.keys, tt),
            Vn = et.max,
            zn = et.min,
            Kn = i.now,
            Gn = t.parseInt,
            Xn = et.random,
            Qn = ot.reverse,
            Yn = Mo(t, "DataView"),
            Jn = Mo(t, "Map"),
            Zn = Mo(t, "Promise"),
            er = Mo(t, "Set"),
            tr = Mo(t, "WeakMap"),
            nr = Mo(tt, "create"),
            rr = tr && new tr(),
            ir = {},
            or = fa(Yn),
            ar = fa(Jn),
            sr = fa(Zn),
            ur = fa(er),
            cr = fa(tr),
            lr = bt ? bt.prototype : o,
            fr = lr ? lr.valueOf : o,
            pr = lr ? lr.toString : o;

        function dr(e) {
          if (Os(e) && !ms(e) && !(e instanceof mr)) {
            if (e instanceof gr) return e;
            if (lt.call(e, "__wrapped__")) return pa(e);
          }

          return new gr(e);
        }

        var hr = function () {
          function e() {}

          return function (t) {
            if (!Ss(t)) return {};
            if (Nt) return Nt(t);
            e.prototype = t;
            var n = new e();
            return e.prototype = o, n;
          };
        }();

        function vr() {}

        function gr(e, t) {
          this.__wrapped__ = e, this.__actions__ = [], this.__chain__ = !!t, this.__index__ = 0, this.__values__ = o;
        }

        function mr(e) {
          this.__wrapped__ = e, this.__actions__ = [], this.__dir__ = 1, this.__filtered__ = !1, this.__iteratees__ = [], this.__takeCount__ = $, this.__views__ = [];
        }

        function yr(e) {
          var t = -1,
              n = null == e ? 0 : e.length;

          for (this.clear(); ++t < n;) {
            var r = e[t];
            this.set(r[0], r[1]);
          }
        }

        function _r(e) {
          var t = -1,
              n = null == e ? 0 : e.length;

          for (this.clear(); ++t < n;) {
            var r = e[t];
            this.set(r[0], r[1]);
          }
        }

        function br(e) {
          var t = -1,
              n = null == e ? 0 : e.length;

          for (this.clear(); ++t < n;) {
            var r = e[t];
            this.set(r[0], r[1]);
          }
        }

        function wr(e) {
          var t = -1,
              n = null == e ? 0 : e.length;

          for (this.__data__ = new br(); ++t < n;) {
            this.add(e[t]);
          }
        }

        function Tr(e) {
          var t = this.__data__ = new _r(e);
          this.size = t.size;
        }

        function Er(e, t) {
          var n = ms(e),
              r = !n && gs(e),
              i = !n && !r && ws(e),
              o = !n && !r && !i && Rs(e),
              a = n || r || i || o,
              s = a ? gn(e.length, rt) : [],
              u = s.length;

          for (var c in e) {
            !t && !lt.call(e, c) || a && ("length" == c || i && ("offset" == c || "parent" == c) || o && ("buffer" == c || "byteLength" == c || "byteOffset" == c) || zo(c, u)) || s.push(c);
          }

          return s;
        }

        function xr(e) {
          var t = e.length;
          return t ? e[wi(0, t - 1)] : o;
        }

        function Cr(e, t) {
          return ua(no(e), jr(t, 0, e.length));
        }

        function Ar(e) {
          return ua(no(e));
        }

        function Sr(e, t, n) {
          (n === o || ds(e[t], n)) && (n !== o || t in e) || Nr(e, t, n);
        }

        function Or(e, t, n) {
          var r = e[t];
          lt.call(e, t) && ds(r, n) && (n !== o || t in e) || Nr(e, t, n);
        }

        function Dr(e, t) {
          for (var n = e.length; n--;) {
            if (ds(e[n][0], t)) return n;
          }

          return -1;
        }

        function Ir(e, t, n, r) {
          return Mr(e, function (e, i, o) {
            t(r, e, n(e), o);
          }), r;
        }

        function kr(e, t) {
          return e && ro(t, iu(t), e);
        }

        function Nr(e, t, n) {
          "__proto__" == t && dn ? dn(e, t, {
            configurable: !0,
            enumerable: !0,
            value: n,
            writable: !0
          }) : e[t] = n;
        }

        function Lr(e, t) {
          for (var n = -1, i = t.length, a = r(i), s = null == e; ++n < i;) {
            a[n] = s ? o : Zs(e, t[n]);
          }

          return a;
        }

        function jr(e, t, n) {
          return e == e && (n !== o && (e = e <= n ? e : n), t !== o && (e = e >= t ? e : t)), e;
        }

        function Pr(e, t, n, r, i, a) {
          var s,
              u = t & p,
              c = t & d,
              l = t & h;
          if (n && (s = i ? n(e, r, i, a) : n(e)), s !== o) return s;
          if (!Ss(e)) return e;
          var f = ms(e);

          if (f) {
            if (s = function (e) {
              var t = e.length,
                  n = new e.constructor(t);
              return t && "string" == typeof e[0] && lt.call(e, "index") && (n.index = e.index, n.input = e.input), n;
            }(e), !u) return no(e, s);
          } else {
            var v = qo(e),
                g = v == G || v == X;
            if (ws(e)) return Qi(e, u);

            if (v == Z || v == W || g && !i) {
              if (s = c || g ? {} : Uo(e), !u) return c ? function (e, t) {
                return ro(e, Wo(e), t);
              }(e, function (e, t) {
                return e && ro(t, ou(t), e);
              }(s, e)) : function (e, t) {
                return ro(e, Fo(e), t);
              }(e, kr(s, e));
            } else {
              if (!St[v]) return i ? e : {};

              s = function (e, t, n) {
                var r,
                    i,
                    o,
                    a = e.constructor;

                switch (t) {
                  case ue:
                    return Yi(e);

                  case U:
                  case V:
                    return new a(+e);

                  case ce:
                    return function (e, t) {
                      var n = t ? Yi(e.buffer) : e.buffer;
                      return new e.constructor(n, e.byteOffset, e.byteLength);
                    }(e, n);

                  case le:
                  case fe:
                  case pe:
                  case de:
                  case he:
                  case ve:
                  case ge:
                  case me:
                  case ye:
                    return Ji(e, n);

                  case Q:
                    return new a();

                  case Y:
                  case re:
                    return new a(e);

                  case te:
                    return (o = new (i = e).constructor(i.source, Be.exec(i))).lastIndex = i.lastIndex, o;

                  case ne:
                    return new a();

                  case ie:
                    return r = e, fr ? tt(fr.call(r)) : {};
                }
              }(e, v, u);
            }
          }

          a || (a = new Tr());
          var m = a.get(e);
          if (m) return m;
          if (a.set(e, s), Ls(e)) return e.forEach(function (r) {
            s.add(Pr(r, t, n, r, e, a));
          }), s;
          if (Ds(e)) return e.forEach(function (r, i) {
            s.set(i, Pr(r, t, n, i, e, a));
          }), s;
          var y = f ? o : (l ? c ? No : ko : c ? ou : iu)(e);
          return Kt(y || e, function (r, i) {
            y && (r = e[i = r]), Or(s, i, Pr(r, t, n, i, e, a));
          }), s;
        }

        function Rr(e, t, n) {
          var r = n.length;
          if (null == e) return !r;

          for (e = tt(e); r--;) {
            var i = n[r],
                a = t[i],
                s = e[i];
            if (s === o && !(i in e) || !a(s)) return !1;
          }

          return !0;
        }

        function $r(e, t, n) {
          if ("function" != typeof e) throw new it(u);
          return ia(function () {
            e.apply(o, n);
          }, t);
        }

        function Hr(e, t, n, r) {
          var i = -1,
              o = Yt,
              s = !0,
              u = e.length,
              c = [],
              l = t.length;
          if (!u) return c;
          n && (t = Zt(t, mn(n))), r ? (o = Jt, s = !1) : t.length >= a && (o = _n, s = !1, t = new wr(t));

          e: for (; ++i < u;) {
            var f = e[i],
                p = null == n ? f : n(f);

            if (f = r || 0 !== f ? f : 0, s && p == p) {
              for (var d = l; d--;) {
                if (t[d] === p) continue e;
              }

              c.push(f);
            } else o(t, p, r) || c.push(f);
          }

          return c;
        }

        dr.templateSettings = {
          escape: Ae,
          evaluate: Se,
          interpolate: Oe,
          variable: "",
          imports: {
            _: dr
          }
        }, dr.prototype = vr.prototype, dr.prototype.constructor = dr, gr.prototype = hr(vr.prototype), gr.prototype.constructor = gr, mr.prototype = hr(vr.prototype), mr.prototype.constructor = mr, yr.prototype.clear = function () {
          this.__data__ = nr ? nr(null) : {}, this.size = 0;
        }, yr.prototype["delete"] = function (e) {
          var t = this.has(e) && delete this.__data__[e];
          return this.size -= t ? 1 : 0, t;
        }, yr.prototype.get = function (e) {
          var t = this.__data__;

          if (nr) {
            var n = t[e];
            return n === c ? o : n;
          }

          return lt.call(t, e) ? t[e] : o;
        }, yr.prototype.has = function (e) {
          var t = this.__data__;
          return nr ? t[e] !== o : lt.call(t, e);
        }, yr.prototype.set = function (e, t) {
          var n = this.__data__;
          return this.size += this.has(e) ? 0 : 1, n[e] = nr && t === o ? c : t, this;
        }, _r.prototype.clear = function () {
          this.__data__ = [], this.size = 0;
        }, _r.prototype["delete"] = function (e) {
          var t = this.__data__,
              n = Dr(t, e);
          return !(n < 0 || (n == t.length - 1 ? t.pop() : Pt.call(t, n, 1), --this.size, 0));
        }, _r.prototype.get = function (e) {
          var t = this.__data__,
              n = Dr(t, e);
          return n < 0 ? o : t[n][1];
        }, _r.prototype.has = function (e) {
          return Dr(this.__data__, e) > -1;
        }, _r.prototype.set = function (e, t) {
          var n = this.__data__,
              r = Dr(n, e);
          return r < 0 ? (++this.size, n.push([e, t])) : n[r][1] = t, this;
        }, br.prototype.clear = function () {
          this.size = 0, this.__data__ = {
            hash: new yr(),
            map: new (Jn || _r)(),
            string: new yr()
          };
        }, br.prototype["delete"] = function (e) {
          var t = $o(this, e)["delete"](e);
          return this.size -= t ? 1 : 0, t;
        }, br.prototype.get = function (e) {
          return $o(this, e).get(e);
        }, br.prototype.has = function (e) {
          return $o(this, e).has(e);
        }, br.prototype.set = function (e, t) {
          var n = $o(this, e),
              r = n.size;
          return n.set(e, t), this.size += n.size == r ? 0 : 1, this;
        }, wr.prototype.add = wr.prototype.push = function (e) {
          return this.__data__.set(e, c), this;
        }, wr.prototype.has = function (e) {
          return this.__data__.has(e);
        }, Tr.prototype.clear = function () {
          this.__data__ = new _r(), this.size = 0;
        }, Tr.prototype["delete"] = function (e) {
          var t = this.__data__,
              n = t["delete"](e);
          return this.size = t.size, n;
        }, Tr.prototype.get = function (e) {
          return this.__data__.get(e);
        }, Tr.prototype.has = function (e) {
          return this.__data__.has(e);
        }, Tr.prototype.set = function (e, t) {
          var n = this.__data__;

          if (n instanceof _r) {
            var r = n.__data__;
            if (!Jn || r.length < a - 1) return r.push([e, t]), this.size = ++n.size, this;
            n = this.__data__ = new br(r);
          }

          return n.set(e, t), this.size = n.size, this;
        };
        var Mr = ao(Kr),
            Fr = ao(Gr, !0);

        function Wr(e, t) {
          var n = !0;
          return Mr(e, function (e, r, i) {
            return n = !!t(e, r, i);
          }), n;
        }

        function qr(e, t, n) {
          for (var r = -1, i = e.length; ++r < i;) {
            var a = e[r],
                s = t(a);
            if (null != s && (u === o ? s == s && !Ps(s) : n(s, u))) var u = s,
                c = a;
          }

          return c;
        }

        function Br(e, t) {
          var n = [];
          return Mr(e, function (e, r, i) {
            t(e, r, i) && n.push(e);
          }), n;
        }

        function Ur(e, t, n, r, i) {
          var o = -1,
              a = e.length;

          for (n || (n = Vo), i || (i = []); ++o < a;) {
            var s = e[o];
            t > 0 && n(s) ? t > 1 ? Ur(s, t - 1, n, r, i) : en(i, s) : r || (i[i.length] = s);
          }

          return i;
        }

        var Vr = so(),
            zr = so(!0);

        function Kr(e, t) {
          return e && Vr(e, t, iu);
        }

        function Gr(e, t) {
          return e && zr(e, t, iu);
        }

        function Xr(e, t) {
          return Qt(t, function (t) {
            return xs(e[t]);
          });
        }

        function Qr(e, t) {
          for (var n = 0, r = (t = zi(t, e)).length; null != e && n < r;) {
            e = e[la(t[n++])];
          }

          return n && n == r ? e : o;
        }

        function Yr(e, t, n) {
          var r = t(e);
          return ms(e) ? r : en(r, n(e));
        }

        function Jr(e) {
          return null == e ? e === o ? oe : J : on && on in tt(e) ? function (e) {
            var t = lt.call(e, on),
                n = e[on];

            try {
              e[on] = o;
              var r = !0;
            } catch (e) {}

            var i = dt.call(e);
            return r && (t ? e[on] = n : delete e[on]), i;
          }(e) : function (e) {
            return dt.call(e);
          }(e);
        }

        function Zr(e, t) {
          return e > t;
        }

        function ei(e, t) {
          return null != e && lt.call(e, t);
        }

        function ti(e, t) {
          return null != e && t in tt(e);
        }

        function ni(e, t, n) {
          for (var i = n ? Jt : Yt, a = e[0].length, s = e.length, u = s, c = r(s), l = 1 / 0, f = []; u--;) {
            var p = e[u];
            u && t && (p = Zt(p, mn(t))), l = zn(p.length, l), c[u] = !n && (t || a >= 120 && p.length >= 120) ? new wr(u && p) : o;
          }

          p = e[0];
          var d = -1,
              h = c[0];

          e: for (; ++d < a && f.length < l;) {
            var v = p[d],
                g = t ? t(v) : v;

            if (v = n || 0 !== v ? v : 0, !(h ? _n(h, g) : i(f, g, n))) {
              for (u = s; --u;) {
                var m = c[u];
                if (!(m ? _n(m, g) : i(e[u], g, n))) continue e;
              }

              h && h.push(g), f.push(v);
            }
          }

          return f;
        }

        function ri(e, t, n) {
          var r = null == (e = ta(e, t = zi(t, e))) ? e : e[la(Ea(t))];
          return null == r ? o : Vt(r, e, n);
        }

        function ii(e) {
          return Os(e) && Jr(e) == W;
        }

        function oi(e, t, n, r, i) {
          return e === t || (null == e || null == t || !Os(e) && !Os(t) ? e != e && t != t : function (e, t, n, r, i, a) {
            var s = ms(e),
                u = ms(t),
                c = s ? q : qo(e),
                l = u ? q : qo(t),
                f = (c = c == W ? Z : c) == Z,
                p = (l = l == W ? Z : l) == Z,
                d = c == l;

            if (d && ws(e)) {
              if (!ws(t)) return !1;
              s = !0, f = !1;
            }

            if (d && !f) return a || (a = new Tr()), s || Rs(e) ? Do(e, t, n, r, i, a) : function (e, t, n, r, i, o, a) {
              switch (n) {
                case ce:
                  if (e.byteLength != t.byteLength || e.byteOffset != t.byteOffset) return !1;
                  e = e.buffer, t = t.buffer;

                case ue:
                  return !(e.byteLength != t.byteLength || !o(new Tt(e), new Tt(t)));

                case U:
                case V:
                case Y:
                  return ds(+e, +t);

                case K:
                  return e.name == t.name && e.message == t.message;

                case te:
                case re:
                  return e == t + "";

                case Q:
                  var s = An;

                case ne:
                  var u = r & v;
                  if (s || (s = Dn), e.size != t.size && !u) return !1;
                  var c = a.get(e);
                  if (c) return c == t;
                  r |= g, a.set(e, t);
                  var l = Do(s(e), s(t), r, i, o, a);
                  return a["delete"](e), l;

                case ie:
                  if (fr) return fr.call(e) == fr.call(t);
              }

              return !1;
            }(e, t, c, n, r, i, a);

            if (!(n & v)) {
              var h = f && lt.call(e, "__wrapped__"),
                  m = p && lt.call(t, "__wrapped__");

              if (h || m) {
                var y = h ? e.value() : e,
                    _ = m ? t.value() : t;

                return a || (a = new Tr()), i(y, _, n, r, a);
              }
            }

            return !!d && (a || (a = new Tr()), function (e, t, n, r, i, a) {
              var s = n & v,
                  u = ko(e),
                  c = u.length,
                  l = ko(t).length;
              if (c != l && !s) return !1;

              for (var f = c; f--;) {
                var p = u[f];
                if (!(s ? p in t : lt.call(t, p))) return !1;
              }

              var d = a.get(e);
              if (d && a.get(t)) return d == t;
              var h = !0;
              a.set(e, t), a.set(t, e);

              for (var g = s; ++f < c;) {
                p = u[f];
                var m = e[p],
                    y = t[p];
                if (r) var _ = s ? r(y, m, p, t, e, a) : r(m, y, p, e, t, a);

                if (!(_ === o ? m === y || i(m, y, n, r, a) : _)) {
                  h = !1;
                  break;
                }

                g || (g = "constructor" == p);
              }

              if (h && !g) {
                var b = e.constructor,
                    w = t.constructor;
                b != w && "constructor" in e && "constructor" in t && !("function" == typeof b && b instanceof b && "function" == typeof w && w instanceof w) && (h = !1);
              }

              return a["delete"](e), a["delete"](t), h;
            }(e, t, n, r, i, a));
          }(e, t, n, r, oi, i));
        }

        function ai(e, t, n, r) {
          var i = n.length,
              a = i,
              s = !r;
          if (null == e) return !a;

          for (e = tt(e); i--;) {
            var u = n[i];
            if (s && u[2] ? u[1] !== e[u[0]] : !(u[0] in e)) return !1;
          }

          for (; ++i < a;) {
            var c = (u = n[i])[0],
                l = e[c],
                f = u[1];

            if (s && u[2]) {
              if (l === o && !(c in e)) return !1;
            } else {
              var p = new Tr();
              if (r) var d = r(l, f, c, e, t, p);
              if (!(d === o ? oi(f, l, v | g, r, p) : d)) return !1;
            }
          }

          return !0;
        }

        function si(e) {
          return !(!Ss(e) || (t = e, pt && pt in t)) && (xs(e) ? gt : ze).test(fa(e));
          var t;
        }

        function ui(e) {
          return "function" == typeof e ? e : null == e ? Iu : "object" == _typeof(e) ? ms(e) ? hi(e[0], e[1]) : di(e) : Mu(e);
        }

        function ci(e) {
          if (!Yo(e)) return Un(e);
          var t = [];

          for (var n in tt(e)) {
            lt.call(e, n) && "constructor" != n && t.push(n);
          }

          return t;
        }

        function li(e) {
          if (!Ss(e)) return function (e) {
            var t = [];
            if (null != e) for (var n in tt(e)) {
              t.push(n);
            }
            return t;
          }(e);
          var t = Yo(e),
              n = [];

          for (var r in e) {
            ("constructor" != r || !t && lt.call(e, r)) && n.push(r);
          }

          return n;
        }

        function fi(e, t) {
          return e < t;
        }

        function pi(e, t) {
          var n = -1,
              i = _s(e) ? r(e.length) : [];
          return Mr(e, function (e, r, o) {
            i[++n] = t(e, r, o);
          }), i;
        }

        function di(e) {
          var t = Ho(e);
          return 1 == t.length && t[0][2] ? Zo(t[0][0], t[0][1]) : function (n) {
            return n === e || ai(n, e, t);
          };
        }

        function hi(e, t) {
          return Go(e) && Jo(t) ? Zo(la(e), t) : function (n) {
            var r = Zs(n, e);
            return r === o && r === t ? eu(n, e) : oi(t, r, v | g);
          };
        }

        function vi(e, t, n, r, i) {
          e !== t && Vr(t, function (a, s) {
            if (Ss(a)) i || (i = new Tr()), function (e, t, n, r, i, a, s) {
              var u = na(e, n),
                  c = na(t, n),
                  l = s.get(c);
              if (l) Sr(e, n, l);else {
                var f = a ? a(u, c, n + "", e, t, s) : o,
                    p = f === o;

                if (p) {
                  var d = ms(c),
                      h = !d && ws(c),
                      v = !d && !h && Rs(c);
                  f = c, d || h || v ? ms(u) ? f = u : bs(u) ? f = no(u) : h ? (p = !1, f = Qi(c, !0)) : v ? (p = !1, f = Ji(c, !0)) : f = [] : ks(c) || gs(c) ? (f = u, gs(u) ? f = Us(u) : Ss(u) && !xs(u) || (f = Uo(c))) : p = !1;
                }

                p && (s.set(c, f), i(f, c, r, a, s), s["delete"](c)), Sr(e, n, f);
              }
            }(e, t, s, n, vi, r, i);else {
              var u = r ? r(na(e, s), a, s + "", e, t, i) : o;
              u === o && (u = a), Sr(e, s, u);
            }
          }, ou);
        }

        function gi(e, t) {
          var n = e.length;
          if (n) return zo(t += t < 0 ? n : 0, n) ? e[t] : o;
        }

        function mi(e, t, n) {
          var r = -1;
          return t = Zt(t.length ? t : [Iu], mn(Ro())), function (e, t) {
            var n = e.length;

            for (e.sort(t); n--;) {
              e[n] = e[n].value;
            }

            return e;
          }(pi(e, function (e, n, i) {
            return {
              criteria: Zt(t, function (t) {
                return t(e);
              }),
              index: ++r,
              value: e
            };
          }), function (e, t) {
            return function (e, t, n) {
              for (var r = -1, i = e.criteria, o = t.criteria, a = i.length, s = n.length; ++r < a;) {
                var u = Zi(i[r], o[r]);

                if (u) {
                  if (r >= s) return u;
                  var c = n[r];
                  return u * ("desc" == c ? -1 : 1);
                }
              }

              return e.index - t.index;
            }(e, t, n);
          });
        }

        function yi(e, t, n) {
          for (var r = -1, i = t.length, o = {}; ++r < i;) {
            var a = t[r],
                s = Qr(e, a);
            n(s, a) && Ai(o, zi(a, e), s);
          }

          return o;
        }

        function _i(e, t, n, r) {
          var i = r ? cn : un,
              o = -1,
              a = t.length,
              s = e;

          for (e === t && (t = no(t)), n && (s = Zt(e, mn(n))); ++o < a;) {
            for (var u = 0, c = t[o], l = n ? n(c) : c; (u = i(s, l, u, r)) > -1;) {
              s !== e && Pt.call(s, u, 1), Pt.call(e, u, 1);
            }
          }

          return e;
        }

        function bi(e, t) {
          for (var n = e ? t.length : 0, r = n - 1; n--;) {
            var i = t[n];

            if (n == r || i !== o) {
              var o = i;
              zo(i) ? Pt.call(e, i, 1) : Hi(e, i);
            }
          }

          return e;
        }

        function wi(e, t) {
          return e + Mn(Xn() * (t - e + 1));
        }

        function Ti(e, t) {
          var n = "";
          if (!e || t < 1 || t > j) return n;

          do {
            t % 2 && (n += e), (t = Mn(t / 2)) && (e += e);
          } while (t);

          return n;
        }

        function Ei(e, t) {
          return oa(ea(e, t, Iu), e + "");
        }

        function xi(e) {
          return xr(du(e));
        }

        function Ci(e, t) {
          var n = du(e);
          return ua(n, jr(t, 0, n.length));
        }

        function Ai(e, t, n, r) {
          if (!Ss(e)) return e;

          for (var i = -1, a = (t = zi(t, e)).length, s = a - 1, u = e; null != u && ++i < a;) {
            var c = la(t[i]),
                l = n;

            if (i != s) {
              var f = u[c];
              (l = r ? r(f, c, u) : o) === o && (l = Ss(f) ? f : zo(t[i + 1]) ? [] : {});
            }

            Or(u, c, l), u = u[c];
          }

          return e;
        }

        var Si = rr ? function (e, t) {
          return rr.set(e, t), e;
        } : Iu,
            Oi = dn ? function (e, t) {
          return dn(e, "toString", {
            configurable: !0,
            enumerable: !1,
            value: Su(t),
            writable: !0
          });
        } : Iu;

        function Di(e) {
          return ua(du(e));
        }

        function Ii(e, t, n) {
          var i = -1,
              o = e.length;
          t < 0 && (t = -t > o ? 0 : o + t), (n = n > o ? o : n) < 0 && (n += o), o = t > n ? 0 : n - t >>> 0, t >>>= 0;

          for (var a = r(o); ++i < o;) {
            a[i] = e[i + t];
          }

          return a;
        }

        function ki(e, t) {
          var n;
          return Mr(e, function (e, r, i) {
            return !(n = t(e, r, i));
          }), !!n;
        }

        function Ni(e, t, n) {
          var r = 0,
              i = null == e ? r : e.length;

          if ("number" == typeof t && t == t && i <= M) {
            for (; r < i;) {
              var o = r + i >>> 1,
                  a = e[o];
              null !== a && !Ps(a) && (n ? a <= t : a < t) ? r = o + 1 : i = o;
            }

            return i;
          }

          return Li(e, t, Iu, n);
        }

        function Li(e, t, n, r) {
          t = n(t);

          for (var i = 0, a = null == e ? 0 : e.length, s = t != t, u = null === t, c = Ps(t), l = t === o; i < a;) {
            var f = Mn((i + a) / 2),
                p = n(e[f]),
                d = p !== o,
                h = null === p,
                v = p == p,
                g = Ps(p);
            if (s) var m = r || v;else m = l ? v && (r || d) : u ? v && d && (r || !h) : c ? v && d && !h && (r || !g) : !h && !g && (r ? p <= t : p < t);
            m ? i = f + 1 : a = f;
          }

          return zn(a, H);
        }

        function ji(e, t) {
          for (var n = -1, r = e.length, i = 0, o = []; ++n < r;) {
            var a = e[n],
                s = t ? t(a) : a;

            if (!n || !ds(s, u)) {
              var u = s;
              o[i++] = 0 === a ? 0 : a;
            }
          }

          return o;
        }

        function Pi(e) {
          return "number" == typeof e ? e : Ps(e) ? R : +e;
        }

        function Ri(e) {
          if ("string" == typeof e) return e;
          if (ms(e)) return Zt(e, Ri) + "";
          if (Ps(e)) return pr ? pr.call(e) : "";
          var t = e + "";
          return "0" == t && 1 / e == -L ? "-0" : t;
        }

        function $i(e, t, n) {
          var r = -1,
              i = Yt,
              o = e.length,
              s = !0,
              u = [],
              c = u;
          if (n) s = !1, i = Jt;else if (o >= a) {
            var l = t ? null : Eo(e);
            if (l) return Dn(l);
            s = !1, i = _n, c = new wr();
          } else c = t ? [] : u;

          e: for (; ++r < o;) {
            var f = e[r],
                p = t ? t(f) : f;

            if (f = n || 0 !== f ? f : 0, s && p == p) {
              for (var d = c.length; d--;) {
                if (c[d] === p) continue e;
              }

              t && c.push(p), u.push(f);
            } else i(c, p, n) || (c !== u && c.push(p), u.push(f));
          }

          return u;
        }

        function Hi(e, t) {
          return null == (e = ta(e, t = zi(t, e))) || delete e[la(Ea(t))];
        }

        function Mi(e, t, n, r) {
          return Ai(e, t, n(Qr(e, t)), r);
        }

        function Fi(e, t, n, r) {
          for (var i = e.length, o = r ? i : -1; (r ? o-- : ++o < i) && t(e[o], o, e);) {
            ;
          }

          return n ? Ii(e, r ? 0 : o, r ? o + 1 : i) : Ii(e, r ? o + 1 : 0, r ? i : o);
        }

        function Wi(e, t) {
          var n = e;
          return n instanceof mr && (n = n.value()), tn(t, function (e, t) {
            return t.func.apply(t.thisArg, en([e], t.args));
          }, n);
        }

        function qi(e, t, n) {
          var i = e.length;
          if (i < 2) return i ? $i(e[0]) : [];

          for (var o = -1, a = r(i); ++o < i;) {
            for (var s = e[o], u = -1; ++u < i;) {
              u != o && (a[o] = Hr(a[o] || s, e[u], t, n));
            }
          }

          return $i(Ur(a, 1), t, n);
        }

        function Bi(e, t, n) {
          for (var r = -1, i = e.length, a = t.length, s = {}; ++r < i;) {
            var u = r < a ? t[r] : o;
            n(s, e[r], u);
          }

          return s;
        }

        function Ui(e) {
          return bs(e) ? e : [];
        }

        function Vi(e) {
          return "function" == typeof e ? e : Iu;
        }

        function zi(e, t) {
          return ms(e) ? e : Go(e, t) ? [e] : ca(Vs(e));
        }

        var Ki = Ei;

        function Gi(e, t, n) {
          var r = e.length;
          return n = n === o ? r : n, !t && n >= r ? e : Ii(e, t, n);
        }

        var Xi = Pn || function (e) {
          return Lt.clearTimeout(e);
        };

        function Qi(e, t) {
          if (t) return e.slice();
          var n = e.length,
              r = Ot ? Ot(n) : new e.constructor(n);
          return e.copy(r), r;
        }

        function Yi(e) {
          var t = new e.constructor(e.byteLength);
          return new Tt(t).set(new Tt(e)), t;
        }

        function Ji(e, t) {
          var n = t ? Yi(e.buffer) : e.buffer;
          return new e.constructor(n, e.byteOffset, e.length);
        }

        function Zi(e, t) {
          if (e !== t) {
            var n = e !== o,
                r = null === e,
                i = e == e,
                a = Ps(e),
                s = t !== o,
                u = null === t,
                c = t == t,
                l = Ps(t);
            if (!u && !l && !a && e > t || a && s && c && !u && !l || r && s && c || !n && c || !i) return 1;
            if (!r && !a && !l && e < t || l && n && i && !r && !a || u && n && i || !s && i || !c) return -1;
          }

          return 0;
        }

        function eo(e, t, n, i) {
          for (var o = -1, a = e.length, s = n.length, u = -1, c = t.length, l = Vn(a - s, 0), f = r(c + l), p = !i; ++u < c;) {
            f[u] = t[u];
          }

          for (; ++o < s;) {
            (p || o < a) && (f[n[o]] = e[o]);
          }

          for (; l--;) {
            f[u++] = e[o++];
          }

          return f;
        }

        function to(e, t, n, i) {
          for (var o = -1, a = e.length, s = -1, u = n.length, c = -1, l = t.length, f = Vn(a - u, 0), p = r(f + l), d = !i; ++o < f;) {
            p[o] = e[o];
          }

          for (var h = o; ++c < l;) {
            p[h + c] = t[c];
          }

          for (; ++s < u;) {
            (d || o < a) && (p[h + n[s]] = e[o++]);
          }

          return p;
        }

        function no(e, t) {
          var n = -1,
              i = e.length;

          for (t || (t = r(i)); ++n < i;) {
            t[n] = e[n];
          }

          return t;
        }

        function ro(e, t, n, r) {
          var i = !n;
          n || (n = {});

          for (var a = -1, s = t.length; ++a < s;) {
            var u = t[a],
                c = r ? r(n[u], e[u], u, n, e) : o;
            c === o && (c = e[u]), i ? Nr(n, u, c) : Or(n, u, c);
          }

          return n;
        }

        function io(e, t) {
          return function (n, r) {
            var i = ms(n) ? zt : Ir,
                o = t ? t() : {};
            return i(n, e, Ro(r, 2), o);
          };
        }

        function oo(e) {
          return Ei(function (t, n) {
            var r = -1,
                i = n.length,
                a = i > 1 ? n[i - 1] : o,
                s = i > 2 ? n[2] : o;

            for (a = e.length > 3 && "function" == typeof a ? (i--, a) : o, s && Ko(n[0], n[1], s) && (a = i < 3 ? o : a, i = 1), t = tt(t); ++r < i;) {
              var u = n[r];
              u && e(t, u, r, a);
            }

            return t;
          });
        }

        function ao(e, t) {
          return function (n, r) {
            if (null == n) return n;
            if (!_s(n)) return e(n, r);

            for (var i = n.length, o = t ? i : -1, a = tt(n); (t ? o-- : ++o < i) && !1 !== r(a[o], o, a);) {
              ;
            }

            return n;
          };
        }

        function so(e) {
          return function (t, n, r) {
            for (var i = -1, o = tt(t), a = r(t), s = a.length; s--;) {
              var u = a[e ? s : ++i];
              if (!1 === n(o[u], u, o)) break;
            }

            return t;
          };
        }

        function uo(e) {
          return function (t) {
            var n = Cn(t = Vs(t)) ? Nn(t) : o,
                r = n ? n[0] : t.charAt(0),
                i = n ? Gi(n, 1).join("") : t.slice(1);
            return r[e]() + i;
          };
        }

        function co(e) {
          return function (t) {
            return tn(xu(gu(t).replace(yt, "")), e, "");
          };
        }

        function lo(e) {
          return function () {
            var t = arguments;

            switch (t.length) {
              case 0:
                return new e();

              case 1:
                return new e(t[0]);

              case 2:
                return new e(t[0], t[1]);

              case 3:
                return new e(t[0], t[1], t[2]);

              case 4:
                return new e(t[0], t[1], t[2], t[3]);

              case 5:
                return new e(t[0], t[1], t[2], t[3], t[4]);

              case 6:
                return new e(t[0], t[1], t[2], t[3], t[4], t[5]);

              case 7:
                return new e(t[0], t[1], t[2], t[3], t[4], t[5], t[6]);
            }

            var n = hr(e.prototype),
                r = e.apply(n, t);
            return Ss(r) ? r : n;
          };
        }

        function fo(e) {
          return function (t, n, r) {
            var i = tt(t);

            if (!_s(t)) {
              var a = Ro(n, 3);
              t = iu(t), n = function n(e) {
                return a(i[e], e, i);
              };
            }

            var s = e(t, n, r);
            return s > -1 ? i[a ? t[s] : s] : o;
          };
        }

        function po(e) {
          return Io(function (t) {
            var n = t.length,
                r = n,
                i = gr.prototype.thru;

            for (e && t.reverse(); r--;) {
              var a = t[r];
              if ("function" != typeof a) throw new it(u);
              if (i && !s && "wrapper" == jo(a)) var s = new gr([], !0);
            }

            for (r = s ? r : n; ++r < n;) {
              var c = jo(a = t[r]),
                  l = "wrapper" == c ? Lo(a) : o;
              s = l && Xo(l[0]) && l[1] == (x | b | T | C) && !l[4].length && 1 == l[9] ? s[jo(l[0])].apply(s, l[3]) : 1 == a.length && Xo(a) ? s[c]() : s.thru(a);
            }

            return function () {
              var e = arguments,
                  r = e[0];
              if (s && 1 == e.length && ms(r)) return s.plant(r).value();

              for (var i = 0, o = n ? t[i].apply(this, e) : r; ++i < n;) {
                o = t[i].call(this, o);
              }

              return o;
            };
          });
        }

        function ho(e, t, n, i, a, s, u, c, l, f) {
          var p = t & x,
              d = t & m,
              h = t & y,
              v = t & (b | w),
              g = t & A,
              _ = h ? o : lo(e);

          return function m() {
            for (var y = arguments.length, b = r(y), w = y; w--;) {
              b[w] = arguments[w];
            }

            if (v) var T = Po(m),
                E = function (e, t) {
              for (var n = e.length, r = 0; n--;) {
                e[n] === t && ++r;
              }

              return r;
            }(b, T);

            if (i && (b = eo(b, i, a, v)), s && (b = to(b, s, u, v)), y -= E, v && y < f) {
              var x = On(b, T);
              return wo(e, t, ho, m.placeholder, n, b, x, c, l, f - y);
            }

            var C = d ? n : this,
                A = h ? C[e] : e;
            return y = b.length, c ? b = function (e, t) {
              for (var n = e.length, r = zn(t.length, n), i = no(e); r--;) {
                var a = t[r];
                e[r] = zo(a, n) ? i[a] : o;
              }

              return e;
            }(b, c) : g && y > 1 && b.reverse(), p && l < y && (b.length = l), this && this !== Lt && this instanceof m && (A = _ || lo(A)), A.apply(C, b);
          };
        }

        function vo(e, t) {
          return function (n, r) {
            return function (e, t, n, r) {
              return Kr(e, function (e, i, o) {
                t(r, n(e), i, o);
              }), r;
            }(n, e, t(r), {});
          };
        }

        function go(e, t) {
          return function (n, r) {
            var i;
            if (n === o && r === o) return t;

            if (n !== o && (i = n), r !== o) {
              if (i === o) return r;
              "string" == typeof n || "string" == typeof r ? (n = Ri(n), r = Ri(r)) : (n = Pi(n), r = Pi(r)), i = e(n, r);
            }

            return i;
          };
        }

        function mo(e) {
          return Io(function (t) {
            return t = Zt(t, mn(Ro())), Ei(function (n) {
              var r = this;
              return e(t, function (e) {
                return Vt(e, r, n);
              });
            });
          });
        }

        function yo(e, t) {
          var n = (t = t === o ? " " : Ri(t)).length;
          if (n < 2) return n ? Ti(t, e) : t;
          var r = Ti(t, Hn(e / kn(t)));
          return Cn(t) ? Gi(Nn(r), 0, e).join("") : r.slice(0, e);
        }

        function _o(e) {
          return function (t, n, i) {
            return i && "number" != typeof i && Ko(t, n, i) && (n = i = o), t = Fs(t), n === o ? (n = t, t = 0) : n = Fs(n), function (e, t, n, i) {
              for (var o = -1, a = Vn(Hn((t - e) / (n || 1)), 0), s = r(a); a--;) {
                s[i ? a : ++o] = e, e += n;
              }

              return s;
            }(t, n, i = i === o ? t < n ? 1 : -1 : Fs(i), e);
          };
        }

        function bo(e) {
          return function (t, n) {
            return "string" == typeof t && "string" == typeof n || (t = Bs(t), n = Bs(n)), e(t, n);
          };
        }

        function wo(e, t, n, r, i, a, s, u, c, l) {
          var f = t & b;
          t |= f ? T : E, (t &= ~(f ? E : T)) & _ || (t &= ~(m | y));
          var p = [e, t, i, f ? a : o, f ? s : o, f ? o : a, f ? o : s, u, c, l],
              d = n.apply(o, p);
          return Xo(e) && ra(d, p), d.placeholder = r, aa(d, e, t);
        }

        function To(e) {
          var t = et[e];
          return function (e, n) {
            if (e = Bs(e), n = null == n ? 0 : zn(Ws(n), 292)) {
              var r = (Vs(e) + "e").split("e");
              return +((r = (Vs(t(r[0] + "e" + (+r[1] + n))) + "e").split("e"))[0] + "e" + (+r[1] - n));
            }

            return t(e);
          };
        }

        var Eo = er && 1 / Dn(new er([, -0]))[1] == L ? function (e) {
          return new er(e);
        } : Pu;

        function xo(e) {
          return function (t) {
            var n = qo(t);
            return n == Q ? An(t) : n == ne ? In(t) : function (e, t) {
              return Zt(t, function (t) {
                return [t, e[t]];
              });
            }(t, e(t));
          };
        }

        function Co(e, t, n, i, a, s, c, l) {
          var p = t & y;
          if (!p && "function" != typeof e) throw new it(u);
          var d = i ? i.length : 0;

          if (d || (t &= ~(T | E), i = a = o), c = c === o ? c : Vn(Ws(c), 0), l = l === o ? l : Ws(l), d -= a ? a.length : 0, t & E) {
            var h = i,
                v = a;
            i = a = o;
          }

          var g = p ? o : Lo(e),
              A = [e, t, n, i, a, h, v, s, c, l];
          if (g && function (e, t) {
            var n = e[1],
                r = t[1],
                i = n | r,
                o = i < (m | y | x),
                a = r == x && n == b || r == x && n == C && e[7].length <= t[8] || r == (x | C) && t[7].length <= t[8] && n == b;
            if (!o && !a) return e;
            r & m && (e[2] = t[2], i |= n & m ? 0 : _);
            var s = t[3];

            if (s) {
              var u = e[3];
              e[3] = u ? eo(u, s, t[4]) : s, e[4] = u ? On(e[3], f) : t[4];
            }

            (s = t[5]) && (u = e[5], e[5] = u ? to(u, s, t[6]) : s, e[6] = u ? On(e[5], f) : t[6]), (s = t[7]) && (e[7] = s), r & x && (e[8] = null == e[8] ? t[8] : zn(e[8], t[8])), null == e[9] && (e[9] = t[9]), e[0] = t[0], e[1] = i;
          }(A, g), e = A[0], t = A[1], n = A[2], i = A[3], a = A[4], !(l = A[9] = A[9] === o ? p ? 0 : e.length : Vn(A[9] - d, 0)) && t & (b | w) && (t &= ~(b | w)), t && t != m) S = t == b || t == w ? function (e, t, n) {
            var i = lo(e);
            return function a() {
              for (var s = arguments.length, u = r(s), c = s, l = Po(a); c--;) {
                u[c] = arguments[c];
              }

              var f = s < 3 && u[0] !== l && u[s - 1] !== l ? [] : On(u, l);
              return (s -= f.length) < n ? wo(e, t, ho, a.placeholder, o, u, f, o, o, n - s) : Vt(this && this !== Lt && this instanceof a ? i : e, this, u);
            };
          }(e, t, l) : t != T && t != (m | T) || a.length ? ho.apply(o, A) : function (e, t, n, i) {
            var o = t & m,
                a = lo(e);
            return function t() {
              for (var s = -1, u = arguments.length, c = -1, l = i.length, f = r(l + u), p = this && this !== Lt && this instanceof t ? a : e; ++c < l;) {
                f[c] = i[c];
              }

              for (; u--;) {
                f[c++] = arguments[++s];
              }

              return Vt(p, o ? n : this, f);
            };
          }(e, t, n, i);else var S = function (e, t, n) {
            var r = t & m,
                i = lo(e);
            return function t() {
              return (this && this !== Lt && this instanceof t ? i : e).apply(r ? n : this, arguments);
            };
          }(e, t, n);
          return aa((g ? Si : ra)(S, A), e, t);
        }

        function Ao(e, t, n, r) {
          return e === o || ds(e, st[n]) && !lt.call(r, n) ? t : e;
        }

        function So(e, t, n, r, i, a) {
          return Ss(e) && Ss(t) && (a.set(t, e), vi(e, t, o, So, a), a["delete"](t)), e;
        }

        function Oo(e) {
          return ks(e) ? o : e;
        }

        function Do(e, t, n, r, i, a) {
          var s = n & v,
              u = e.length,
              c = t.length;
          if (u != c && !(s && c > u)) return !1;
          var l = a.get(e);
          if (l && a.get(t)) return l == t;
          var f = -1,
              p = !0,
              d = n & g ? new wr() : o;

          for (a.set(e, t), a.set(t, e); ++f < u;) {
            var h = e[f],
                m = t[f];
            if (r) var y = s ? r(m, h, f, t, e, a) : r(h, m, f, e, t, a);

            if (y !== o) {
              if (y) continue;
              p = !1;
              break;
            }

            if (d) {
              if (!rn(t, function (e, t) {
                if (!_n(d, t) && (h === e || i(h, e, n, r, a))) return d.push(t);
              })) {
                p = !1;
                break;
              }
            } else if (h !== m && !i(h, m, n, r, a)) {
              p = !1;
              break;
            }
          }

          return a["delete"](e), a["delete"](t), p;
        }

        function Io(e) {
          return oa(ea(e, o, ya), e + "");
        }

        function ko(e) {
          return Yr(e, iu, Fo);
        }

        function No(e) {
          return Yr(e, ou, Wo);
        }

        var Lo = rr ? function (e) {
          return rr.get(e);
        } : Pu;

        function jo(e) {
          for (var t = e.name + "", n = ir[t], r = lt.call(ir, t) ? n.length : 0; r--;) {
            var i = n[r],
                o = i.func;
            if (null == o || o == e) return i.name;
          }

          return t;
        }

        function Po(e) {
          return (lt.call(dr, "placeholder") ? dr : e).placeholder;
        }

        function Ro() {
          var e = dr.iteratee || ku;
          return e = e === ku ? ui : e, arguments.length ? e(arguments[0], arguments[1]) : e;
        }

        function $o(e, t) {
          var n,
              r,
              i = e.__data__;
          return ("string" == (r = _typeof(n = t)) || "number" == r || "symbol" == r || "boolean" == r ? "__proto__" !== n : null === n) ? i["string" == typeof t ? "string" : "hash"] : i.map;
        }

        function Ho(e) {
          for (var t = iu(e), n = t.length; n--;) {
            var r = t[n],
                i = e[r];
            t[n] = [r, i, Jo(i)];
          }

          return t;
        }

        function Mo(e, t) {
          var n = function (e, t) {
            return null == e ? o : e[t];
          }(e, t);

          return si(n) ? n : o;
        }

        var Fo = Fn ? function (e) {
          return null == e ? [] : (e = tt(e), Qt(Fn(e), function (t) {
            return jt.call(e, t);
          }));
        } : qu,
            Wo = Fn ? function (e) {
          for (var t = []; e;) {
            en(t, Fo(e)), e = kt(e);
          }

          return t;
        } : qu,
            qo = Jr;

        function Bo(e, t, n) {
          for (var r = -1, i = (t = zi(t, e)).length, o = !1; ++r < i;) {
            var a = la(t[r]);
            if (!(o = null != e && n(e, a))) break;
            e = e[a];
          }

          return o || ++r != i ? o : !!(i = null == e ? 0 : e.length) && As(i) && zo(a, i) && (ms(e) || gs(e));
        }

        function Uo(e) {
          return "function" != typeof e.constructor || Yo(e) ? {} : hr(kt(e));
        }

        function Vo(e) {
          return ms(e) || gs(e) || !!($t && e && e[$t]);
        }

        function zo(e, t) {
          var n = _typeof(e);

          return !!(t = null == t ? j : t) && ("number" == n || "symbol" != n && Ge.test(e)) && e > -1 && e % 1 == 0 && e < t;
        }

        function Ko(e, t, n) {
          if (!Ss(n)) return !1;

          var r = _typeof(t);

          return !!("number" == r ? _s(n) && zo(t, n.length) : "string" == r && t in n) && ds(n[t], e);
        }

        function Go(e, t) {
          if (ms(e)) return !1;

          var n = _typeof(e);

          return !("number" != n && "symbol" != n && "boolean" != n && null != e && !Ps(e)) || Ie.test(e) || !De.test(e) || null != t && e in tt(t);
        }

        function Xo(e) {
          var t = jo(e),
              n = dr[t];
          if ("function" != typeof n || !(t in mr.prototype)) return !1;
          if (e === n) return !0;
          var r = Lo(n);
          return !!r && e === r[0];
        }

        (Yn && qo(new Yn(new ArrayBuffer(1))) != ce || Jn && qo(new Jn()) != Q || Zn && "[object Promise]" != qo(Zn.resolve()) || er && qo(new er()) != ne || tr && qo(new tr()) != ae) && (qo = function qo(e) {
          var t = Jr(e),
              n = t == Z ? e.constructor : o,
              r = n ? fa(n) : "";
          if (r) switch (r) {
            case or:
              return ce;

            case ar:
              return Q;

            case sr:
              return "[object Promise]";

            case ur:
              return ne;

            case cr:
              return ae;
          }
          return t;
        });
        var Qo = ut ? xs : Bu;

        function Yo(e) {
          var t = e && e.constructor;
          return e === ("function" == typeof t && t.prototype || st);
        }

        function Jo(e) {
          return e == e && !Ss(e);
        }

        function Zo(e, t) {
          return function (n) {
            return null != n && n[e] === t && (t !== o || e in tt(n));
          };
        }

        function ea(e, t, n) {
          return t = Vn(t === o ? e.length - 1 : t, 0), function () {
            for (var i = arguments, o = -1, a = Vn(i.length - t, 0), s = r(a); ++o < a;) {
              s[o] = i[t + o];
            }

            o = -1;

            for (var u = r(t + 1); ++o < t;) {
              u[o] = i[o];
            }

            return u[t] = n(s), Vt(e, this, u);
          };
        }

        function ta(e, t) {
          return t.length < 2 ? e : Qr(e, Ii(t, 0, -1));
        }

        function na(e, t) {
          if ("__proto__" != t) return e[t];
        }

        var ra = sa(Si),
            ia = $n || function (e, t) {
          return Lt.setTimeout(e, t);
        },
            oa = sa(Oi);

        function aa(e, t, n) {
          var r = t + "";
          return oa(e, function (e, t) {
            var n = t.length;
            if (!n) return e;
            var r = n - 1;
            return t[r] = (n > 1 ? "& " : "") + t[r], t = t.join(n > 2 ? ", " : " "), e.replace($e, "{\n/* [wrapped with " + t + "] */\n");
          }(r, function (e, t) {
            return Kt(F, function (n) {
              var r = "_." + n[0];
              t & n[1] && !Yt(e, r) && e.push(r);
            }), e.sort();
          }(function (e) {
            var t = e.match(He);
            return t ? t[1].split(Me) : [];
          }(r), n)));
        }

        function sa(e) {
          var t = 0,
              n = 0;
          return function () {
            var r = Kn(),
                i = I - (r - n);

            if (n = r, i > 0) {
              if (++t >= D) return arguments[0];
            } else t = 0;

            return e.apply(o, arguments);
          };
        }

        function ua(e, t) {
          var n = -1,
              r = e.length,
              i = r - 1;

          for (t = t === o ? r : t; ++n < t;) {
            var a = wi(n, i),
                s = e[a];
            e[a] = e[n], e[n] = s;
          }

          return e.length = t, e;
        }

        var ca = function (e) {
          var t = ss(e, function (e) {
            return n.size === l && n.clear(), e;
          }),
              n = t.cache;
          return t;
        }(function (e) {
          var t = [];
          return 46 === e.charCodeAt(0) && t.push(""), e.replace(ke, function (e, n, r, i) {
            t.push(r ? i.replace(We, "$1") : n || e);
          }), t;
        });

        function la(e) {
          if ("string" == typeof e || Ps(e)) return e;
          var t = e + "";
          return "0" == t && 1 / e == -L ? "-0" : t;
        }

        function fa(e) {
          if (null != e) {
            try {
              return ct.call(e);
            } catch (e) {}

            try {
              return e + "";
            } catch (e) {}
          }

          return "";
        }

        function pa(e) {
          if (e instanceof mr) return e.clone();
          var t = new gr(e.__wrapped__, e.__chain__);
          return t.__actions__ = no(e.__actions__), t.__index__ = e.__index__, t.__values__ = e.__values__, t;
        }

        var da = Ei(function (e, t) {
          return bs(e) ? Hr(e, Ur(t, 1, bs, !0)) : [];
        }),
            ha = Ei(function (e, t) {
          var n = Ea(t);
          return bs(n) && (n = o), bs(e) ? Hr(e, Ur(t, 1, bs, !0), Ro(n, 2)) : [];
        }),
            va = Ei(function (e, t) {
          var n = Ea(t);
          return bs(n) && (n = o), bs(e) ? Hr(e, Ur(t, 1, bs, !0), o, n) : [];
        });

        function ga(e, t, n) {
          var r = null == e ? 0 : e.length;
          if (!r) return -1;
          var i = null == n ? 0 : Ws(n);
          return i < 0 && (i = Vn(r + i, 0)), sn(e, Ro(t, 3), i);
        }

        function ma(e, t, n) {
          var r = null == e ? 0 : e.length;
          if (!r) return -1;
          var i = r - 1;
          return n !== o && (i = Ws(n), i = n < 0 ? Vn(r + i, 0) : zn(i, r - 1)), sn(e, Ro(t, 3), i, !0);
        }

        function ya(e) {
          return null != e && e.length ? Ur(e, 1) : [];
        }

        function _a(e) {
          return e && e.length ? e[0] : o;
        }

        var ba = Ei(function (e) {
          var t = Zt(e, Ui);
          return t.length && t[0] === e[0] ? ni(t) : [];
        }),
            wa = Ei(function (e) {
          var t = Ea(e),
              n = Zt(e, Ui);
          return t === Ea(n) ? t = o : n.pop(), n.length && n[0] === e[0] ? ni(n, Ro(t, 2)) : [];
        }),
            Ta = Ei(function (e) {
          var t = Ea(e),
              n = Zt(e, Ui);
          return (t = "function" == typeof t ? t : o) && n.pop(), n.length && n[0] === e[0] ? ni(n, o, t) : [];
        });

        function Ea(e) {
          var t = null == e ? 0 : e.length;
          return t ? e[t - 1] : o;
        }

        var xa = Ei(Ca);

        function Ca(e, t) {
          return e && e.length && t && t.length ? _i(e, t) : e;
        }

        var Aa = Io(function (e, t) {
          var n = null == e ? 0 : e.length,
              r = Lr(e, t);
          return bi(e, Zt(t, function (e) {
            return zo(e, n) ? +e : e;
          }).sort(Zi)), r;
        });

        function Sa(e) {
          return null == e ? e : Qn.call(e);
        }

        var Oa = Ei(function (e) {
          return $i(Ur(e, 1, bs, !0));
        }),
            Da = Ei(function (e) {
          var t = Ea(e);
          return bs(t) && (t = o), $i(Ur(e, 1, bs, !0), Ro(t, 2));
        }),
            Ia = Ei(function (e) {
          var t = Ea(e);
          return t = "function" == typeof t ? t : o, $i(Ur(e, 1, bs, !0), o, t);
        });

        function ka(e) {
          if (!e || !e.length) return [];
          var t = 0;
          return e = Qt(e, function (e) {
            if (bs(e)) return t = Vn(e.length, t), !0;
          }), gn(t, function (t) {
            return Zt(e, pn(t));
          });
        }

        function Na(e, t) {
          if (!e || !e.length) return [];
          var n = ka(e);
          return null == t ? n : Zt(n, function (e) {
            return Vt(t, o, e);
          });
        }

        var La = Ei(function (e, t) {
          return bs(e) ? Hr(e, t) : [];
        }),
            ja = Ei(function (e) {
          return qi(Qt(e, bs));
        }),
            Pa = Ei(function (e) {
          var t = Ea(e);
          return bs(t) && (t = o), qi(Qt(e, bs), Ro(t, 2));
        }),
            Ra = Ei(function (e) {
          var t = Ea(e);
          return t = "function" == typeof t ? t : o, qi(Qt(e, bs), o, t);
        }),
            $a = Ei(ka);
        var Ha = Ei(function (e) {
          var t = e.length,
              n = t > 1 ? e[t - 1] : o;
          return n = "function" == typeof n ? (e.pop(), n) : o, Na(e, n);
        });

        function Ma(e) {
          var t = dr(e);
          return t.__chain__ = !0, t;
        }

        function Fa(e, t) {
          return t(e);
        }

        var Wa = Io(function (e) {
          var t = e.length,
              n = t ? e[0] : 0,
              r = this.__wrapped__,
              i = function i(t) {
            return Lr(t, e);
          };

          return !(t > 1 || this.__actions__.length) && r instanceof mr && zo(n) ? ((r = r.slice(n, +n + (t ? 1 : 0))).__actions__.push({
            func: Fa,
            args: [i],
            thisArg: o
          }), new gr(r, this.__chain__).thru(function (e) {
            return t && !e.length && e.push(o), e;
          })) : this.thru(i);
        });
        var qa = io(function (e, t, n) {
          lt.call(e, n) ? ++e[n] : Nr(e, n, 1);
        });
        var Ba = fo(ga),
            Ua = fo(ma);

        function Va(e, t) {
          return (ms(e) ? Kt : Mr)(e, Ro(t, 3));
        }

        function za(e, t) {
          return (ms(e) ? Gt : Fr)(e, Ro(t, 3));
        }

        var Ka = io(function (e, t, n) {
          lt.call(e, n) ? e[n].push(t) : Nr(e, n, [t]);
        });
        var Ga = Ei(function (e, t, n) {
          var i = -1,
              o = "function" == typeof t,
              a = _s(e) ? r(e.length) : [];
          return Mr(e, function (e) {
            a[++i] = o ? Vt(t, e, n) : ri(e, t, n);
          }), a;
        }),
            Xa = io(function (e, t, n) {
          Nr(e, n, t);
        });

        function Qa(e, t) {
          return (ms(e) ? Zt : pi)(e, Ro(t, 3));
        }

        var Ya = io(function (e, t, n) {
          e[n ? 0 : 1].push(t);
        }, function () {
          return [[], []];
        });

        var Ja = Ei(function (e, t) {
          if (null == e) return [];
          var n = t.length;
          return n > 1 && Ko(e, t[0], t[1]) ? t = [] : n > 2 && Ko(t[0], t[1], t[2]) && (t = [t[0]]), mi(e, Ur(t, 1), []);
        }),
            Za = Rn || function () {
          return Lt.Date.now();
        };

        function es(e, t, n) {
          return t = n ? o : t, t = e && null == t ? e.length : t, Co(e, x, o, o, o, o, t);
        }

        function ts(e, t) {
          var n;
          if ("function" != typeof t) throw new it(u);
          return e = Ws(e), function () {
            return --e > 0 && (n = t.apply(this, arguments)), e <= 1 && (t = o), n;
          };
        }

        var ns = Ei(function (e, t, n) {
          var r = m;

          if (n.length) {
            var i = On(n, Po(ns));
            r |= T;
          }

          return Co(e, r, t, n, i);
        }),
            rs = Ei(function (e, t, n) {
          var r = m | y;

          if (n.length) {
            var i = On(n, Po(rs));
            r |= T;
          }

          return Co(t, r, e, n, i);
        });

        function is(e, t, n) {
          var r,
              i,
              a,
              s,
              c,
              l,
              f = 0,
              p = !1,
              d = !1,
              h = !0;
          if ("function" != typeof e) throw new it(u);

          function v(t) {
            var n = r,
                a = i;
            return r = i = o, f = t, s = e.apply(a, n);
          }

          function g(e) {
            var n = e - l;
            return l === o || n >= t || n < 0 || d && e - f >= a;
          }

          function m() {
            var e = Za();
            if (g(e)) return y(e);
            c = ia(m, function (e) {
              var n = t - (e - l);
              return d ? zn(n, a - (e - f)) : n;
            }(e));
          }

          function y(e) {
            return c = o, h && r ? v(e) : (r = i = o, s);
          }

          function _() {
            var e = Za(),
                n = g(e);

            if (r = arguments, i = this, l = e, n) {
              if (c === o) return function (e) {
                return f = e, c = ia(m, t), p ? v(e) : s;
              }(l);
              if (d) return c = ia(m, t), v(l);
            }

            return c === o && (c = ia(m, t)), s;
          }

          return t = Bs(t) || 0, Ss(n) && (p = !!n.leading, a = (d = "maxWait" in n) ? Vn(Bs(n.maxWait) || 0, t) : a, h = "trailing" in n ? !!n.trailing : h), _.cancel = function () {
            c !== o && Xi(c), f = 0, r = l = i = c = o;
          }, _.flush = function () {
            return c === o ? s : y(Za());
          }, _;
        }

        var os = Ei(function (e, t) {
          return $r(e, 1, t);
        }),
            as = Ei(function (e, t, n) {
          return $r(e, Bs(t) || 0, n);
        });

        function ss(e, t) {
          if ("function" != typeof e || null != t && "function" != typeof t) throw new it(u);

          var n = function n() {
            var r = arguments,
                i = t ? t.apply(this, r) : r[0],
                o = n.cache;
            if (o.has(i)) return o.get(i);
            var a = e.apply(this, r);
            return n.cache = o.set(i, a) || o, a;
          };

          return n.cache = new (ss.Cache || br)(), n;
        }

        function us(e) {
          if ("function" != typeof e) throw new it(u);
          return function () {
            var t = arguments;

            switch (t.length) {
              case 0:
                return !e.call(this);

              case 1:
                return !e.call(this, t[0]);

              case 2:
                return !e.call(this, t[0], t[1]);

              case 3:
                return !e.call(this, t[0], t[1], t[2]);
            }

            return !e.apply(this, t);
          };
        }

        ss.Cache = br;
        var cs = Ki(function (e, t) {
          var n = (t = 1 == t.length && ms(t[0]) ? Zt(t[0], mn(Ro())) : Zt(Ur(t, 1), mn(Ro()))).length;
          return Ei(function (r) {
            for (var i = -1, o = zn(r.length, n); ++i < o;) {
              r[i] = t[i].call(this, r[i]);
            }

            return Vt(e, this, r);
          });
        }),
            ls = Ei(function (e, t) {
          var n = On(t, Po(ls));
          return Co(e, T, o, t, n);
        }),
            fs = Ei(function (e, t) {
          var n = On(t, Po(fs));
          return Co(e, E, o, t, n);
        }),
            ps = Io(function (e, t) {
          return Co(e, C, o, o, o, t);
        });

        function ds(e, t) {
          return e === t || e != e && t != t;
        }

        var hs = bo(Zr),
            vs = bo(function (e, t) {
          return e >= t;
        }),
            gs = ii(function () {
          return arguments;
        }()) ? ii : function (e) {
          return Os(e) && lt.call(e, "callee") && !jt.call(e, "callee");
        },
            ms = r.isArray,
            ys = Mt ? mn(Mt) : function (e) {
          return Os(e) && Jr(e) == ue;
        };

        function _s(e) {
          return null != e && As(e.length) && !xs(e);
        }

        function bs(e) {
          return Os(e) && _s(e);
        }

        var ws = Wn || Bu,
            Ts = Ft ? mn(Ft) : function (e) {
          return Os(e) && Jr(e) == V;
        };

        function Es(e) {
          if (!Os(e)) return !1;
          var t = Jr(e);
          return t == K || t == z || "string" == typeof e.message && "string" == typeof e.name && !ks(e);
        }

        function xs(e) {
          if (!Ss(e)) return !1;
          var t = Jr(e);
          return t == G || t == X || t == B || t == ee;
        }

        function Cs(e) {
          return "number" == typeof e && e == Ws(e);
        }

        function As(e) {
          return "number" == typeof e && e > -1 && e % 1 == 0 && e <= j;
        }

        function Ss(e) {
          var t = _typeof(e);

          return null != e && ("object" == t || "function" == t);
        }

        function Os(e) {
          return null != e && "object" == _typeof(e);
        }

        var Ds = Wt ? mn(Wt) : function (e) {
          return Os(e) && qo(e) == Q;
        };

        function Is(e) {
          return "number" == typeof e || Os(e) && Jr(e) == Y;
        }

        function ks(e) {
          if (!Os(e) || Jr(e) != Z) return !1;
          var t = kt(e);
          if (null === t) return !0;
          var n = lt.call(t, "constructor") && t.constructor;
          return "function" == typeof n && n instanceof n && ct.call(n) == ht;
        }

        var Ns = qt ? mn(qt) : function (e) {
          return Os(e) && Jr(e) == te;
        };
        var Ls = Bt ? mn(Bt) : function (e) {
          return Os(e) && qo(e) == ne;
        };

        function js(e) {
          return "string" == typeof e || !ms(e) && Os(e) && Jr(e) == re;
        }

        function Ps(e) {
          return "symbol" == _typeof(e) || Os(e) && Jr(e) == ie;
        }

        var Rs = Ut ? mn(Ut) : function (e) {
          return Os(e) && As(e.length) && !!At[Jr(e)];
        };
        var $s = bo(fi),
            Hs = bo(function (e, t) {
          return e <= t;
        });

        function Ms(e) {
          if (!e) return [];
          if (_s(e)) return js(e) ? Nn(e) : no(e);
          if (Ht && e[Ht]) return function (e) {
            for (var t, n = []; !(t = e.next()).done;) {
              n.push(t.value);
            }

            return n;
          }(e[Ht]());
          var t = qo(e);
          return (t == Q ? An : t == ne ? Dn : du)(e);
        }

        function Fs(e) {
          return e ? (e = Bs(e)) === L || e === -L ? (e < 0 ? -1 : 1) * P : e == e ? e : 0 : 0 === e ? e : 0;
        }

        function Ws(e) {
          var t = Fs(e),
              n = t % 1;
          return t == t ? n ? t - n : t : 0;
        }

        function qs(e) {
          return e ? jr(Ws(e), 0, $) : 0;
        }

        function Bs(e) {
          if ("number" == typeof e) return e;
          if (Ps(e)) return R;

          if (Ss(e)) {
            var t = "function" == typeof e.valueOf ? e.valueOf() : e;
            e = Ss(t) ? t + "" : t;
          }

          if ("string" != typeof e) return 0 === e ? e : +e;
          e = e.replace(je, "");
          var n = Ve.test(e);
          return n || Ke.test(e) ? It(e.slice(2), n ? 2 : 8) : Ue.test(e) ? R : +e;
        }

        function Us(e) {
          return ro(e, ou(e));
        }

        function Vs(e) {
          return null == e ? "" : Ri(e);
        }

        var zs = oo(function (e, t) {
          if (Yo(t) || _s(t)) ro(t, iu(t), e);else for (var n in t) {
            lt.call(t, n) && Or(e, n, t[n]);
          }
        }),
            Ks = oo(function (e, t) {
          ro(t, ou(t), e);
        }),
            Gs = oo(function (e, t, n, r) {
          ro(t, ou(t), e, r);
        }),
            Xs = oo(function (e, t, n, r) {
          ro(t, iu(t), e, r);
        }),
            Qs = Io(Lr);
        var Ys = Ei(function (e, t) {
          e = tt(e);
          var n = -1,
              r = t.length,
              i = r > 2 ? t[2] : o;

          for (i && Ko(t[0], t[1], i) && (r = 1); ++n < r;) {
            for (var a = t[n], s = ou(a), u = -1, c = s.length; ++u < c;) {
              var l = s[u],
                  f = e[l];
              (f === o || ds(f, st[l]) && !lt.call(e, l)) && (e[l] = a[l]);
            }
          }

          return e;
        }),
            Js = Ei(function (e) {
          return e.push(o, So), Vt(su, o, e);
        });

        function Zs(e, t, n) {
          var r = null == e ? o : Qr(e, t);
          return r === o ? n : r;
        }

        function eu(e, t) {
          return null != e && Bo(e, t, ti);
        }

        var tu = vo(function (e, t, n) {
          null != t && "function" != typeof t.toString && (t = dt.call(t)), e[t] = n;
        }, Su(Iu)),
            nu = vo(function (e, t, n) {
          null != t && "function" != typeof t.toString && (t = dt.call(t)), lt.call(e, t) ? e[t].push(n) : e[t] = [n];
        }, Ro),
            ru = Ei(ri);

        function iu(e) {
          return _s(e) ? Er(e) : ci(e);
        }

        function ou(e) {
          return _s(e) ? Er(e, !0) : li(e);
        }

        var au = oo(function (e, t, n) {
          vi(e, t, n);
        }),
            su = oo(function (e, t, n, r) {
          vi(e, t, n, r);
        }),
            uu = Io(function (e, t) {
          var n = {};
          if (null == e) return n;
          var r = !1;
          t = Zt(t, function (t) {
            return t = zi(t, e), r || (r = t.length > 1), t;
          }), ro(e, No(e), n), r && (n = Pr(n, p | d | h, Oo));

          for (var i = t.length; i--;) {
            Hi(n, t[i]);
          }

          return n;
        });
        var cu = Io(function (e, t) {
          return null == e ? {} : function (e, t) {
            return yi(e, t, function (t, n) {
              return eu(e, n);
            });
          }(e, t);
        });

        function lu(e, t) {
          if (null == e) return {};
          var n = Zt(No(e), function (e) {
            return [e];
          });
          return t = Ro(t), yi(e, n, function (e, n) {
            return t(e, n[0]);
          });
        }

        var fu = xo(iu),
            pu = xo(ou);

        function du(e) {
          return null == e ? [] : yn(e, iu(e));
        }

        var hu = co(function (e, t, n) {
          return t = t.toLowerCase(), e + (n ? vu(t) : t);
        });

        function vu(e) {
          return Eu(Vs(e).toLowerCase());
        }

        function gu(e) {
          return (e = Vs(e)) && e.replace(Xe, Tn).replace(_t, "");
        }

        var mu = co(function (e, t, n) {
          return e + (n ? "-" : "") + t.toLowerCase();
        }),
            yu = co(function (e, t, n) {
          return e + (n ? " " : "") + t.toLowerCase();
        }),
            _u = uo("toLowerCase");

        var bu = co(function (e, t, n) {
          return e + (n ? "_" : "") + t.toLowerCase();
        });
        var wu = co(function (e, t, n) {
          return e + (n ? " " : "") + Eu(t);
        });
        var Tu = co(function (e, t, n) {
          return e + (n ? " " : "") + t.toUpperCase();
        }),
            Eu = uo("toUpperCase");

        function xu(e, t, n) {
          return e = Vs(e), (t = n ? o : t) === o ? function (e) {
            return Et.test(e);
          }(e) ? function (e) {
            return e.match(wt) || [];
          }(e) : function (e) {
            return e.match(Fe) || [];
          }(e) : e.match(t) || [];
        }

        var Cu = Ei(function (e, t) {
          try {
            return Vt(e, o, t);
          } catch (e) {
            return Es(e) ? e : new Je(e);
          }
        }),
            Au = Io(function (e, t) {
          return Kt(t, function (t) {
            t = la(t), Nr(e, t, ns(e[t], e));
          }), e;
        });

        function Su(e) {
          return function () {
            return e;
          };
        }

        var Ou = po(),
            Du = po(!0);

        function Iu(e) {
          return e;
        }

        function ku(e) {
          return ui("function" == typeof e ? e : Pr(e, p));
        }

        var Nu = Ei(function (e, t) {
          return function (n) {
            return ri(n, e, t);
          };
        }),
            Lu = Ei(function (e, t) {
          return function (n) {
            return ri(e, n, t);
          };
        });

        function ju(e, t, n) {
          var r = iu(t),
              i = Xr(t, r);
          null != n || Ss(t) && (i.length || !r.length) || (n = t, t = e, e = this, i = Xr(t, iu(t)));
          var o = !(Ss(n) && "chain" in n && !n.chain),
              a = xs(e);
          return Kt(i, function (n) {
            var r = t[n];
            e[n] = r, a && (e.prototype[n] = function () {
              var t = this.__chain__;

              if (o || t) {
                var n = e(this.__wrapped__);
                return (n.__actions__ = no(this.__actions__)).push({
                  func: r,
                  args: arguments,
                  thisArg: e
                }), n.__chain__ = t, n;
              }

              return r.apply(e, en([this.value()], arguments));
            });
          }), e;
        }

        function Pu() {}

        var Ru = mo(Zt),
            $u = mo(Xt),
            Hu = mo(rn);

        function Mu(e) {
          return Go(e) ? pn(la(e)) : function (e) {
            return function (t) {
              return Qr(t, e);
            };
          }(e);
        }

        var Fu = _o(),
            Wu = _o(!0);

        function qu() {
          return [];
        }

        function Bu() {
          return !1;
        }

        var Uu = go(function (e, t) {
          return e + t;
        }, 0),
            Vu = To("ceil"),
            zu = go(function (e, t) {
          return e / t;
        }, 1),
            Ku = To("floor");
        var Gu,
            Xu = go(function (e, t) {
          return e * t;
        }, 1),
            Qu = To("round"),
            Yu = go(function (e, t) {
          return e - t;
        }, 0);
        return dr.after = function (e, t) {
          if ("function" != typeof t) throw new it(u);
          return e = Ws(e), function () {
            if (--e < 1) return t.apply(this, arguments);
          };
        }, dr.ary = es, dr.assign = zs, dr.assignIn = Ks, dr.assignInWith = Gs, dr.assignWith = Xs, dr.at = Qs, dr.before = ts, dr.bind = ns, dr.bindAll = Au, dr.bindKey = rs, dr.castArray = function () {
          if (!arguments.length) return [];
          var e = arguments[0];
          return ms(e) ? e : [e];
        }, dr.chain = Ma, dr.chunk = function (e, t, n) {
          t = (n ? Ko(e, t, n) : t === o) ? 1 : Vn(Ws(t), 0);
          var i = null == e ? 0 : e.length;
          if (!i || t < 1) return [];

          for (var a = 0, s = 0, u = r(Hn(i / t)); a < i;) {
            u[s++] = Ii(e, a, a += t);
          }

          return u;
        }, dr.compact = function (e) {
          for (var t = -1, n = null == e ? 0 : e.length, r = 0, i = []; ++t < n;) {
            var o = e[t];
            o && (i[r++] = o);
          }

          return i;
        }, dr.concat = function () {
          var e = arguments.length;
          if (!e) return [];

          for (var t = r(e - 1), n = arguments[0], i = e; i--;) {
            t[i - 1] = arguments[i];
          }

          return en(ms(n) ? no(n) : [n], Ur(t, 1));
        }, dr.cond = function (e) {
          var t = null == e ? 0 : e.length,
              n = Ro();
          return e = t ? Zt(e, function (e) {
            if ("function" != typeof e[1]) throw new it(u);
            return [n(e[0]), e[1]];
          }) : [], Ei(function (n) {
            for (var r = -1; ++r < t;) {
              var i = e[r];
              if (Vt(i[0], this, n)) return Vt(i[1], this, n);
            }
          });
        }, dr.conforms = function (e) {
          return function (e) {
            var t = iu(e);
            return function (n) {
              return Rr(n, e, t);
            };
          }(Pr(e, p));
        }, dr.constant = Su, dr.countBy = qa, dr.create = function (e, t) {
          var n = hr(e);
          return null == t ? n : kr(n, t);
        }, dr.curry = function e(t, n, r) {
          var i = Co(t, b, o, o, o, o, o, n = r ? o : n);
          return i.placeholder = e.placeholder, i;
        }, dr.curryRight = function e(t, n, r) {
          var i = Co(t, w, o, o, o, o, o, n = r ? o : n);
          return i.placeholder = e.placeholder, i;
        }, dr.debounce = is, dr.defaults = Ys, dr.defaultsDeep = Js, dr.defer = os, dr.delay = as, dr.difference = da, dr.differenceBy = ha, dr.differenceWith = va, dr.drop = function (e, t, n) {
          var r = null == e ? 0 : e.length;
          return r ? Ii(e, (t = n || t === o ? 1 : Ws(t)) < 0 ? 0 : t, r) : [];
        }, dr.dropRight = function (e, t, n) {
          var r = null == e ? 0 : e.length;
          return r ? Ii(e, 0, (t = r - (t = n || t === o ? 1 : Ws(t))) < 0 ? 0 : t) : [];
        }, dr.dropRightWhile = function (e, t) {
          return e && e.length ? Fi(e, Ro(t, 3), !0, !0) : [];
        }, dr.dropWhile = function (e, t) {
          return e && e.length ? Fi(e, Ro(t, 3), !0) : [];
        }, dr.fill = function (e, t, n, r) {
          var i = null == e ? 0 : e.length;
          return i ? (n && "number" != typeof n && Ko(e, t, n) && (n = 0, r = i), function (e, t, n, r) {
            var i = e.length;

            for ((n = Ws(n)) < 0 && (n = -n > i ? 0 : i + n), (r = r === o || r > i ? i : Ws(r)) < 0 && (r += i), r = n > r ? 0 : qs(r); n < r;) {
              e[n++] = t;
            }

            return e;
          }(e, t, n, r)) : [];
        }, dr.filter = function (e, t) {
          return (ms(e) ? Qt : Br)(e, Ro(t, 3));
        }, dr.flatMap = function (e, t) {
          return Ur(Qa(e, t), 1);
        }, dr.flatMapDeep = function (e, t) {
          return Ur(Qa(e, t), L);
        }, dr.flatMapDepth = function (e, t, n) {
          return n = n === o ? 1 : Ws(n), Ur(Qa(e, t), n);
        }, dr.flatten = ya, dr.flattenDeep = function (e) {
          return null != e && e.length ? Ur(e, L) : [];
        }, dr.flattenDepth = function (e, t) {
          return null != e && e.length ? Ur(e, t = t === o ? 1 : Ws(t)) : [];
        }, dr.flip = function (e) {
          return Co(e, A);
        }, dr.flow = Ou, dr.flowRight = Du, dr.fromPairs = function (e) {
          for (var t = -1, n = null == e ? 0 : e.length, r = {}; ++t < n;) {
            var i = e[t];
            r[i[0]] = i[1];
          }

          return r;
        }, dr.functions = function (e) {
          return null == e ? [] : Xr(e, iu(e));
        }, dr.functionsIn = function (e) {
          return null == e ? [] : Xr(e, ou(e));
        }, dr.groupBy = Ka, dr.initial = function (e) {
          return null != e && e.length ? Ii(e, 0, -1) : [];
        }, dr.intersection = ba, dr.intersectionBy = wa, dr.intersectionWith = Ta, dr.invert = tu, dr.invertBy = nu, dr.invokeMap = Ga, dr.iteratee = ku, dr.keyBy = Xa, dr.keys = iu, dr.keysIn = ou, dr.map = Qa, dr.mapKeys = function (e, t) {
          var n = {};
          return t = Ro(t, 3), Kr(e, function (e, r, i) {
            Nr(n, t(e, r, i), e);
          }), n;
        }, dr.mapValues = function (e, t) {
          var n = {};
          return t = Ro(t, 3), Kr(e, function (e, r, i) {
            Nr(n, r, t(e, r, i));
          }), n;
        }, dr.matches = function (e) {
          return di(Pr(e, p));
        }, dr.matchesProperty = function (e, t) {
          return hi(e, Pr(t, p));
        }, dr.memoize = ss, dr.merge = au, dr.mergeWith = su, dr.method = Nu, dr.methodOf = Lu, dr.mixin = ju, dr.negate = us, dr.nthArg = function (e) {
          return e = Ws(e), Ei(function (t) {
            return gi(t, e);
          });
        }, dr.omit = uu, dr.omitBy = function (e, t) {
          return lu(e, us(Ro(t)));
        }, dr.once = function (e) {
          return ts(2, e);
        }, dr.orderBy = function (e, t, n, r) {
          return null == e ? [] : (ms(t) || (t = null == t ? [] : [t]), ms(n = r ? o : n) || (n = null == n ? [] : [n]), mi(e, t, n));
        }, dr.over = Ru, dr.overArgs = cs, dr.overEvery = $u, dr.overSome = Hu, dr.partial = ls, dr.partialRight = fs, dr.partition = Ya, dr.pick = cu, dr.pickBy = lu, dr.property = Mu, dr.propertyOf = function (e) {
          return function (t) {
            return null == e ? o : Qr(e, t);
          };
        }, dr.pull = xa, dr.pullAll = Ca, dr.pullAllBy = function (e, t, n) {
          return e && e.length && t && t.length ? _i(e, t, Ro(n, 2)) : e;
        }, dr.pullAllWith = function (e, t, n) {
          return e && e.length && t && t.length ? _i(e, t, o, n) : e;
        }, dr.pullAt = Aa, dr.range = Fu, dr.rangeRight = Wu, dr.rearg = ps, dr.reject = function (e, t) {
          return (ms(e) ? Qt : Br)(e, us(Ro(t, 3)));
        }, dr.remove = function (e, t) {
          var n = [];
          if (!e || !e.length) return n;
          var r = -1,
              i = [],
              o = e.length;

          for (t = Ro(t, 3); ++r < o;) {
            var a = e[r];
            t(a, r, e) && (n.push(a), i.push(r));
          }

          return bi(e, i), n;
        }, dr.rest = function (e, t) {
          if ("function" != typeof e) throw new it(u);
          return Ei(e, t = t === o ? t : Ws(t));
        }, dr.reverse = Sa, dr.sampleSize = function (e, t, n) {
          return t = (n ? Ko(e, t, n) : t === o) ? 1 : Ws(t), (ms(e) ? Cr : Ci)(e, t);
        }, dr.set = function (e, t, n) {
          return null == e ? e : Ai(e, t, n);
        }, dr.setWith = function (e, t, n, r) {
          return r = "function" == typeof r ? r : o, null == e ? e : Ai(e, t, n, r);
        }, dr.shuffle = function (e) {
          return (ms(e) ? Ar : Di)(e);
        }, dr.slice = function (e, t, n) {
          var r = null == e ? 0 : e.length;
          return r ? (n && "number" != typeof n && Ko(e, t, n) ? (t = 0, n = r) : (t = null == t ? 0 : Ws(t), n = n === o ? r : Ws(n)), Ii(e, t, n)) : [];
        }, dr.sortBy = Ja, dr.sortedUniq = function (e) {
          return e && e.length ? ji(e) : [];
        }, dr.sortedUniqBy = function (e, t) {
          return e && e.length ? ji(e, Ro(t, 2)) : [];
        }, dr.split = function (e, t, n) {
          return n && "number" != typeof n && Ko(e, t, n) && (t = n = o), (n = n === o ? $ : n >>> 0) ? (e = Vs(e)) && ("string" == typeof t || null != t && !Ns(t)) && !(t = Ri(t)) && Cn(e) ? Gi(Nn(e), 0, n) : e.split(t, n) : [];
        }, dr.spread = function (e, t) {
          if ("function" != typeof e) throw new it(u);
          return t = null == t ? 0 : Vn(Ws(t), 0), Ei(function (n) {
            var r = n[t],
                i = Gi(n, 0, t);
            return r && en(i, r), Vt(e, this, i);
          });
        }, dr.tail = function (e) {
          var t = null == e ? 0 : e.length;
          return t ? Ii(e, 1, t) : [];
        }, dr.take = function (e, t, n) {
          return e && e.length ? Ii(e, 0, (t = n || t === o ? 1 : Ws(t)) < 0 ? 0 : t) : [];
        }, dr.takeRight = function (e, t, n) {
          var r = null == e ? 0 : e.length;
          return r ? Ii(e, (t = r - (t = n || t === o ? 1 : Ws(t))) < 0 ? 0 : t, r) : [];
        }, dr.takeRightWhile = function (e, t) {
          return e && e.length ? Fi(e, Ro(t, 3), !1, !0) : [];
        }, dr.takeWhile = function (e, t) {
          return e && e.length ? Fi(e, Ro(t, 3)) : [];
        }, dr.tap = function (e, t) {
          return t(e), e;
        }, dr.throttle = function (e, t, n) {
          var r = !0,
              i = !0;
          if ("function" != typeof e) throw new it(u);
          return Ss(n) && (r = "leading" in n ? !!n.leading : r, i = "trailing" in n ? !!n.trailing : i), is(e, t, {
            leading: r,
            maxWait: t,
            trailing: i
          });
        }, dr.thru = Fa, dr.toArray = Ms, dr.toPairs = fu, dr.toPairsIn = pu, dr.toPath = function (e) {
          return ms(e) ? Zt(e, la) : Ps(e) ? [e] : no(ca(Vs(e)));
        }, dr.toPlainObject = Us, dr.transform = function (e, t, n) {
          var r = ms(e),
              i = r || ws(e) || Rs(e);

          if (t = Ro(t, 4), null == n) {
            var o = e && e.constructor;
            n = i ? r ? new o() : [] : Ss(e) && xs(o) ? hr(kt(e)) : {};
          }

          return (i ? Kt : Kr)(e, function (e, r, i) {
            return t(n, e, r, i);
          }), n;
        }, dr.unary = function (e) {
          return es(e, 1);
        }, dr.union = Oa, dr.unionBy = Da, dr.unionWith = Ia, dr.uniq = function (e) {
          return e && e.length ? $i(e) : [];
        }, dr.uniqBy = function (e, t) {
          return e && e.length ? $i(e, Ro(t, 2)) : [];
        }, dr.uniqWith = function (e, t) {
          return t = "function" == typeof t ? t : o, e && e.length ? $i(e, o, t) : [];
        }, dr.unset = function (e, t) {
          return null == e || Hi(e, t);
        }, dr.unzip = ka, dr.unzipWith = Na, dr.update = function (e, t, n) {
          return null == e ? e : Mi(e, t, Vi(n));
        }, dr.updateWith = function (e, t, n, r) {
          return r = "function" == typeof r ? r : o, null == e ? e : Mi(e, t, Vi(n), r);
        }, dr.values = du, dr.valuesIn = function (e) {
          return null == e ? [] : yn(e, ou(e));
        }, dr.without = La, dr.words = xu, dr.wrap = function (e, t) {
          return ls(Vi(t), e);
        }, dr.xor = ja, dr.xorBy = Pa, dr.xorWith = Ra, dr.zip = $a, dr.zipObject = function (e, t) {
          return Bi(e || [], t || [], Or);
        }, dr.zipObjectDeep = function (e, t) {
          return Bi(e || [], t || [], Ai);
        }, dr.zipWith = Ha, dr.entries = fu, dr.entriesIn = pu, dr.extend = Ks, dr.extendWith = Gs, ju(dr, dr), dr.add = Uu, dr.attempt = Cu, dr.camelCase = hu, dr.capitalize = vu, dr.ceil = Vu, dr.clamp = function (e, t, n) {
          return n === o && (n = t, t = o), n !== o && (n = (n = Bs(n)) == n ? n : 0), t !== o && (t = (t = Bs(t)) == t ? t : 0), jr(Bs(e), t, n);
        }, dr.clone = function (e) {
          return Pr(e, h);
        }, dr.cloneDeep = function (e) {
          return Pr(e, p | h);
        }, dr.cloneDeepWith = function (e, t) {
          return Pr(e, p | h, t = "function" == typeof t ? t : o);
        }, dr.cloneWith = function (e, t) {
          return Pr(e, h, t = "function" == typeof t ? t : o);
        }, dr.conformsTo = function (e, t) {
          return null == t || Rr(e, t, iu(t));
        }, dr.deburr = gu, dr.defaultTo = function (e, t) {
          return null == e || e != e ? t : e;
        }, dr.divide = zu, dr.endsWith = function (e, t, n) {
          e = Vs(e), t = Ri(t);
          var r = e.length,
              i = n = n === o ? r : jr(Ws(n), 0, r);
          return (n -= t.length) >= 0 && e.slice(n, i) == t;
        }, dr.eq = ds, dr.escape = function (e) {
          return (e = Vs(e)) && Ce.test(e) ? e.replace(Ee, En) : e;
        }, dr.escapeRegExp = function (e) {
          return (e = Vs(e)) && Le.test(e) ? e.replace(Ne, "\\$&") : e;
        }, dr.every = function (e, t, n) {
          var r = ms(e) ? Xt : Wr;
          return n && Ko(e, t, n) && (t = o), r(e, Ro(t, 3));
        }, dr.find = Ba, dr.findIndex = ga, dr.findKey = function (e, t) {
          return an(e, Ro(t, 3), Kr);
        }, dr.findLast = Ua, dr.findLastIndex = ma, dr.findLastKey = function (e, t) {
          return an(e, Ro(t, 3), Gr);
        }, dr.floor = Ku, dr.forEach = Va, dr.forEachRight = za, dr.forIn = function (e, t) {
          return null == e ? e : Vr(e, Ro(t, 3), ou);
        }, dr.forInRight = function (e, t) {
          return null == e ? e : zr(e, Ro(t, 3), ou);
        }, dr.forOwn = function (e, t) {
          return e && Kr(e, Ro(t, 3));
        }, dr.forOwnRight = function (e, t) {
          return e && Gr(e, Ro(t, 3));
        }, dr.get = Zs, dr.gt = hs, dr.gte = vs, dr.has = function (e, t) {
          return null != e && Bo(e, t, ei);
        }, dr.hasIn = eu, dr.head = _a, dr.identity = Iu, dr.includes = function (e, t, n, r) {
          e = _s(e) ? e : du(e), n = n && !r ? Ws(n) : 0;
          var i = e.length;
          return n < 0 && (n = Vn(i + n, 0)), js(e) ? n <= i && e.indexOf(t, n) > -1 : !!i && un(e, t, n) > -1;
        }, dr.indexOf = function (e, t, n) {
          var r = null == e ? 0 : e.length;
          if (!r) return -1;
          var i = null == n ? 0 : Ws(n);
          return i < 0 && (i = Vn(r + i, 0)), un(e, t, i);
        }, dr.inRange = function (e, t, n) {
          return t = Fs(t), n === o ? (n = t, t = 0) : n = Fs(n), function (e, t, n) {
            return e >= zn(t, n) && e < Vn(t, n);
          }(e = Bs(e), t, n);
        }, dr.invoke = ru, dr.isArguments = gs, dr.isArray = ms, dr.isArrayBuffer = ys, dr.isArrayLike = _s, dr.isArrayLikeObject = bs, dr.isBoolean = function (e) {
          return !0 === e || !1 === e || Os(e) && Jr(e) == U;
        }, dr.isBuffer = ws, dr.isDate = Ts, dr.isElement = function (e) {
          return Os(e) && 1 === e.nodeType && !ks(e);
        }, dr.isEmpty = function (e) {
          if (null == e) return !0;
          if (_s(e) && (ms(e) || "string" == typeof e || "function" == typeof e.splice || ws(e) || Rs(e) || gs(e))) return !e.length;
          var t = qo(e);
          if (t == Q || t == ne) return !e.size;
          if (Yo(e)) return !ci(e).length;

          for (var n in e) {
            if (lt.call(e, n)) return !1;
          }

          return !0;
        }, dr.isEqual = function (e, t) {
          return oi(e, t);
        }, dr.isEqualWith = function (e, t, n) {
          var r = (n = "function" == typeof n ? n : o) ? n(e, t) : o;
          return r === o ? oi(e, t, o, n) : !!r;
        }, dr.isError = Es, dr.isFinite = function (e) {
          return "number" == typeof e && qn(e);
        }, dr.isFunction = xs, dr.isInteger = Cs, dr.isLength = As, dr.isMap = Ds, dr.isMatch = function (e, t) {
          return e === t || ai(e, t, Ho(t));
        }, dr.isMatchWith = function (e, t, n) {
          return n = "function" == typeof n ? n : o, ai(e, t, Ho(t), n);
        }, dr.isNaN = function (e) {
          return Is(e) && e != +e;
        }, dr.isNative = function (e) {
          if (Qo(e)) throw new Je(s);
          return si(e);
        }, dr.isNil = function (e) {
          return null == e;
        }, dr.isNull = function (e) {
          return null === e;
        }, dr.isNumber = Is, dr.isObject = Ss, dr.isObjectLike = Os, dr.isPlainObject = ks, dr.isRegExp = Ns, dr.isSafeInteger = function (e) {
          return Cs(e) && e >= -j && e <= j;
        }, dr.isSet = Ls, dr.isString = js, dr.isSymbol = Ps, dr.isTypedArray = Rs, dr.isUndefined = function (e) {
          return e === o;
        }, dr.isWeakMap = function (e) {
          return Os(e) && qo(e) == ae;
        }, dr.isWeakSet = function (e) {
          return Os(e) && Jr(e) == se;
        }, dr.join = function (e, t) {
          return null == e ? "" : Bn.call(e, t);
        }, dr.kebabCase = mu, dr.last = Ea, dr.lastIndexOf = function (e, t, n) {
          var r = null == e ? 0 : e.length;
          if (!r) return -1;
          var i = r;
          return n !== o && (i = (i = Ws(n)) < 0 ? Vn(r + i, 0) : zn(i, r - 1)), t == t ? function (e, t, n) {
            for (var r = n + 1; r--;) {
              if (e[r] === t) return r;
            }

            return r;
          }(e, t, i) : sn(e, ln, i, !0);
        }, dr.lowerCase = yu, dr.lowerFirst = _u, dr.lt = $s, dr.lte = Hs, dr.max = function (e) {
          return e && e.length ? qr(e, Iu, Zr) : o;
        }, dr.maxBy = function (e, t) {
          return e && e.length ? qr(e, Ro(t, 2), Zr) : o;
        }, dr.mean = function (e) {
          return fn(e, Iu);
        }, dr.meanBy = function (e, t) {
          return fn(e, Ro(t, 2));
        }, dr.min = function (e) {
          return e && e.length ? qr(e, Iu, fi) : o;
        }, dr.minBy = function (e, t) {
          return e && e.length ? qr(e, Ro(t, 2), fi) : o;
        }, dr.stubArray = qu, dr.stubFalse = Bu, dr.stubObject = function () {
          return {};
        }, dr.stubString = function () {
          return "";
        }, dr.stubTrue = function () {
          return !0;
        }, dr.multiply = Xu, dr.nth = function (e, t) {
          return e && e.length ? gi(e, Ws(t)) : o;
        }, dr.noConflict = function () {
          return Lt._ === this && (Lt._ = vt), this;
        }, dr.noop = Pu, dr.now = Za, dr.pad = function (e, t, n) {
          e = Vs(e);
          var r = (t = Ws(t)) ? kn(e) : 0;
          if (!t || r >= t) return e;
          var i = (t - r) / 2;
          return yo(Mn(i), n) + e + yo(Hn(i), n);
        }, dr.padEnd = function (e, t, n) {
          e = Vs(e);
          var r = (t = Ws(t)) ? kn(e) : 0;
          return t && r < t ? e + yo(t - r, n) : e;
        }, dr.padStart = function (e, t, n) {
          e = Vs(e);
          var r = (t = Ws(t)) ? kn(e) : 0;
          return t && r < t ? yo(t - r, n) + e : e;
        }, dr.parseInt = function (e, t, n) {
          return n || null == t ? t = 0 : t && (t = +t), Gn(Vs(e).replace(Pe, ""), t || 0);
        }, dr.random = function (e, t, n) {
          if (n && "boolean" != typeof n && Ko(e, t, n) && (t = n = o), n === o && ("boolean" == typeof t ? (n = t, t = o) : "boolean" == typeof e && (n = e, e = o)), e === o && t === o ? (e = 0, t = 1) : (e = Fs(e), t === o ? (t = e, e = 0) : t = Fs(t)), e > t) {
            var r = e;
            e = t, t = r;
          }

          if (n || e % 1 || t % 1) {
            var i = Xn();
            return zn(e + i * (t - e + Dt("1e-" + ((i + "").length - 1))), t);
          }

          return wi(e, t);
        }, dr.reduce = function (e, t, n) {
          var r = ms(e) ? tn : hn,
              i = arguments.length < 3;
          return r(e, Ro(t, 4), n, i, Mr);
        }, dr.reduceRight = function (e, t, n) {
          var r = ms(e) ? nn : hn,
              i = arguments.length < 3;
          return r(e, Ro(t, 4), n, i, Fr);
        }, dr.repeat = function (e, t, n) {
          return t = (n ? Ko(e, t, n) : t === o) ? 1 : Ws(t), Ti(Vs(e), t);
        }, dr.replace = function () {
          var e = arguments,
              t = Vs(e[0]);
          return e.length < 3 ? t : t.replace(e[1], e[2]);
        }, dr.result = function (e, t, n) {
          var r = -1,
              i = (t = zi(t, e)).length;

          for (i || (i = 1, e = o); ++r < i;) {
            var a = null == e ? o : e[la(t[r])];
            a === o && (r = i, a = n), e = xs(a) ? a.call(e) : a;
          }

          return e;
        }, dr.round = Qu, dr.runInContext = e, dr.sample = function (e) {
          return (ms(e) ? xr : xi)(e);
        }, dr.size = function (e) {
          if (null == e) return 0;
          if (_s(e)) return js(e) ? kn(e) : e.length;
          var t = qo(e);
          return t == Q || t == ne ? e.size : ci(e).length;
        }, dr.snakeCase = bu, dr.some = function (e, t, n) {
          var r = ms(e) ? rn : ki;
          return n && Ko(e, t, n) && (t = o), r(e, Ro(t, 3));
        }, dr.sortedIndex = function (e, t) {
          return Ni(e, t);
        }, dr.sortedIndexBy = function (e, t, n) {
          return Li(e, t, Ro(n, 2));
        }, dr.sortedIndexOf = function (e, t) {
          var n = null == e ? 0 : e.length;

          if (n) {
            var r = Ni(e, t);
            if (r < n && ds(e[r], t)) return r;
          }

          return -1;
        }, dr.sortedLastIndex = function (e, t) {
          return Ni(e, t, !0);
        }, dr.sortedLastIndexBy = function (e, t, n) {
          return Li(e, t, Ro(n, 2), !0);
        }, dr.sortedLastIndexOf = function (e, t) {
          if (null != e && e.length) {
            var n = Ni(e, t, !0) - 1;
            if (ds(e[n], t)) return n;
          }

          return -1;
        }, dr.startCase = wu, dr.startsWith = function (e, t, n) {
          return e = Vs(e), n = null == n ? 0 : jr(Ws(n), 0, e.length), t = Ri(t), e.slice(n, n + t.length) == t;
        }, dr.subtract = Yu, dr.sum = function (e) {
          return e && e.length ? vn(e, Iu) : 0;
        }, dr.sumBy = function (e, t) {
          return e && e.length ? vn(e, Ro(t, 2)) : 0;
        }, dr.template = function (e, t, n) {
          var r = dr.templateSettings;
          n && Ko(e, t, n) && (t = o), e = Vs(e), t = Gs({}, t, r, Ao);
          var i,
              a,
              s = Gs({}, t.imports, r.imports, Ao),
              u = iu(s),
              c = yn(s, u),
              l = 0,
              f = t.interpolate || Qe,
              p = "__p += '",
              d = nt((t.escape || Qe).source + "|" + f.source + "|" + (f === Oe ? qe : Qe).source + "|" + (t.evaluate || Qe).source + "|$", "g"),
              h = "//# sourceURL=" + ("sourceURL" in t ? t.sourceURL : "lodash.templateSources[" + ++Ct + "]") + "\n";
          e.replace(d, function (t, n, r, o, s, u) {
            return r || (r = o), p += e.slice(l, u).replace(Ye, xn), n && (i = !0, p += "' +\n__e(" + n + ") +\n'"), s && (a = !0, p += "';\n" + s + ";\n__p += '"), r && (p += "' +\n((__t = (" + r + ")) == null ? '' : __t) +\n'"), l = u + t.length, t;
          }), p += "';\n";
          var v = t.variable;
          v || (p = "with (obj) {\n" + p + "\n}\n"), p = (a ? p.replace(_e, "") : p).replace(be, "$1").replace(we, "$1;"), p = "function(" + (v || "obj") + ") {\n" + (v ? "" : "obj || (obj = {});\n") + "var __t, __p = ''" + (i ? ", __e = _.escape" : "") + (a ? ", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n" : ";\n") + p + "return __p\n}";
          var g = Cu(function () {
            return Ze(u, h + "return " + p).apply(o, c);
          });
          if (g.source = p, Es(g)) throw g;
          return g;
        }, dr.times = function (e, t) {
          if ((e = Ws(e)) < 1 || e > j) return [];
          var n = $,
              r = zn(e, $);
          t = Ro(t), e -= $;

          for (var i = gn(r, t); ++n < e;) {
            t(n);
          }

          return i;
        }, dr.toFinite = Fs, dr.toInteger = Ws, dr.toLength = qs, dr.toLower = function (e) {
          return Vs(e).toLowerCase();
        }, dr.toNumber = Bs, dr.toSafeInteger = function (e) {
          return e ? jr(Ws(e), -j, j) : 0 === e ? e : 0;
        }, dr.toString = Vs, dr.toUpper = function (e) {
          return Vs(e).toUpperCase();
        }, dr.trim = function (e, t, n) {
          if ((e = Vs(e)) && (n || t === o)) return e.replace(je, "");
          if (!e || !(t = Ri(t))) return e;
          var r = Nn(e),
              i = Nn(t);
          return Gi(r, bn(r, i), wn(r, i) + 1).join("");
        }, dr.trimEnd = function (e, t, n) {
          if ((e = Vs(e)) && (n || t === o)) return e.replace(Re, "");
          if (!e || !(t = Ri(t))) return e;
          var r = Nn(e);
          return Gi(r, 0, wn(r, Nn(t)) + 1).join("");
        }, dr.trimStart = function (e, t, n) {
          if ((e = Vs(e)) && (n || t === o)) return e.replace(Pe, "");
          if (!e || !(t = Ri(t))) return e;
          var r = Nn(e);
          return Gi(r, bn(r, Nn(t))).join("");
        }, dr.truncate = function (e, t) {
          var n = S,
              r = O;

          if (Ss(t)) {
            var i = "separator" in t ? t.separator : i;
            n = "length" in t ? Ws(t.length) : n, r = "omission" in t ? Ri(t.omission) : r;
          }

          var a = (e = Vs(e)).length;

          if (Cn(e)) {
            var s = Nn(e);
            a = s.length;
          }

          if (n >= a) return e;
          var u = n - kn(r);
          if (u < 1) return r;
          var c = s ? Gi(s, 0, u).join("") : e.slice(0, u);
          if (i === o) return c + r;

          if (s && (u += c.length - u), Ns(i)) {
            if (e.slice(u).search(i)) {
              var l,
                  f = c;

              for (i.global || (i = nt(i.source, Vs(Be.exec(i)) + "g")), i.lastIndex = 0; l = i.exec(f);) {
                var p = l.index;
              }

              c = c.slice(0, p === o ? u : p);
            }
          } else if (e.indexOf(Ri(i), u) != u) {
            var d = c.lastIndexOf(i);
            d > -1 && (c = c.slice(0, d));
          }

          return c + r;
        }, dr.unescape = function (e) {
          return (e = Vs(e)) && xe.test(e) ? e.replace(Te, Ln) : e;
        }, dr.uniqueId = function (e) {
          var t = ++ft;
          return Vs(e) + t;
        }, dr.upperCase = Tu, dr.upperFirst = Eu, dr.each = Va, dr.eachRight = za, dr.first = _a, ju(dr, (Gu = {}, Kr(dr, function (e, t) {
          lt.call(dr.prototype, t) || (Gu[t] = e);
        }), Gu), {
          chain: !1
        }), dr.VERSION = "4.17.11", Kt(["bind", "bindKey", "curry", "curryRight", "partial", "partialRight"], function (e) {
          dr[e].placeholder = dr;
        }), Kt(["drop", "take"], function (e, t) {
          mr.prototype[e] = function (n) {
            n = n === o ? 1 : Vn(Ws(n), 0);
            var r = this.__filtered__ && !t ? new mr(this) : this.clone();
            return r.__filtered__ ? r.__takeCount__ = zn(n, r.__takeCount__) : r.__views__.push({
              size: zn(n, $),
              type: e + (r.__dir__ < 0 ? "Right" : "")
            }), r;
          }, mr.prototype[e + "Right"] = function (t) {
            return this.reverse()[e](t).reverse();
          };
        }), Kt(["filter", "map", "takeWhile"], function (e, t) {
          var n = t + 1,
              r = n == k || 3 == n;

          mr.prototype[e] = function (e) {
            var t = this.clone();
            return t.__iteratees__.push({
              iteratee: Ro(e, 3),
              type: n
            }), t.__filtered__ = t.__filtered__ || r, t;
          };
        }), Kt(["head", "last"], function (e, t) {
          var n = "take" + (t ? "Right" : "");

          mr.prototype[e] = function () {
            return this[n](1).value()[0];
          };
        }), Kt(["initial", "tail"], function (e, t) {
          var n = "drop" + (t ? "" : "Right");

          mr.prototype[e] = function () {
            return this.__filtered__ ? new mr(this) : this[n](1);
          };
        }), mr.prototype.compact = function () {
          return this.filter(Iu);
        }, mr.prototype.find = function (e) {
          return this.filter(e).head();
        }, mr.prototype.findLast = function (e) {
          return this.reverse().find(e);
        }, mr.prototype.invokeMap = Ei(function (e, t) {
          return "function" == typeof e ? new mr(this) : this.map(function (n) {
            return ri(n, e, t);
          });
        }), mr.prototype.reject = function (e) {
          return this.filter(us(Ro(e)));
        }, mr.prototype.slice = function (e, t) {
          e = Ws(e);
          var n = this;
          return n.__filtered__ && (e > 0 || t < 0) ? new mr(n) : (e < 0 ? n = n.takeRight(-e) : e && (n = n.drop(e)), t !== o && (n = (t = Ws(t)) < 0 ? n.dropRight(-t) : n.take(t - e)), n);
        }, mr.prototype.takeRightWhile = function (e) {
          return this.reverse().takeWhile(e).reverse();
        }, mr.prototype.toArray = function () {
          return this.take($);
        }, Kr(mr.prototype, function (e, t) {
          var n = /^(?:filter|find|map|reject)|While$/.test(t),
              r = /^(?:head|last)$/.test(t),
              i = dr[r ? "take" + ("last" == t ? "Right" : "") : t],
              a = r || /^find/.test(t);
          i && (dr.prototype[t] = function () {
            var t = this.__wrapped__,
                s = r ? [1] : arguments,
                u = t instanceof mr,
                c = s[0],
                l = u || ms(t),
                f = function f(e) {
              var t = i.apply(dr, en([e], s));
              return r && p ? t[0] : t;
            };

            l && n && "function" == typeof c && 1 != c.length && (u = l = !1);
            var p = this.__chain__,
                d = !!this.__actions__.length,
                h = a && !p,
                v = u && !d;

            if (!a && l) {
              t = v ? t : new mr(this);
              var g = e.apply(t, s);
              return g.__actions__.push({
                func: Fa,
                args: [f],
                thisArg: o
              }), new gr(g, p);
            }

            return h && v ? e.apply(this, s) : (g = this.thru(f), h ? r ? g.value()[0] : g.value() : g);
          });
        }), Kt(["pop", "push", "shift", "sort", "splice", "unshift"], function (e) {
          var t = ot[e],
              n = /^(?:push|sort|unshift)$/.test(e) ? "tap" : "thru",
              r = /^(?:pop|shift)$/.test(e);

          dr.prototype[e] = function () {
            var e = arguments;

            if (r && !this.__chain__) {
              var i = this.value();
              return t.apply(ms(i) ? i : [], e);
            }

            return this[n](function (n) {
              return t.apply(ms(n) ? n : [], e);
            });
          };
        }), Kr(mr.prototype, function (e, t) {
          var n = dr[t];

          if (n) {
            var r = n.name + "";
            (ir[r] || (ir[r] = [])).push({
              name: t,
              func: n
            });
          }
        }), ir[ho(o, y).name] = [{
          name: "wrapper",
          func: o
        }], mr.prototype.clone = function () {
          var e = new mr(this.__wrapped__);
          return e.__actions__ = no(this.__actions__), e.__dir__ = this.__dir__, e.__filtered__ = this.__filtered__, e.__iteratees__ = no(this.__iteratees__), e.__takeCount__ = this.__takeCount__, e.__views__ = no(this.__views__), e;
        }, mr.prototype.reverse = function () {
          if (this.__filtered__) {
            var e = new mr(this);
            e.__dir__ = -1, e.__filtered__ = !0;
          } else (e = this.clone()).__dir__ *= -1;

          return e;
        }, mr.prototype.value = function () {
          var e = this.__wrapped__.value(),
              t = this.__dir__,
              n = ms(e),
              r = t < 0,
              i = n ? e.length : 0,
              o = function (e, t, n) {
            for (var r = -1, i = n.length; ++r < i;) {
              var o = n[r],
                  a = o.size;

              switch (o.type) {
                case "drop":
                  e += a;
                  break;

                case "dropRight":
                  t -= a;
                  break;

                case "take":
                  t = zn(t, e + a);
                  break;

                case "takeRight":
                  e = Vn(e, t - a);
              }
            }

            return {
              start: e,
              end: t
            };
          }(0, i, this.__views__),
              a = o.start,
              s = o.end,
              u = s - a,
              c = r ? s : a - 1,
              l = this.__iteratees__,
              f = l.length,
              p = 0,
              d = zn(u, this.__takeCount__);

          if (!n || !r && i == u && d == u) return Wi(e, this.__actions__);
          var h = [];

          e: for (; u-- && p < d;) {
            for (var v = -1, g = e[c += t]; ++v < f;) {
              var m = l[v],
                  y = m.iteratee,
                  _ = m.type,
                  b = y(g);
              if (_ == N) g = b;else if (!b) {
                if (_ == k) continue e;
                break e;
              }
            }

            h[p++] = g;
          }

          return h;
        }, dr.prototype.at = Wa, dr.prototype.chain = function () {
          return Ma(this);
        }, dr.prototype.commit = function () {
          return new gr(this.value(), this.__chain__);
        }, dr.prototype.next = function () {
          this.__values__ === o && (this.__values__ = Ms(this.value()));
          var e = this.__index__ >= this.__values__.length;
          return {
            done: e,
            value: e ? o : this.__values__[this.__index__++]
          };
        }, dr.prototype.plant = function (e) {
          for (var t, n = this; n instanceof vr;) {
            var r = pa(n);
            r.__index__ = 0, r.__values__ = o, t ? i.__wrapped__ = r : t = r;
            var i = r;
            n = n.__wrapped__;
          }

          return i.__wrapped__ = e, t;
        }, dr.prototype.reverse = function () {
          var e = this.__wrapped__;

          if (e instanceof mr) {
            var t = e;
            return this.__actions__.length && (t = new mr(this)), (t = t.reverse()).__actions__.push({
              func: Fa,
              args: [Sa],
              thisArg: o
            }), new gr(t, this.__chain__);
          }

          return this.thru(Sa);
        }, dr.prototype.toJSON = dr.prototype.valueOf = dr.prototype.value = function () {
          return Wi(this.__wrapped__, this.__actions__);
        }, dr.prototype.first = dr.prototype.head, Ht && (dr.prototype[Ht] = function () {
          return this;
        }), dr;
      }();

      Lt._ = jn, (i = function () {
        return jn;
      }.call(t, n, t, r)) === o || (r.exports = i);
    }).call(this);
  }).call(this, n(1), n(15)(e));
}, function (e, t) {
  e.exports = function (e) {
    return e.webpackPolyfill || (e.deprecate = function () {}, e.paths = [], e.children || (e.children = []), Object.defineProperty(e, "loaded", {
      enumerable: !0,
      get: function get() {
        return e.l;
      }
    }), Object.defineProperty(e, "id", {
      enumerable: !0,
      get: function get() {
        return e.i;
      }
    }), e.webpackPolyfill = 1), e;
  };
}, function (e, t, n) {
  !function (e, t, n) {
    "use strict";

    function r(e, t) {
      for (var n = 0; n < t.length; n++) {
        var r = t[n];
        r.enumerable = r.enumerable || !1, r.configurable = !0, "value" in r && (r.writable = !0), Object.defineProperty(e, r.key, r);
      }
    }

    function i(e, t, n) {
      return t && r(e.prototype, t), n && r(e, n), e;
    }

    function o(e, t, n) {
      return t in e ? Object.defineProperty(e, t, {
        value: n,
        enumerable: !0,
        configurable: !0,
        writable: !0
      }) : e[t] = n, e;
    }

    function a(e) {
      for (var t = 1; t < arguments.length; t++) {
        var n = null != arguments[t] ? arguments[t] : {},
            r = Object.keys(n);
        "function" == typeof Object.getOwnPropertySymbols && (r = r.concat(Object.getOwnPropertySymbols(n).filter(function (e) {
          return Object.getOwnPropertyDescriptor(n, e).enumerable;
        }))), r.forEach(function (t) {
          o(e, t, n[t]);
        });
      }

      return e;
    }

    t = t && t.hasOwnProperty("default") ? t["default"] : t, n = n && n.hasOwnProperty("default") ? n["default"] : n;

    var s = function (e) {
      var t = "transitionend";

      function n(t) {
        var n = this,
            i = !1;
        return e(this).one(r.TRANSITION_END, function () {
          i = !0;
        }), setTimeout(function () {
          i || r.triggerTransitionEnd(n);
        }, t), this;
      }

      var r = {
        TRANSITION_END: "bsTransitionEnd",
        getUID: function getUID(e) {
          do {
            e += ~~(1e6 * Math.random());
          } while (document.getElementById(e));

          return e;
        },
        getSelectorFromElement: function getSelectorFromElement(e) {
          var t = e.getAttribute("data-target");
          t && "#" !== t || (t = e.getAttribute("href") || "");

          try {
            return document.querySelector(t) ? t : null;
          } catch (e) {
            return null;
          }
        },
        getTransitionDurationFromElement: function getTransitionDurationFromElement(t) {
          if (!t) return 0;
          var n = e(t).css("transition-duration"),
              r = parseFloat(n);
          return r ? (n = n.split(",")[0], 1e3 * parseFloat(n)) : 0;
        },
        reflow: function reflow(e) {
          return e.offsetHeight;
        },
        triggerTransitionEnd: function triggerTransitionEnd(n) {
          e(n).trigger(t);
        },
        supportsTransitionEnd: function supportsTransitionEnd() {
          return Boolean(t);
        },
        isElement: function isElement(e) {
          return (e[0] || e).nodeType;
        },
        typeCheckConfig: function typeCheckConfig(e, t, n) {
          for (var i in n) {
            if (Object.prototype.hasOwnProperty.call(n, i)) {
              var o = n[i],
                  a = t[i],
                  s = a && r.isElement(a) ? "element" : (u = a, {}.toString.call(u).match(/\s([a-z]+)/i)[1].toLowerCase());
              if (!new RegExp(o).test(s)) throw new Error(e.toUpperCase() + ': Option "' + i + '" provided type "' + s + '" but expected type "' + o + '".');
            }
          }

          var u;
        }
      };
      return e.fn.emulateTransitionEnd = n, e.event.special[r.TRANSITION_END] = {
        bindType: t,
        delegateType: t,
        handle: function handle(t) {
          if (e(t.target).is(this)) return t.handleObj.handler.apply(this, arguments);
        }
      }, r;
    }(t),
        u = function (e) {
      var t = e.fn.alert,
          n = {
        CLOSE: "close.bs.alert",
        CLOSED: "closed.bs.alert",
        CLICK_DATA_API: "click.bs.alert.data-api"
      },
          r = {
        ALERT: "alert",
        FADE: "fade",
        SHOW: "show"
      },
          o = function () {
        function t(e) {
          this._element = e;
        }

        var o = t.prototype;
        return o.close = function (e) {
          var t = this._element;
          e && (t = this._getRootElement(e));

          var n = this._triggerCloseEvent(t);

          n.isDefaultPrevented() || this._removeElement(t);
        }, o.dispose = function () {
          e.removeData(this._element, "bs.alert"), this._element = null;
        }, o._getRootElement = function (t) {
          var n = s.getSelectorFromElement(t),
              i = !1;
          return n && (i = document.querySelector(n)), i || (i = e(t).closest("." + r.ALERT)[0]), i;
        }, o._triggerCloseEvent = function (t) {
          var r = e.Event(n.CLOSE);
          return e(t).trigger(r), r;
        }, o._removeElement = function (t) {
          var n = this;

          if (e(t).removeClass(r.SHOW), e(t).hasClass(r.FADE)) {
            var i = s.getTransitionDurationFromElement(t);
            e(t).one(s.TRANSITION_END, function (e) {
              return n._destroyElement(t, e);
            }).emulateTransitionEnd(i);
          } else this._destroyElement(t);
        }, o._destroyElement = function (t) {
          e(t).detach().trigger(n.CLOSED).remove();
        }, t._jQueryInterface = function (n) {
          return this.each(function () {
            var r = e(this),
                i = r.data("bs.alert");
            i || (i = new t(this), r.data("bs.alert", i)), "close" === n && i[n](this);
          });
        }, t._handleDismiss = function (e) {
          return function (t) {
            t && t.preventDefault(), e.close(this);
          };
        }, i(t, null, [{
          key: "VERSION",
          get: function get() {
            return "4.1.3";
          }
        }]), t;
      }();

      return e(document).on(n.CLICK_DATA_API, '[data-dismiss="alert"]', o._handleDismiss(new o())), e.fn.alert = o._jQueryInterface, e.fn.alert.Constructor = o, e.fn.alert.noConflict = function () {
        return e.fn.alert = t, o._jQueryInterface;
      }, o;
    }(t),
        c = function (e) {
      var t = "button",
          n = e.fn[t],
          r = {
        ACTIVE: "active",
        BUTTON: "btn",
        FOCUS: "focus"
      },
          o = {
        DATA_TOGGLE_CARROT: '[data-toggle^="button"]',
        DATA_TOGGLE: '[data-toggle="buttons"]',
        INPUT: "input",
        ACTIVE: ".active",
        BUTTON: ".btn"
      },
          a = {
        CLICK_DATA_API: "click.bs.button.data-api",
        FOCUS_BLUR_DATA_API: "focus.bs.button.data-api blur.bs.button.data-api"
      },
          s = function () {
        function t(e) {
          this._element = e;
        }

        var n = t.prototype;
        return n.toggle = function () {
          var t = !0,
              n = !0,
              i = e(this._element).closest(o.DATA_TOGGLE)[0];

          if (i) {
            var a = this._element.querySelector(o.INPUT);

            if (a) {
              if ("radio" === a.type) if (a.checked && this._element.classList.contains(r.ACTIVE)) t = !1;else {
                var s = i.querySelector(o.ACTIVE);
                s && e(s).removeClass(r.ACTIVE);
              }

              if (t) {
                if (a.hasAttribute("disabled") || i.hasAttribute("disabled") || a.classList.contains("disabled") || i.classList.contains("disabled")) return;
                a.checked = !this._element.classList.contains(r.ACTIVE), e(a).trigger("change");
              }

              a.focus(), n = !1;
            }
          }

          n && this._element.setAttribute("aria-pressed", !this._element.classList.contains(r.ACTIVE)), t && e(this._element).toggleClass(r.ACTIVE);
        }, n.dispose = function () {
          e.removeData(this._element, "bs.button"), this._element = null;
        }, t._jQueryInterface = function (n) {
          return this.each(function () {
            var r = e(this).data("bs.button");
            r || (r = new t(this), e(this).data("bs.button", r)), "toggle" === n && r[n]();
          });
        }, i(t, null, [{
          key: "VERSION",
          get: function get() {
            return "4.1.3";
          }
        }]), t;
      }();

      return e(document).on(a.CLICK_DATA_API, o.DATA_TOGGLE_CARROT, function (t) {
        t.preventDefault();
        var n = t.target;
        e(n).hasClass(r.BUTTON) || (n = e(n).closest(o.BUTTON)), s._jQueryInterface.call(e(n), "toggle");
      }).on(a.FOCUS_BLUR_DATA_API, o.DATA_TOGGLE_CARROT, function (t) {
        var n = e(t.target).closest(o.BUTTON)[0];
        e(n).toggleClass(r.FOCUS, /^focus(in)?$/.test(t.type));
      }), e.fn[t] = s._jQueryInterface, e.fn[t].Constructor = s, e.fn[t].noConflict = function () {
        return e.fn[t] = n, s._jQueryInterface;
      }, s;
    }(t),
        l = function (e) {
      var t = "carousel",
          n = "bs.carousel",
          r = "." + n,
          o = e.fn[t],
          u = {
        interval: 5e3,
        keyboard: !0,
        slide: !1,
        pause: "hover",
        wrap: !0
      },
          c = {
        interval: "(number|boolean)",
        keyboard: "boolean",
        slide: "(boolean|string)",
        pause: "(string|boolean)",
        wrap: "boolean"
      },
          l = {
        NEXT: "next",
        PREV: "prev",
        LEFT: "left",
        RIGHT: "right"
      },
          f = {
        SLIDE: "slide" + r,
        SLID: "slid" + r,
        KEYDOWN: "keydown" + r,
        MOUSEENTER: "mouseenter" + r,
        MOUSELEAVE: "mouseleave" + r,
        TOUCHEND: "touchend" + r,
        LOAD_DATA_API: "load.bs.carousel.data-api",
        CLICK_DATA_API: "click.bs.carousel.data-api"
      },
          p = {
        CAROUSEL: "carousel",
        ACTIVE: "active",
        SLIDE: "slide",
        RIGHT: "carousel-item-right",
        LEFT: "carousel-item-left",
        NEXT: "carousel-item-next",
        PREV: "carousel-item-prev",
        ITEM: "carousel-item"
      },
          d = {
        ACTIVE: ".active",
        ACTIVE_ITEM: ".active.carousel-item",
        ITEM: ".carousel-item",
        NEXT_PREV: ".carousel-item-next, .carousel-item-prev",
        INDICATORS: ".carousel-indicators",
        DATA_SLIDE: "[data-slide], [data-slide-to]",
        DATA_RIDE: '[data-ride="carousel"]'
      },
          h = function () {
        function o(t, n) {
          this._items = null, this._interval = null, this._activeElement = null, this._isPaused = !1, this._isSliding = !1, this.touchTimeout = null, this._config = this._getConfig(n), this._element = e(t)[0], this._indicatorsElement = this._element.querySelector(d.INDICATORS), this._addEventListeners();
        }

        var h = o.prototype;
        return h.next = function () {
          this._isSliding || this._slide(l.NEXT);
        }, h.nextWhenVisible = function () {
          !document.hidden && e(this._element).is(":visible") && "hidden" !== e(this._element).css("visibility") && this.next();
        }, h.prev = function () {
          this._isSliding || this._slide(l.PREV);
        }, h.pause = function (e) {
          e || (this._isPaused = !0), this._element.querySelector(d.NEXT_PREV) && (s.triggerTransitionEnd(this._element), this.cycle(!0)), clearInterval(this._interval), this._interval = null;
        }, h.cycle = function (e) {
          e || (this._isPaused = !1), this._interval && (clearInterval(this._interval), this._interval = null), this._config.interval && !this._isPaused && (this._interval = setInterval((document.visibilityState ? this.nextWhenVisible : this.next).bind(this), this._config.interval));
        }, h.to = function (t) {
          var n = this;
          this._activeElement = this._element.querySelector(d.ACTIVE_ITEM);

          var r = this._getItemIndex(this._activeElement);

          if (!(t > this._items.length - 1 || t < 0)) if (this._isSliding) e(this._element).one(f.SLID, function () {
            return n.to(t);
          });else {
            if (r === t) return this.pause(), void this.cycle();
            var i = t > r ? l.NEXT : l.PREV;

            this._slide(i, this._items[t]);
          }
        }, h.dispose = function () {
          e(this._element).off(r), e.removeData(this._element, n), this._items = null, this._config = null, this._element = null, this._interval = null, this._isPaused = null, this._isSliding = null, this._activeElement = null, this._indicatorsElement = null;
        }, h._getConfig = function (e) {
          return e = a({}, u, e), s.typeCheckConfig(t, e, c), e;
        }, h._addEventListeners = function () {
          var t = this;
          this._config.keyboard && e(this._element).on(f.KEYDOWN, function (e) {
            return t._keydown(e);
          }), "hover" === this._config.pause && (e(this._element).on(f.MOUSEENTER, function (e) {
            return t.pause(e);
          }).on(f.MOUSELEAVE, function (e) {
            return t.cycle(e);
          }), "ontouchstart" in document.documentElement && e(this._element).on(f.TOUCHEND, function () {
            t.pause(), t.touchTimeout && clearTimeout(t.touchTimeout), t.touchTimeout = setTimeout(function (e) {
              return t.cycle(e);
            }, 500 + t._config.interval);
          }));
        }, h._keydown = function (e) {
          if (!/input|textarea/i.test(e.target.tagName)) switch (e.which) {
            case 37:
              e.preventDefault(), this.prev();
              break;

            case 39:
              e.preventDefault(), this.next();
          }
        }, h._getItemIndex = function (e) {
          return this._items = e && e.parentNode ? [].slice.call(e.parentNode.querySelectorAll(d.ITEM)) : [], this._items.indexOf(e);
        }, h._getItemByDirection = function (e, t) {
          var n = e === l.NEXT,
              r = e === l.PREV,
              i = this._getItemIndex(t),
              o = this._items.length - 1,
              a = r && 0 === i || n && i === o;

          if (a && !this._config.wrap) return t;
          var s = e === l.PREV ? -1 : 1,
              u = (i + s) % this._items.length;
          return -1 === u ? this._items[this._items.length - 1] : this._items[u];
        }, h._triggerSlideEvent = function (t, n) {
          var r = this._getItemIndex(t),
              i = this._getItemIndex(this._element.querySelector(d.ACTIVE_ITEM)),
              o = e.Event(f.SLIDE, {
            relatedTarget: t,
            direction: n,
            from: i,
            to: r
          });

          return e(this._element).trigger(o), o;
        }, h._setActiveIndicatorElement = function (t) {
          if (this._indicatorsElement) {
            var n = [].slice.call(this._indicatorsElement.querySelectorAll(d.ACTIVE));
            e(n).removeClass(p.ACTIVE);

            var r = this._indicatorsElement.children[this._getItemIndex(t)];

            r && e(r).addClass(p.ACTIVE);
          }
        }, h._slide = function (t, n) {
          var r,
              i,
              o,
              a = this,
              u = this._element.querySelector(d.ACTIVE_ITEM),
              c = this._getItemIndex(u),
              h = n || u && this._getItemByDirection(t, u),
              v = this._getItemIndex(h),
              g = Boolean(this._interval);

          if (t === l.NEXT ? (r = p.LEFT, i = p.NEXT, o = l.LEFT) : (r = p.RIGHT, i = p.PREV, o = l.RIGHT), h && e(h).hasClass(p.ACTIVE)) this._isSliding = !1;else {
            var m = this._triggerSlideEvent(h, o);

            if (!m.isDefaultPrevented() && u && h) {
              this._isSliding = !0, g && this.pause(), this._setActiveIndicatorElement(h);
              var y = e.Event(f.SLID, {
                relatedTarget: h,
                direction: o,
                from: c,
                to: v
              });

              if (e(this._element).hasClass(p.SLIDE)) {
                e(h).addClass(i), s.reflow(h), e(u).addClass(r), e(h).addClass(r);

                var _ = s.getTransitionDurationFromElement(u);

                e(u).one(s.TRANSITION_END, function () {
                  e(h).removeClass(r + " " + i).addClass(p.ACTIVE), e(u).removeClass(p.ACTIVE + " " + i + " " + r), a._isSliding = !1, setTimeout(function () {
                    return e(a._element).trigger(y);
                  }, 0);
                }).emulateTransitionEnd(_);
              } else e(u).removeClass(p.ACTIVE), e(h).addClass(p.ACTIVE), this._isSliding = !1, e(this._element).trigger(y);

              g && this.cycle();
            }
          }
        }, o._jQueryInterface = function (t) {
          return this.each(function () {
            var r = e(this).data(n),
                i = a({}, u, e(this).data());
            "object" == _typeof(t) && (i = a({}, i, t));
            var s = "string" == typeof t ? t : i.slide;
            if (r || (r = new o(this, i), e(this).data(n, r)), "number" == typeof t) r.to(t);else if ("string" == typeof s) {
              if (void 0 === r[s]) throw new TypeError('No method named "' + s + '"');
              r[s]();
            } else i.interval && (r.pause(), r.cycle());
          });
        }, o._dataApiClickHandler = function (t) {
          var r = s.getSelectorFromElement(this);

          if (r) {
            var i = e(r)[0];

            if (i && e(i).hasClass(p.CAROUSEL)) {
              var u = a({}, e(i).data(), e(this).data()),
                  c = this.getAttribute("data-slide-to");
              c && (u.interval = !1), o._jQueryInterface.call(e(i), u), c && e(i).data(n).to(c), t.preventDefault();
            }
          }
        }, i(o, null, [{
          key: "VERSION",
          get: function get() {
            return "4.1.3";
          }
        }, {
          key: "Default",
          get: function get() {
            return u;
          }
        }]), o;
      }();

      return e(document).on(f.CLICK_DATA_API, d.DATA_SLIDE, h._dataApiClickHandler), e(window).on(f.LOAD_DATA_API, function () {
        for (var t = [].slice.call(document.querySelectorAll(d.DATA_RIDE)), n = 0, r = t.length; n < r; n++) {
          var i = e(t[n]);

          h._jQueryInterface.call(i, i.data());
        }
      }), e.fn[t] = h._jQueryInterface, e.fn[t].Constructor = h, e.fn[t].noConflict = function () {
        return e.fn[t] = o, h._jQueryInterface;
      }, h;
    }(t),
        f = function (e) {
      var t = "collapse",
          n = "bs.collapse",
          r = e.fn[t],
          o = {
        toggle: !0,
        parent: ""
      },
          u = {
        toggle: "boolean",
        parent: "(string|element)"
      },
          c = {
        SHOW: "show.bs.collapse",
        SHOWN: "shown.bs.collapse",
        HIDE: "hide.bs.collapse",
        HIDDEN: "hidden.bs.collapse",
        CLICK_DATA_API: "click.bs.collapse.data-api"
      },
          l = {
        SHOW: "show",
        COLLAPSE: "collapse",
        COLLAPSING: "collapsing",
        COLLAPSED: "collapsed"
      },
          f = {
        WIDTH: "width",
        HEIGHT: "height"
      },
          p = {
        ACTIVES: ".show, .collapsing",
        DATA_TOGGLE: '[data-toggle="collapse"]'
      },
          d = function () {
        function r(t, n) {
          this._isTransitioning = !1, this._element = t, this._config = this._getConfig(n), this._triggerArray = e.makeArray(document.querySelectorAll('[data-toggle="collapse"][href="#' + t.id + '"],[data-toggle="collapse"][data-target="#' + t.id + '"]'));

          for (var r = [].slice.call(document.querySelectorAll(p.DATA_TOGGLE)), i = 0, o = r.length; i < o; i++) {
            var a = r[i],
                u = s.getSelectorFromElement(a),
                c = [].slice.call(document.querySelectorAll(u)).filter(function (e) {
              return e === t;
            });
            null !== u && c.length > 0 && (this._selector = u, this._triggerArray.push(a));
          }

          this._parent = this._config.parent ? this._getParent() : null, this._config.parent || this._addAriaAndCollapsedClass(this._element, this._triggerArray), this._config.toggle && this.toggle();
        }

        var d = r.prototype;
        return d.toggle = function () {
          e(this._element).hasClass(l.SHOW) ? this.hide() : this.show();
        }, d.show = function () {
          var t,
              i,
              o = this;

          if (!(this._isTransitioning || e(this._element).hasClass(l.SHOW) || (this._parent && 0 === (t = [].slice.call(this._parent.querySelectorAll(p.ACTIVES)).filter(function (e) {
            return e.getAttribute("data-parent") === o._config.parent;
          })).length && (t = null), t && (i = e(t).not(this._selector).data(n)) && i._isTransitioning))) {
            var a = e.Event(c.SHOW);

            if (e(this._element).trigger(a), !a.isDefaultPrevented()) {
              t && (r._jQueryInterface.call(e(t).not(this._selector), "hide"), i || e(t).data(n, null));

              var u = this._getDimension();

              e(this._element).removeClass(l.COLLAPSE).addClass(l.COLLAPSING), this._element.style[u] = 0, this._triggerArray.length && e(this._triggerArray).removeClass(l.COLLAPSED).attr("aria-expanded", !0), this.setTransitioning(!0);
              var f = u[0].toUpperCase() + u.slice(1),
                  d = "scroll" + f,
                  h = s.getTransitionDurationFromElement(this._element);
              e(this._element).one(s.TRANSITION_END, function () {
                e(o._element).removeClass(l.COLLAPSING).addClass(l.COLLAPSE).addClass(l.SHOW), o._element.style[u] = "", o.setTransitioning(!1), e(o._element).trigger(c.SHOWN);
              }).emulateTransitionEnd(h), this._element.style[u] = this._element[d] + "px";
            }
          }
        }, d.hide = function () {
          var t = this;

          if (!this._isTransitioning && e(this._element).hasClass(l.SHOW)) {
            var n = e.Event(c.HIDE);

            if (e(this._element).trigger(n), !n.isDefaultPrevented()) {
              var r = this._getDimension();

              this._element.style[r] = this._element.getBoundingClientRect()[r] + "px", s.reflow(this._element), e(this._element).addClass(l.COLLAPSING).removeClass(l.COLLAPSE).removeClass(l.SHOW);
              var i = this._triggerArray.length;
              if (i > 0) for (var o = 0; o < i; o++) {
                var a = this._triggerArray[o],
                    u = s.getSelectorFromElement(a);

                if (null !== u) {
                  var f = e([].slice.call(document.querySelectorAll(u)));
                  f.hasClass(l.SHOW) || e(a).addClass(l.COLLAPSED).attr("aria-expanded", !1);
                }
              }
              this.setTransitioning(!0), this._element.style[r] = "";
              var p = s.getTransitionDurationFromElement(this._element);
              e(this._element).one(s.TRANSITION_END, function () {
                t.setTransitioning(!1), e(t._element).removeClass(l.COLLAPSING).addClass(l.COLLAPSE).trigger(c.HIDDEN);
              }).emulateTransitionEnd(p);
            }
          }
        }, d.setTransitioning = function (e) {
          this._isTransitioning = e;
        }, d.dispose = function () {
          e.removeData(this._element, n), this._config = null, this._parent = null, this._element = null, this._triggerArray = null, this._isTransitioning = null;
        }, d._getConfig = function (e) {
          return (e = a({}, o, e)).toggle = Boolean(e.toggle), s.typeCheckConfig(t, e, u), e;
        }, d._getDimension = function () {
          var t = e(this._element).hasClass(f.WIDTH);
          return t ? f.WIDTH : f.HEIGHT;
        }, d._getParent = function () {
          var t = this,
              n = null;
          s.isElement(this._config.parent) ? (n = this._config.parent, void 0 !== this._config.parent.jquery && (n = this._config.parent[0])) : n = document.querySelector(this._config.parent);
          var i = '[data-toggle="collapse"][data-parent="' + this._config.parent + '"]',
              o = [].slice.call(n.querySelectorAll(i));
          return e(o).each(function (e, n) {
            t._addAriaAndCollapsedClass(r._getTargetFromElement(n), [n]);
          }), n;
        }, d._addAriaAndCollapsedClass = function (t, n) {
          if (t) {
            var r = e(t).hasClass(l.SHOW);
            n.length && e(n).toggleClass(l.COLLAPSED, !r).attr("aria-expanded", r);
          }
        }, r._getTargetFromElement = function (e) {
          var t = s.getSelectorFromElement(e);
          return t ? document.querySelector(t) : null;
        }, r._jQueryInterface = function (t) {
          return this.each(function () {
            var i = e(this),
                s = i.data(n),
                u = a({}, o, i.data(), "object" == _typeof(t) && t ? t : {});

            if (!s && u.toggle && /show|hide/.test(t) && (u.toggle = !1), s || (s = new r(this, u), i.data(n, s)), "string" == typeof t) {
              if (void 0 === s[t]) throw new TypeError('No method named "' + t + '"');
              s[t]();
            }
          });
        }, i(r, null, [{
          key: "VERSION",
          get: function get() {
            return "4.1.3";
          }
        }, {
          key: "Default",
          get: function get() {
            return o;
          }
        }]), r;
      }();

      return e(document).on(c.CLICK_DATA_API, p.DATA_TOGGLE, function (t) {
        "A" === t.currentTarget.tagName && t.preventDefault();
        var r = e(this),
            i = s.getSelectorFromElement(this),
            o = [].slice.call(document.querySelectorAll(i));
        e(o).each(function () {
          var t = e(this),
              i = t.data(n),
              o = i ? "toggle" : r.data();

          d._jQueryInterface.call(t, o);
        });
      }), e.fn[t] = d._jQueryInterface, e.fn[t].Constructor = d, e.fn[t].noConflict = function () {
        return e.fn[t] = r, d._jQueryInterface;
      }, d;
    }(t),
        p = function (e) {
      var t = "dropdown",
          r = "bs.dropdown",
          o = "." + r,
          u = e.fn[t],
          c = new RegExp("38|40|27"),
          l = {
        HIDE: "hide" + o,
        HIDDEN: "hidden" + o,
        SHOW: "show" + o,
        SHOWN: "shown" + o,
        CLICK: "click" + o,
        CLICK_DATA_API: "click.bs.dropdown.data-api",
        KEYDOWN_DATA_API: "keydown.bs.dropdown.data-api",
        KEYUP_DATA_API: "keyup.bs.dropdown.data-api"
      },
          f = {
        DISABLED: "disabled",
        SHOW: "show",
        DROPUP: "dropup",
        DROPRIGHT: "dropright",
        DROPLEFT: "dropleft",
        MENURIGHT: "dropdown-menu-right",
        MENULEFT: "dropdown-menu-left",
        POSITION_STATIC: "position-static"
      },
          p = {
        DATA_TOGGLE: '[data-toggle="dropdown"]',
        FORM_CHILD: ".dropdown form",
        MENU: ".dropdown-menu",
        NAVBAR_NAV: ".navbar-nav",
        VISIBLE_ITEMS: ".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)"
      },
          d = {
        TOP: "top-start",
        TOPEND: "top-end",
        BOTTOM: "bottom-start",
        BOTTOMEND: "bottom-end",
        RIGHT: "right-start",
        RIGHTEND: "right-end",
        LEFT: "left-start",
        LEFTEND: "left-end"
      },
          h = {
        offset: 0,
        flip: !0,
        boundary: "scrollParent",
        reference: "toggle",
        display: "dynamic"
      },
          v = {
        offset: "(number|string|function)",
        flip: "boolean",
        boundary: "(string|element)",
        reference: "(string|element)",
        display: "string"
      },
          g = function () {
        function u(e, t) {
          this._element = e, this._popper = null, this._config = this._getConfig(t), this._menu = this._getMenuElement(), this._inNavbar = this._detectNavbar(), this._addEventListeners();
        }

        var g = u.prototype;
        return g.toggle = function () {
          if (!this._element.disabled && !e(this._element).hasClass(f.DISABLED)) {
            var t = u._getParentFromElement(this._element),
                r = e(this._menu).hasClass(f.SHOW);

            if (u._clearMenus(), !r) {
              var i = {
                relatedTarget: this._element
              },
                  o = e.Event(l.SHOW, i);

              if (e(t).trigger(o), !o.isDefaultPrevented()) {
                if (!this._inNavbar) {
                  if (void 0 === n) throw new TypeError("Bootstrap dropdown require Popper.js (https://popper.js.org)");
                  var a = this._element;
                  "parent" === this._config.reference ? a = t : s.isElement(this._config.reference) && (a = this._config.reference, void 0 !== this._config.reference.jquery && (a = this._config.reference[0])), "scrollParent" !== this._config.boundary && e(t).addClass(f.POSITION_STATIC), this._popper = new n(a, this._menu, this._getPopperConfig());
                }

                "ontouchstart" in document.documentElement && 0 === e(t).closest(p.NAVBAR_NAV).length && e(document.body).children().on("mouseover", null, e.noop), this._element.focus(), this._element.setAttribute("aria-expanded", !0), e(this._menu).toggleClass(f.SHOW), e(t).toggleClass(f.SHOW).trigger(e.Event(l.SHOWN, i));
              }
            }
          }
        }, g.dispose = function () {
          e.removeData(this._element, r), e(this._element).off(o), this._element = null, this._menu = null, null !== this._popper && (this._popper.destroy(), this._popper = null);
        }, g.update = function () {
          this._inNavbar = this._detectNavbar(), null !== this._popper && this._popper.scheduleUpdate();
        }, g._addEventListeners = function () {
          var t = this;
          e(this._element).on(l.CLICK, function (e) {
            e.preventDefault(), e.stopPropagation(), t.toggle();
          });
        }, g._getConfig = function (n) {
          return n = a({}, this.constructor.Default, e(this._element).data(), n), s.typeCheckConfig(t, n, this.constructor.DefaultType), n;
        }, g._getMenuElement = function () {
          if (!this._menu) {
            var e = u._getParentFromElement(this._element);

            e && (this._menu = e.querySelector(p.MENU));
          }

          return this._menu;
        }, g._getPlacement = function () {
          var t = e(this._element.parentNode),
              n = d.BOTTOM;
          return t.hasClass(f.DROPUP) ? (n = d.TOP, e(this._menu).hasClass(f.MENURIGHT) && (n = d.TOPEND)) : t.hasClass(f.DROPRIGHT) ? n = d.RIGHT : t.hasClass(f.DROPLEFT) ? n = d.LEFT : e(this._menu).hasClass(f.MENURIGHT) && (n = d.BOTTOMEND), n;
        }, g._detectNavbar = function () {
          return e(this._element).closest(".navbar").length > 0;
        }, g._getPopperConfig = function () {
          var e = this,
              t = {};
          "function" == typeof this._config.offset ? t.fn = function (t) {
            return t.offsets = a({}, t.offsets, e._config.offset(t.offsets) || {}), t;
          } : t.offset = this._config.offset;
          var n = {
            placement: this._getPlacement(),
            modifiers: {
              offset: t,
              flip: {
                enabled: this._config.flip
              },
              preventOverflow: {
                boundariesElement: this._config.boundary
              }
            }
          };
          return "static" === this._config.display && (n.modifiers.applyStyle = {
            enabled: !1
          }), n;
        }, u._jQueryInterface = function (t) {
          return this.each(function () {
            var n = e(this).data(r),
                i = "object" == _typeof(t) ? t : null;

            if (n || (n = new u(this, i), e(this).data(r, n)), "string" == typeof t) {
              if (void 0 === n[t]) throw new TypeError('No method named "' + t + '"');
              n[t]();
            }
          });
        }, u._clearMenus = function (t) {
          if (!t || 3 !== t.which && ("keyup" !== t.type || 9 === t.which)) for (var n = [].slice.call(document.querySelectorAll(p.DATA_TOGGLE)), i = 0, o = n.length; i < o; i++) {
            var a = u._getParentFromElement(n[i]),
                s = e(n[i]).data(r),
                c = {
              relatedTarget: n[i]
            };

            if (t && "click" === t.type && (c.clickEvent = t), s) {
              var d = s._menu;

              if (e(a).hasClass(f.SHOW) && !(t && ("click" === t.type && /input|textarea/i.test(t.target.tagName) || "keyup" === t.type && 9 === t.which) && e.contains(a, t.target))) {
                var h = e.Event(l.HIDE, c);
                e(a).trigger(h), h.isDefaultPrevented() || ("ontouchstart" in document.documentElement && e(document.body).children().off("mouseover", null, e.noop), n[i].setAttribute("aria-expanded", "false"), e(d).removeClass(f.SHOW), e(a).removeClass(f.SHOW).trigger(e.Event(l.HIDDEN, c)));
              }
            }
          }
        }, u._getParentFromElement = function (e) {
          var t,
              n = s.getSelectorFromElement(e);
          return n && (t = document.querySelector(n)), t || e.parentNode;
        }, u._dataApiKeydownHandler = function (t) {
          if ((/input|textarea/i.test(t.target.tagName) ? !(32 === t.which || 27 !== t.which && (40 !== t.which && 38 !== t.which || e(t.target).closest(p.MENU).length)) : c.test(t.which)) && (t.preventDefault(), t.stopPropagation(), !this.disabled && !e(this).hasClass(f.DISABLED))) {
            var n = u._getParentFromElement(this),
                r = e(n).hasClass(f.SHOW);

            if ((r || 27 === t.which && 32 === t.which) && (!r || 27 !== t.which && 32 !== t.which)) {
              var i = [].slice.call(n.querySelectorAll(p.VISIBLE_ITEMS));

              if (0 !== i.length) {
                var o = i.indexOf(t.target);
                38 === t.which && o > 0 && o--, 40 === t.which && o < i.length - 1 && o++, o < 0 && (o = 0), i[o].focus();
              }
            } else {
              if (27 === t.which) {
                var a = n.querySelector(p.DATA_TOGGLE);
                e(a).trigger("focus");
              }

              e(this).trigger("click");
            }
          }
        }, i(u, null, [{
          key: "VERSION",
          get: function get() {
            return "4.1.3";
          }
        }, {
          key: "Default",
          get: function get() {
            return h;
          }
        }, {
          key: "DefaultType",
          get: function get() {
            return v;
          }
        }]), u;
      }();

      return e(document).on(l.KEYDOWN_DATA_API, p.DATA_TOGGLE, g._dataApiKeydownHandler).on(l.KEYDOWN_DATA_API, p.MENU, g._dataApiKeydownHandler).on(l.CLICK_DATA_API + " " + l.KEYUP_DATA_API, g._clearMenus).on(l.CLICK_DATA_API, p.DATA_TOGGLE, function (t) {
        t.preventDefault(), t.stopPropagation(), g._jQueryInterface.call(e(this), "toggle");
      }).on(l.CLICK_DATA_API, p.FORM_CHILD, function (e) {
        e.stopPropagation();
      }), e.fn[t] = g._jQueryInterface, e.fn[t].Constructor = g, e.fn[t].noConflict = function () {
        return e.fn[t] = u, g._jQueryInterface;
      }, g;
    }(t),
        d = function (e) {
      var t = "modal",
          n = ".bs.modal",
          r = e.fn.modal,
          o = {
        backdrop: !0,
        keyboard: !0,
        focus: !0,
        show: !0
      },
          u = {
        backdrop: "(boolean|string)",
        keyboard: "boolean",
        focus: "boolean",
        show: "boolean"
      },
          c = {
        HIDE: "hide.bs.modal",
        HIDDEN: "hidden.bs.modal",
        SHOW: "show.bs.modal",
        SHOWN: "shown.bs.modal",
        FOCUSIN: "focusin.bs.modal",
        RESIZE: "resize.bs.modal",
        CLICK_DISMISS: "click.dismiss.bs.modal",
        KEYDOWN_DISMISS: "keydown.dismiss.bs.modal",
        MOUSEUP_DISMISS: "mouseup.dismiss.bs.modal",
        MOUSEDOWN_DISMISS: "mousedown.dismiss.bs.modal",
        CLICK_DATA_API: "click.bs.modal.data-api"
      },
          l = {
        SCROLLBAR_MEASURER: "modal-scrollbar-measure",
        BACKDROP: "modal-backdrop",
        OPEN: "modal-open",
        FADE: "fade",
        SHOW: "show"
      },
          f = {
        DIALOG: ".modal-dialog",
        DATA_TOGGLE: '[data-toggle="modal"]',
        DATA_DISMISS: '[data-dismiss="modal"]',
        FIXED_CONTENT: ".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",
        STICKY_CONTENT: ".sticky-top"
      },
          p = function () {
        function r(e, t) {
          this._config = this._getConfig(t), this._element = e, this._dialog = e.querySelector(f.DIALOG), this._backdrop = null, this._isShown = !1, this._isBodyOverflowing = !1, this._ignoreBackdropClick = !1, this._scrollbarWidth = 0;
        }

        var p = r.prototype;
        return p.toggle = function (e) {
          return this._isShown ? this.hide() : this.show(e);
        }, p.show = function (t) {
          var n = this;

          if (!this._isTransitioning && !this._isShown) {
            e(this._element).hasClass(l.FADE) && (this._isTransitioning = !0);
            var r = e.Event(c.SHOW, {
              relatedTarget: t
            });
            e(this._element).trigger(r), this._isShown || r.isDefaultPrevented() || (this._isShown = !0, this._checkScrollbar(), this._setScrollbar(), this._adjustDialog(), e(document.body).addClass(l.OPEN), this._setEscapeEvent(), this._setResizeEvent(), e(this._element).on(c.CLICK_DISMISS, f.DATA_DISMISS, function (e) {
              return n.hide(e);
            }), e(this._dialog).on(c.MOUSEDOWN_DISMISS, function () {
              e(n._element).one(c.MOUSEUP_DISMISS, function (t) {
                e(t.target).is(n._element) && (n._ignoreBackdropClick = !0);
              });
            }), this._showBackdrop(function () {
              return n._showElement(t);
            }));
          }
        }, p.hide = function (t) {
          var n = this;

          if (t && t.preventDefault(), !this._isTransitioning && this._isShown) {
            var r = e.Event(c.HIDE);

            if (e(this._element).trigger(r), this._isShown && !r.isDefaultPrevented()) {
              this._isShown = !1;
              var i = e(this._element).hasClass(l.FADE);

              if (i && (this._isTransitioning = !0), this._setEscapeEvent(), this._setResizeEvent(), e(document).off(c.FOCUSIN), e(this._element).removeClass(l.SHOW), e(this._element).off(c.CLICK_DISMISS), e(this._dialog).off(c.MOUSEDOWN_DISMISS), i) {
                var o = s.getTransitionDurationFromElement(this._element);
                e(this._element).one(s.TRANSITION_END, function (e) {
                  return n._hideModal(e);
                }).emulateTransitionEnd(o);
              } else this._hideModal();
            }
          }
        }, p.dispose = function () {
          e.removeData(this._element, "bs.modal"), e(window, document, this._element, this._backdrop).off(n), this._config = null, this._element = null, this._dialog = null, this._backdrop = null, this._isShown = null, this._isBodyOverflowing = null, this._ignoreBackdropClick = null, this._scrollbarWidth = null;
        }, p.handleUpdate = function () {
          this._adjustDialog();
        }, p._getConfig = function (e) {
          return e = a({}, o, e), s.typeCheckConfig(t, e, u), e;
        }, p._showElement = function (t) {
          var n = this,
              r = e(this._element).hasClass(l.FADE);
          this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE || document.body.appendChild(this._element), this._element.style.display = "block", this._element.removeAttribute("aria-hidden"), this._element.scrollTop = 0, r && s.reflow(this._element), e(this._element).addClass(l.SHOW), this._config.focus && this._enforceFocus();

          var i = e.Event(c.SHOWN, {
            relatedTarget: t
          }),
              o = function o() {
            n._config.focus && n._element.focus(), n._isTransitioning = !1, e(n._element).trigger(i);
          };

          if (r) {
            var a = s.getTransitionDurationFromElement(this._element);
            e(this._dialog).one(s.TRANSITION_END, o).emulateTransitionEnd(a);
          } else o();
        }, p._enforceFocus = function () {
          var t = this;
          e(document).off(c.FOCUSIN).on(c.FOCUSIN, function (n) {
            document !== n.target && t._element !== n.target && 0 === e(t._element).has(n.target).length && t._element.focus();
          });
        }, p._setEscapeEvent = function () {
          var t = this;
          this._isShown && this._config.keyboard ? e(this._element).on(c.KEYDOWN_DISMISS, function (e) {
            27 === e.which && (e.preventDefault(), t.hide());
          }) : this._isShown || e(this._element).off(c.KEYDOWN_DISMISS);
        }, p._setResizeEvent = function () {
          var t = this;
          this._isShown ? e(window).on(c.RESIZE, function (e) {
            return t.handleUpdate(e);
          }) : e(window).off(c.RESIZE);
        }, p._hideModal = function () {
          var t = this;
          this._element.style.display = "none", this._element.setAttribute("aria-hidden", !0), this._isTransitioning = !1, this._showBackdrop(function () {
            e(document.body).removeClass(l.OPEN), t._resetAdjustments(), t._resetScrollbar(), e(t._element).trigger(c.HIDDEN);
          });
        }, p._removeBackdrop = function () {
          this._backdrop && (e(this._backdrop).remove(), this._backdrop = null);
        }, p._showBackdrop = function (t) {
          var n = this,
              r = e(this._element).hasClass(l.FADE) ? l.FADE : "";

          if (this._isShown && this._config.backdrop) {
            if (this._backdrop = document.createElement("div"), this._backdrop.className = l.BACKDROP, r && this._backdrop.classList.add(r), e(this._backdrop).appendTo(document.body), e(this._element).on(c.CLICK_DISMISS, function (e) {
              n._ignoreBackdropClick ? n._ignoreBackdropClick = !1 : e.target === e.currentTarget && ("static" === n._config.backdrop ? n._element.focus() : n.hide());
            }), r && s.reflow(this._backdrop), e(this._backdrop).addClass(l.SHOW), !t) return;
            if (!r) return void t();
            var i = s.getTransitionDurationFromElement(this._backdrop);
            e(this._backdrop).one(s.TRANSITION_END, t).emulateTransitionEnd(i);
          } else if (!this._isShown && this._backdrop) {
            e(this._backdrop).removeClass(l.SHOW);

            var o = function o() {
              n._removeBackdrop(), t && t();
            };

            if (e(this._element).hasClass(l.FADE)) {
              var a = s.getTransitionDurationFromElement(this._backdrop);
              e(this._backdrop).one(s.TRANSITION_END, o).emulateTransitionEnd(a);
            } else o();
          } else t && t();
        }, p._adjustDialog = function () {
          var e = this._element.scrollHeight > document.documentElement.clientHeight;
          !this._isBodyOverflowing && e && (this._element.style.paddingLeft = this._scrollbarWidth + "px"), this._isBodyOverflowing && !e && (this._element.style.paddingRight = this._scrollbarWidth + "px");
        }, p._resetAdjustments = function () {
          this._element.style.paddingLeft = "", this._element.style.paddingRight = "";
        }, p._checkScrollbar = function () {
          var e = document.body.getBoundingClientRect();
          this._isBodyOverflowing = e.left + e.right < window.innerWidth, this._scrollbarWidth = this._getScrollbarWidth();
        }, p._setScrollbar = function () {
          var t = this;

          if (this._isBodyOverflowing) {
            var n = [].slice.call(document.querySelectorAll(f.FIXED_CONTENT)),
                r = [].slice.call(document.querySelectorAll(f.STICKY_CONTENT));
            e(n).each(function (n, r) {
              var i = r.style.paddingRight,
                  o = e(r).css("padding-right");
              e(r).data("padding-right", i).css("padding-right", parseFloat(o) + t._scrollbarWidth + "px");
            }), e(r).each(function (n, r) {
              var i = r.style.marginRight,
                  o = e(r).css("margin-right");
              e(r).data("margin-right", i).css("margin-right", parseFloat(o) - t._scrollbarWidth + "px");
            });
            var i = document.body.style.paddingRight,
                o = e(document.body).css("padding-right");
            e(document.body).data("padding-right", i).css("padding-right", parseFloat(o) + this._scrollbarWidth + "px");
          }
        }, p._resetScrollbar = function () {
          var t = [].slice.call(document.querySelectorAll(f.FIXED_CONTENT));
          e(t).each(function (t, n) {
            var r = e(n).data("padding-right");
            e(n).removeData("padding-right"), n.style.paddingRight = r || "";
          });
          var n = [].slice.call(document.querySelectorAll("" + f.STICKY_CONTENT));
          e(n).each(function (t, n) {
            var r = e(n).data("margin-right");
            void 0 !== r && e(n).css("margin-right", r).removeData("margin-right");
          });
          var r = e(document.body).data("padding-right");
          e(document.body).removeData("padding-right"), document.body.style.paddingRight = r || "";
        }, p._getScrollbarWidth = function () {
          var e = document.createElement("div");
          e.className = l.SCROLLBAR_MEASURER, document.body.appendChild(e);
          var t = e.getBoundingClientRect().width - e.clientWidth;
          return document.body.removeChild(e), t;
        }, r._jQueryInterface = function (t, n) {
          return this.each(function () {
            var i = e(this).data("bs.modal"),
                s = a({}, o, e(this).data(), "object" == _typeof(t) && t ? t : {});

            if (i || (i = new r(this, s), e(this).data("bs.modal", i)), "string" == typeof t) {
              if (void 0 === i[t]) throw new TypeError('No method named "' + t + '"');
              i[t](n);
            } else s.show && i.show(n);
          });
        }, i(r, null, [{
          key: "VERSION",
          get: function get() {
            return "4.1.3";
          }
        }, {
          key: "Default",
          get: function get() {
            return o;
          }
        }]), r;
      }();

      return e(document).on(c.CLICK_DATA_API, f.DATA_TOGGLE, function (t) {
        var n,
            r = this,
            i = s.getSelectorFromElement(this);
        i && (n = document.querySelector(i));
        var o = e(n).data("bs.modal") ? "toggle" : a({}, e(n).data(), e(this).data());
        "A" !== this.tagName && "AREA" !== this.tagName || t.preventDefault();
        var u = e(n).one(c.SHOW, function (t) {
          t.isDefaultPrevented() || u.one(c.HIDDEN, function () {
            e(r).is(":visible") && r.focus();
          });
        });

        p._jQueryInterface.call(e(n), o, this);
      }), e.fn.modal = p._jQueryInterface, e.fn.modal.Constructor = p, e.fn.modal.noConflict = function () {
        return e.fn.modal = r, p._jQueryInterface;
      }, p;
    }(t),
        h = function (e) {
      var t = "tooltip",
          r = ".bs.tooltip",
          o = e.fn[t],
          u = new RegExp("(^|\\s)bs-tooltip\\S+", "g"),
          c = {
        animation: "boolean",
        template: "string",
        title: "(string|element|function)",
        trigger: "string",
        delay: "(number|object)",
        html: "boolean",
        selector: "(string|boolean)",
        placement: "(string|function)",
        offset: "(number|string)",
        container: "(string|element|boolean)",
        fallbackPlacement: "(string|array)",
        boundary: "(string|element)"
      },
          l = {
        AUTO: "auto",
        TOP: "top",
        RIGHT: "right",
        BOTTOM: "bottom",
        LEFT: "left"
      },
          f = {
        animation: !0,
        template: '<div class="tooltip" role="tooltip"><div class="arrow"></div><div class="tooltip-inner"></div></div>',
        trigger: "hover focus",
        title: "",
        delay: 0,
        html: !1,
        selector: !1,
        placement: "top",
        offset: 0,
        container: !1,
        fallbackPlacement: "flip",
        boundary: "scrollParent"
      },
          p = {
        SHOW: "show",
        OUT: "out"
      },
          d = {
        HIDE: "hide" + r,
        HIDDEN: "hidden" + r,
        SHOW: "show" + r,
        SHOWN: "shown" + r,
        INSERTED: "inserted" + r,
        CLICK: "click" + r,
        FOCUSIN: "focusin" + r,
        FOCUSOUT: "focusout" + r,
        MOUSEENTER: "mouseenter" + r,
        MOUSELEAVE: "mouseleave" + r
      },
          h = {
        FADE: "fade",
        SHOW: "show"
      },
          v = {
        TOOLTIP: ".tooltip",
        TOOLTIP_INNER: ".tooltip-inner",
        ARROW: ".arrow"
      },
          g = {
        HOVER: "hover",
        FOCUS: "focus",
        CLICK: "click",
        MANUAL: "manual"
      },
          m = function () {
        function o(e, t) {
          if (void 0 === n) throw new TypeError("Bootstrap tooltips require Popper.js (https://popper.js.org)");
          this._isEnabled = !0, this._timeout = 0, this._hoverState = "", this._activeTrigger = {}, this._popper = null, this.element = e, this.config = this._getConfig(t), this.tip = null, this._setListeners();
        }

        var m = o.prototype;
        return m.enable = function () {
          this._isEnabled = !0;
        }, m.disable = function () {
          this._isEnabled = !1;
        }, m.toggleEnabled = function () {
          this._isEnabled = !this._isEnabled;
        }, m.toggle = function (t) {
          if (this._isEnabled) if (t) {
            var n = this.constructor.DATA_KEY,
                r = e(t.currentTarget).data(n);
            r || (r = new this.constructor(t.currentTarget, this._getDelegateConfig()), e(t.currentTarget).data(n, r)), r._activeTrigger.click = !r._activeTrigger.click, r._isWithActiveTrigger() ? r._enter(null, r) : r._leave(null, r);
          } else {
            if (e(this.getTipElement()).hasClass(h.SHOW)) return void this._leave(null, this);

            this._enter(null, this);
          }
        }, m.dispose = function () {
          clearTimeout(this._timeout), e.removeData(this.element, this.constructor.DATA_KEY), e(this.element).off(this.constructor.EVENT_KEY), e(this.element).closest(".modal").off("hide.bs.modal"), this.tip && e(this.tip).remove(), this._isEnabled = null, this._timeout = null, this._hoverState = null, this._activeTrigger = null, null !== this._popper && this._popper.destroy(), this._popper = null, this.element = null, this.config = null, this.tip = null;
        }, m.show = function () {
          var t = this;
          if ("none" === e(this.element).css("display")) throw new Error("Please use show on visible elements");
          var r = e.Event(this.constructor.Event.SHOW);

          if (this.isWithContent() && this._isEnabled) {
            e(this.element).trigger(r);
            var i = e.contains(this.element.ownerDocument.documentElement, this.element);
            if (r.isDefaultPrevented() || !i) return;
            var o = this.getTipElement(),
                a = s.getUID(this.constructor.NAME);
            o.setAttribute("id", a), this.element.setAttribute("aria-describedby", a), this.setContent(), this.config.animation && e(o).addClass(h.FADE);

            var u = "function" == typeof this.config.placement ? this.config.placement.call(this, o, this.element) : this.config.placement,
                c = this._getAttachment(u);

            this.addAttachmentClass(c);
            var l = !1 === this.config.container ? document.body : e(document).find(this.config.container);
            e(o).data(this.constructor.DATA_KEY, this), e.contains(this.element.ownerDocument.documentElement, this.tip) || e(o).appendTo(l), e(this.element).trigger(this.constructor.Event.INSERTED), this._popper = new n(this.element, o, {
              placement: c,
              modifiers: {
                offset: {
                  offset: this.config.offset
                },
                flip: {
                  behavior: this.config.fallbackPlacement
                },
                arrow: {
                  element: v.ARROW
                },
                preventOverflow: {
                  boundariesElement: this.config.boundary
                }
              },
              onCreate: function onCreate(e) {
                e.originalPlacement !== e.placement && t._handlePopperPlacementChange(e);
              },
              onUpdate: function onUpdate(e) {
                t._handlePopperPlacementChange(e);
              }
            }), e(o).addClass(h.SHOW), "ontouchstart" in document.documentElement && e(document.body).children().on("mouseover", null, e.noop);

            var f = function f() {
              t.config.animation && t._fixTransition();
              var n = t._hoverState;
              t._hoverState = null, e(t.element).trigger(t.constructor.Event.SHOWN), n === p.OUT && t._leave(null, t);
            };

            if (e(this.tip).hasClass(h.FADE)) {
              var d = s.getTransitionDurationFromElement(this.tip);
              e(this.tip).one(s.TRANSITION_END, f).emulateTransitionEnd(d);
            } else f();
          }
        }, m.hide = function (t) {
          var n = this,
              r = this.getTipElement(),
              i = e.Event(this.constructor.Event.HIDE),
              o = function o() {
            n._hoverState !== p.SHOW && r.parentNode && r.parentNode.removeChild(r), n._cleanTipClass(), n.element.removeAttribute("aria-describedby"), e(n.element).trigger(n.constructor.Event.HIDDEN), null !== n._popper && n._popper.destroy(), t && t();
          };

          if (e(this.element).trigger(i), !i.isDefaultPrevented()) {
            if (e(r).removeClass(h.SHOW), "ontouchstart" in document.documentElement && e(document.body).children().off("mouseover", null, e.noop), this._activeTrigger[g.CLICK] = !1, this._activeTrigger[g.FOCUS] = !1, this._activeTrigger[g.HOVER] = !1, e(this.tip).hasClass(h.FADE)) {
              var a = s.getTransitionDurationFromElement(r);
              e(r).one(s.TRANSITION_END, o).emulateTransitionEnd(a);
            } else o();

            this._hoverState = "";
          }
        }, m.update = function () {
          null !== this._popper && this._popper.scheduleUpdate();
        }, m.isWithContent = function () {
          return Boolean(this.getTitle());
        }, m.addAttachmentClass = function (t) {
          e(this.getTipElement()).addClass("bs-tooltip-" + t);
        }, m.getTipElement = function () {
          return this.tip = this.tip || e(this.config.template)[0], this.tip;
        }, m.setContent = function () {
          var t = this.getTipElement();
          this.setElementContent(e(t.querySelectorAll(v.TOOLTIP_INNER)), this.getTitle()), e(t).removeClass(h.FADE + " " + h.SHOW);
        }, m.setElementContent = function (t, n) {
          var r = this.config.html;
          "object" == _typeof(n) && (n.nodeType || n.jquery) ? r ? e(n).parent().is(t) || t.empty().append(n) : t.text(e(n).text()) : t[r ? "html" : "text"](n);
        }, m.getTitle = function () {
          var e = this.element.getAttribute("data-original-title");
          return e || (e = "function" == typeof this.config.title ? this.config.title.call(this.element) : this.config.title), e;
        }, m._getAttachment = function (e) {
          return l[e.toUpperCase()];
        }, m._setListeners = function () {
          var t = this,
              n = this.config.trigger.split(" ");
          n.forEach(function (n) {
            if ("click" === n) e(t.element).on(t.constructor.Event.CLICK, t.config.selector, function (e) {
              return t.toggle(e);
            });else if (n !== g.MANUAL) {
              var r = n === g.HOVER ? t.constructor.Event.MOUSEENTER : t.constructor.Event.FOCUSIN,
                  i = n === g.HOVER ? t.constructor.Event.MOUSELEAVE : t.constructor.Event.FOCUSOUT;
              e(t.element).on(r, t.config.selector, function (e) {
                return t._enter(e);
              }).on(i, t.config.selector, function (e) {
                return t._leave(e);
              });
            }
            e(t.element).closest(".modal").on("hide.bs.modal", function () {
              return t.hide();
            });
          }), this.config.selector ? this.config = a({}, this.config, {
            trigger: "manual",
            selector: ""
          }) : this._fixTitle();
        }, m._fixTitle = function () {
          var e = _typeof(this.element.getAttribute("data-original-title"));

          (this.element.getAttribute("title") || "string" !== e) && (this.element.setAttribute("data-original-title", this.element.getAttribute("title") || ""), this.element.setAttribute("title", ""));
        }, m._enter = function (t, n) {
          var r = this.constructor.DATA_KEY;
          (n = n || e(t.currentTarget).data(r)) || (n = new this.constructor(t.currentTarget, this._getDelegateConfig()), e(t.currentTarget).data(r, n)), t && (n._activeTrigger["focusin" === t.type ? g.FOCUS : g.HOVER] = !0), e(n.getTipElement()).hasClass(h.SHOW) || n._hoverState === p.SHOW ? n._hoverState = p.SHOW : (clearTimeout(n._timeout), n._hoverState = p.SHOW, n.config.delay && n.config.delay.show ? n._timeout = setTimeout(function () {
            n._hoverState === p.SHOW && n.show();
          }, n.config.delay.show) : n.show());
        }, m._leave = function (t, n) {
          var r = this.constructor.DATA_KEY;
          (n = n || e(t.currentTarget).data(r)) || (n = new this.constructor(t.currentTarget, this._getDelegateConfig()), e(t.currentTarget).data(r, n)), t && (n._activeTrigger["focusout" === t.type ? g.FOCUS : g.HOVER] = !1), n._isWithActiveTrigger() || (clearTimeout(n._timeout), n._hoverState = p.OUT, n.config.delay && n.config.delay.hide ? n._timeout = setTimeout(function () {
            n._hoverState === p.OUT && n.hide();
          }, n.config.delay.hide) : n.hide());
        }, m._isWithActiveTrigger = function () {
          for (var e in this._activeTrigger) {
            if (this._activeTrigger[e]) return !0;
          }

          return !1;
        }, m._getConfig = function (n) {
          return "number" == typeof (n = a({}, this.constructor.Default, e(this.element).data(), "object" == _typeof(n) && n ? n : {})).delay && (n.delay = {
            show: n.delay,
            hide: n.delay
          }), "number" == typeof n.title && (n.title = n.title.toString()), "number" == typeof n.content && (n.content = n.content.toString()), s.typeCheckConfig(t, n, this.constructor.DefaultType), n;
        }, m._getDelegateConfig = function () {
          var e = {};
          if (this.config) for (var t in this.config) {
            this.constructor.Default[t] !== this.config[t] && (e[t] = this.config[t]);
          }
          return e;
        }, m._cleanTipClass = function () {
          var t = e(this.getTipElement()),
              n = t.attr("class").match(u);
          null !== n && n.length && t.removeClass(n.join(""));
        }, m._handlePopperPlacementChange = function (e) {
          var t = e.instance;
          this.tip = t.popper, this._cleanTipClass(), this.addAttachmentClass(this._getAttachment(e.placement));
        }, m._fixTransition = function () {
          var t = this.getTipElement(),
              n = this.config.animation;
          null === t.getAttribute("x-placement") && (e(t).removeClass(h.FADE), this.config.animation = !1, this.hide(), this.show(), this.config.animation = n);
        }, o._jQueryInterface = function (t) {
          return this.each(function () {
            var n = e(this).data("bs.tooltip"),
                r = "object" == _typeof(t) && t;

            if ((n || !/dispose|hide/.test(t)) && (n || (n = new o(this, r), e(this).data("bs.tooltip", n)), "string" == typeof t)) {
              if (void 0 === n[t]) throw new TypeError('No method named "' + t + '"');
              n[t]();
            }
          });
        }, i(o, null, [{
          key: "VERSION",
          get: function get() {
            return "4.1.3";
          }
        }, {
          key: "Default",
          get: function get() {
            return f;
          }
        }, {
          key: "NAME",
          get: function get() {
            return t;
          }
        }, {
          key: "DATA_KEY",
          get: function get() {
            return "bs.tooltip";
          }
        }, {
          key: "Event",
          get: function get() {
            return d;
          }
        }, {
          key: "EVENT_KEY",
          get: function get() {
            return r;
          }
        }, {
          key: "DefaultType",
          get: function get() {
            return c;
          }
        }]), o;
      }();

      return e.fn[t] = m._jQueryInterface, e.fn[t].Constructor = m, e.fn[t].noConflict = function () {
        return e.fn[t] = o, m._jQueryInterface;
      }, m;
    }(t),
        v = function (e) {
      var t = "popover",
          n = ".bs.popover",
          r = e.fn[t],
          o = new RegExp("(^|\\s)bs-popover\\S+", "g"),
          s = a({}, h.Default, {
        placement: "right",
        trigger: "click",
        content: "",
        template: '<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'
      }),
          u = a({}, h.DefaultType, {
        content: "(string|element|function)"
      }),
          c = {
        FADE: "fade",
        SHOW: "show"
      },
          l = {
        TITLE: ".popover-header",
        CONTENT: ".popover-body"
      },
          f = {
        HIDE: "hide" + n,
        HIDDEN: "hidden" + n,
        SHOW: "show" + n,
        SHOWN: "shown" + n,
        INSERTED: "inserted" + n,
        CLICK: "click" + n,
        FOCUSIN: "focusin" + n,
        FOCUSOUT: "focusout" + n,
        MOUSEENTER: "mouseenter" + n,
        MOUSELEAVE: "mouseleave" + n
      },
          p = function (r) {
        var a, p;

        function d() {
          return r.apply(this, arguments) || this;
        }

        p = r, (a = d).prototype = Object.create(p.prototype), a.prototype.constructor = a, a.__proto__ = p;
        var h = d.prototype;
        return h.isWithContent = function () {
          return this.getTitle() || this._getContent();
        }, h.addAttachmentClass = function (t) {
          e(this.getTipElement()).addClass("bs-popover-" + t);
        }, h.getTipElement = function () {
          return this.tip = this.tip || e(this.config.template)[0], this.tip;
        }, h.setContent = function () {
          var t = e(this.getTipElement());
          this.setElementContent(t.find(l.TITLE), this.getTitle());

          var n = this._getContent();

          "function" == typeof n && (n = n.call(this.element)), this.setElementContent(t.find(l.CONTENT), n), t.removeClass(c.FADE + " " + c.SHOW);
        }, h._getContent = function () {
          return this.element.getAttribute("data-content") || this.config.content;
        }, h._cleanTipClass = function () {
          var t = e(this.getTipElement()),
              n = t.attr("class").match(o);
          null !== n && n.length > 0 && t.removeClass(n.join(""));
        }, d._jQueryInterface = function (t) {
          return this.each(function () {
            var n = e(this).data("bs.popover"),
                r = "object" == _typeof(t) ? t : null;

            if ((n || !/destroy|hide/.test(t)) && (n || (n = new d(this, r), e(this).data("bs.popover", n)), "string" == typeof t)) {
              if (void 0 === n[t]) throw new TypeError('No method named "' + t + '"');
              n[t]();
            }
          });
        }, i(d, null, [{
          key: "VERSION",
          get: function get() {
            return "4.1.3";
          }
        }, {
          key: "Default",
          get: function get() {
            return s;
          }
        }, {
          key: "NAME",
          get: function get() {
            return t;
          }
        }, {
          key: "DATA_KEY",
          get: function get() {
            return "bs.popover";
          }
        }, {
          key: "Event",
          get: function get() {
            return f;
          }
        }, {
          key: "EVENT_KEY",
          get: function get() {
            return n;
          }
        }, {
          key: "DefaultType",
          get: function get() {
            return u;
          }
        }]), d;
      }(h);

      return e.fn[t] = p._jQueryInterface, e.fn[t].Constructor = p, e.fn[t].noConflict = function () {
        return e.fn[t] = r, p._jQueryInterface;
      }, p;
    }(t),
        g = function (e) {
      var t = "scrollspy",
          n = e.fn[t],
          r = {
        offset: 10,
        method: "auto",
        target: ""
      },
          o = {
        offset: "number",
        method: "string",
        target: "(string|element)"
      },
          u = {
        ACTIVATE: "activate.bs.scrollspy",
        SCROLL: "scroll.bs.scrollspy",
        LOAD_DATA_API: "load.bs.scrollspy.data-api"
      },
          c = {
        DROPDOWN_ITEM: "dropdown-item",
        DROPDOWN_MENU: "dropdown-menu",
        ACTIVE: "active"
      },
          l = {
        DATA_SPY: '[data-spy="scroll"]',
        ACTIVE: ".active",
        NAV_LIST_GROUP: ".nav, .list-group",
        NAV_LINKS: ".nav-link",
        NAV_ITEMS: ".nav-item",
        LIST_ITEMS: ".list-group-item",
        DROPDOWN: ".dropdown",
        DROPDOWN_ITEMS: ".dropdown-item",
        DROPDOWN_TOGGLE: ".dropdown-toggle"
      },
          f = {
        OFFSET: "offset",
        POSITION: "position"
      },
          p = function () {
        function n(t, n) {
          var r = this;
          this._element = t, this._scrollElement = "BODY" === t.tagName ? window : t, this._config = this._getConfig(n), this._selector = this._config.target + " " + l.NAV_LINKS + "," + this._config.target + " " + l.LIST_ITEMS + "," + this._config.target + " " + l.DROPDOWN_ITEMS, this._offsets = [], this._targets = [], this._activeTarget = null, this._scrollHeight = 0, e(this._scrollElement).on(u.SCROLL, function (e) {
            return r._process(e);
          }), this.refresh(), this._process();
        }

        var p = n.prototype;
        return p.refresh = function () {
          var t = this,
              n = this._scrollElement === this._scrollElement.window ? f.OFFSET : f.POSITION,
              r = "auto" === this._config.method ? n : this._config.method,
              i = r === f.POSITION ? this._getScrollTop() : 0;
          this._offsets = [], this._targets = [], this._scrollHeight = this._getScrollHeight();
          var o = [].slice.call(document.querySelectorAll(this._selector));
          o.map(function (t) {
            var n,
                o = s.getSelectorFromElement(t);

            if (o && (n = document.querySelector(o)), n) {
              var a = n.getBoundingClientRect();
              if (a.width || a.height) return [e(n)[r]().top + i, o];
            }

            return null;
          }).filter(function (e) {
            return e;
          }).sort(function (e, t) {
            return e[0] - t[0];
          }).forEach(function (e) {
            t._offsets.push(e[0]), t._targets.push(e[1]);
          });
        }, p.dispose = function () {
          e.removeData(this._element, "bs.scrollspy"), e(this._scrollElement).off(".bs.scrollspy"), this._element = null, this._scrollElement = null, this._config = null, this._selector = null, this._offsets = null, this._targets = null, this._activeTarget = null, this._scrollHeight = null;
        }, p._getConfig = function (n) {
          if ("string" != typeof (n = a({}, r, "object" == _typeof(n) && n ? n : {})).target) {
            var i = e(n.target).attr("id");
            i || (i = s.getUID(t), e(n.target).attr("id", i)), n.target = "#" + i;
          }

          return s.typeCheckConfig(t, n, o), n;
        }, p._getScrollTop = function () {
          return this._scrollElement === window ? this._scrollElement.pageYOffset : this._scrollElement.scrollTop;
        }, p._getScrollHeight = function () {
          return this._scrollElement.scrollHeight || Math.max(document.body.scrollHeight, document.documentElement.scrollHeight);
        }, p._getOffsetHeight = function () {
          return this._scrollElement === window ? window.innerHeight : this._scrollElement.getBoundingClientRect().height;
        }, p._process = function () {
          var e = this._getScrollTop() + this._config.offset,
              t = this._getScrollHeight(),
              n = this._config.offset + t - this._getOffsetHeight();

          if (this._scrollHeight !== t && this.refresh(), e >= n) {
            var r = this._targets[this._targets.length - 1];
            this._activeTarget !== r && this._activate(r);
          } else {
            if (this._activeTarget && e < this._offsets[0] && this._offsets[0] > 0) return this._activeTarget = null, void this._clear();

            for (var i = this._offsets.length, o = i; o--;) {
              var a = this._activeTarget !== this._targets[o] && e >= this._offsets[o] && (void 0 === this._offsets[o + 1] || e < this._offsets[o + 1]);
              a && this._activate(this._targets[o]);
            }
          }
        }, p._activate = function (t) {
          this._activeTarget = t, this._clear();

          var n = this._selector.split(",");

          n = n.map(function (e) {
            return e + '[data-target="' + t + '"],' + e + '[href="' + t + '"]';
          });
          var r = e([].slice.call(document.querySelectorAll(n.join(","))));
          r.hasClass(c.DROPDOWN_ITEM) ? (r.closest(l.DROPDOWN).find(l.DROPDOWN_TOGGLE).addClass(c.ACTIVE), r.addClass(c.ACTIVE)) : (r.addClass(c.ACTIVE), r.parents(l.NAV_LIST_GROUP).prev(l.NAV_LINKS + ", " + l.LIST_ITEMS).addClass(c.ACTIVE), r.parents(l.NAV_LIST_GROUP).prev(l.NAV_ITEMS).children(l.NAV_LINKS).addClass(c.ACTIVE)), e(this._scrollElement).trigger(u.ACTIVATE, {
            relatedTarget: t
          });
        }, p._clear = function () {
          var t = [].slice.call(document.querySelectorAll(this._selector));
          e(t).filter(l.ACTIVE).removeClass(c.ACTIVE);
        }, n._jQueryInterface = function (t) {
          return this.each(function () {
            var r = e(this).data("bs.scrollspy"),
                i = "object" == _typeof(t) && t;

            if (r || (r = new n(this, i), e(this).data("bs.scrollspy", r)), "string" == typeof t) {
              if (void 0 === r[t]) throw new TypeError('No method named "' + t + '"');
              r[t]();
            }
          });
        }, i(n, null, [{
          key: "VERSION",
          get: function get() {
            return "4.1.3";
          }
        }, {
          key: "Default",
          get: function get() {
            return r;
          }
        }]), n;
      }();

      return e(window).on(u.LOAD_DATA_API, function () {
        for (var t = [].slice.call(document.querySelectorAll(l.DATA_SPY)), n = t.length, r = n; r--;) {
          var i = e(t[r]);

          p._jQueryInterface.call(i, i.data());
        }
      }), e.fn[t] = p._jQueryInterface, e.fn[t].Constructor = p, e.fn[t].noConflict = function () {
        return e.fn[t] = n, p._jQueryInterface;
      }, p;
    }(t),
        m = function (e) {
      var t = e.fn.tab,
          n = {
        HIDE: "hide.bs.tab",
        HIDDEN: "hidden.bs.tab",
        SHOW: "show.bs.tab",
        SHOWN: "shown.bs.tab",
        CLICK_DATA_API: "click.bs.tab.data-api"
      },
          r = {
        DROPDOWN_MENU: "dropdown-menu",
        ACTIVE: "active",
        DISABLED: "disabled",
        FADE: "fade",
        SHOW: "show"
      },
          o = {
        DROPDOWN: ".dropdown",
        NAV_LIST_GROUP: ".nav, .list-group",
        ACTIVE: ".active",
        ACTIVE_UL: "> li > .active",
        DATA_TOGGLE: '[data-toggle="tab"], [data-toggle="pill"], [data-toggle="list"]',
        DROPDOWN_TOGGLE: ".dropdown-toggle",
        DROPDOWN_ACTIVE_CHILD: "> .dropdown-menu .active"
      },
          a = function () {
        function t(e) {
          this._element = e;
        }

        var a = t.prototype;
        return a.show = function () {
          var t = this;

          if (!(this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE && e(this._element).hasClass(r.ACTIVE) || e(this._element).hasClass(r.DISABLED))) {
            var i,
                a,
                u = e(this._element).closest(o.NAV_LIST_GROUP)[0],
                c = s.getSelectorFromElement(this._element);

            if (u) {
              var l = "UL" === u.nodeName ? o.ACTIVE_UL : o.ACTIVE;
              a = (a = e.makeArray(e(u).find(l)))[a.length - 1];
            }

            var f = e.Event(n.HIDE, {
              relatedTarget: this._element
            }),
                p = e.Event(n.SHOW, {
              relatedTarget: a
            });

            if (a && e(a).trigger(f), e(this._element).trigger(p), !p.isDefaultPrevented() && !f.isDefaultPrevented()) {
              c && (i = document.querySelector(c)), this._activate(this._element, u);

              var d = function d() {
                var r = e.Event(n.HIDDEN, {
                  relatedTarget: t._element
                }),
                    i = e.Event(n.SHOWN, {
                  relatedTarget: a
                });
                e(a).trigger(r), e(t._element).trigger(i);
              };

              i ? this._activate(i, i.parentNode, d) : d();
            }
          }
        }, a.dispose = function () {
          e.removeData(this._element, "bs.tab"), this._element = null;
        }, a._activate = function (t, n, i) {
          var a = this,
              u = ("UL" === n.nodeName ? e(n).find(o.ACTIVE_UL) : e(n).children(o.ACTIVE))[0],
              c = i && u && e(u).hasClass(r.FADE),
              l = function l() {
            return a._transitionComplete(t, u, i);
          };

          if (u && c) {
            var f = s.getTransitionDurationFromElement(u);
            e(u).one(s.TRANSITION_END, l).emulateTransitionEnd(f);
          } else l();
        }, a._transitionComplete = function (t, n, i) {
          if (n) {
            e(n).removeClass(r.SHOW + " " + r.ACTIVE);
            var a = e(n.parentNode).find(o.DROPDOWN_ACTIVE_CHILD)[0];
            a && e(a).removeClass(r.ACTIVE), "tab" === n.getAttribute("role") && n.setAttribute("aria-selected", !1);
          }

          if (e(t).addClass(r.ACTIVE), "tab" === t.getAttribute("role") && t.setAttribute("aria-selected", !0), s.reflow(t), e(t).addClass(r.SHOW), t.parentNode && e(t.parentNode).hasClass(r.DROPDOWN_MENU)) {
            var u = e(t).closest(o.DROPDOWN)[0];

            if (u) {
              var c = [].slice.call(u.querySelectorAll(o.DROPDOWN_TOGGLE));
              e(c).addClass(r.ACTIVE);
            }

            t.setAttribute("aria-expanded", !0);
          }

          i && i();
        }, t._jQueryInterface = function (n) {
          return this.each(function () {
            var r = e(this),
                i = r.data("bs.tab");

            if (i || (i = new t(this), r.data("bs.tab", i)), "string" == typeof n) {
              if (void 0 === i[n]) throw new TypeError('No method named "' + n + '"');
              i[n]();
            }
          });
        }, i(t, null, [{
          key: "VERSION",
          get: function get() {
            return "4.1.3";
          }
        }]), t;
      }();

      return e(document).on(n.CLICK_DATA_API, o.DATA_TOGGLE, function (t) {
        t.preventDefault(), a._jQueryInterface.call(e(this), "show");
      }), e.fn.tab = a._jQueryInterface, e.fn.tab.Constructor = a, e.fn.tab.noConflict = function () {
        return e.fn.tab = t, a._jQueryInterface;
      }, a;
    }(t);

    (function (e) {
      if (void 0 === e) throw new TypeError("Bootstrap's JavaScript requires jQuery. jQuery must be included before Bootstrap's JavaScript.");
      var t = e.fn.jquery.split(" ")[0].split(".");
      if (t[0] < 2 && t[1] < 9 || 1 === t[0] && 9 === t[1] && t[2] < 1 || t[0] >= 4) throw new Error("Bootstrap's JavaScript requires at least jQuery v1.9.1 but less than v4.0.0");
    })(t), e.Util = s, e.Alert = u, e.Button = c, e.Carousel = l, e.Collapse = f, e.Dropdown = p, e.Modal = d, e.Popover = v, e.Scrollspy = g, e.Tab = m, e.Tooltip = h, Object.defineProperty(e, "__esModule", {
      value: !0
    });
  }(t, n(4), n(3));
}, function (e, t, n) {
  e.exports = n(18);
}, function (e, t, n) {
  "use strict";

  var r = n(0),
      i = n(5),
      o = n(20),
      a = n(2);

  function s(e) {
    var t = new o(e),
        n = i(o.prototype.request, t);
    return r.extend(n, o.prototype, t), r.extend(n, t), n;
  }

  var u = s(a);
  u.Axios = o, u.create = function (e) {
    return s(r.merge(a, e));
  }, u.Cancel = n(10), u.CancelToken = n(34), u.isCancel = n(9), u.all = function (e) {
    return Promise.all(e);
  }, u.spread = n(35), e.exports = u, e.exports["default"] = u;
}, function (e, t) {
  function n(e) {
    return !!e.constructor && "function" == typeof e.constructor.isBuffer && e.constructor.isBuffer(e);
  }

  e.exports = function (e) {
    return null != e && (n(e) || function (e) {
      return "function" == typeof e.readFloatLE && "function" == typeof e.slice && n(e.slice(0, 0));
    }(e) || !!e._isBuffer);
  };
}, function (e, t, n) {
  "use strict";

  var r = n(2),
      i = n(0),
      o = n(29),
      a = n(30);

  function s(e) {
    this.defaults = e, this.interceptors = {
      request: new o(),
      response: new o()
    };
  }

  s.prototype.request = function (e) {
    "string" == typeof e && (e = i.merge({
      url: arguments[0]
    }, arguments[1])), (e = i.merge(r, {
      method: "get"
    }, this.defaults, e)).method = e.method.toLowerCase();
    var t = [a, void 0],
        n = Promise.resolve(e);

    for (this.interceptors.request.forEach(function (e) {
      t.unshift(e.fulfilled, e.rejected);
    }), this.interceptors.response.forEach(function (e) {
      t.push(e.fulfilled, e.rejected);
    }); t.length;) {
      n = n.then(t.shift(), t.shift());
    }

    return n;
  }, i.forEach(["delete", "get", "head", "options"], function (e) {
    s.prototype[e] = function (t, n) {
      return this.request(i.merge(n || {}, {
        method: e,
        url: t
      }));
    };
  }), i.forEach(["post", "put", "patch"], function (e) {
    s.prototype[e] = function (t, n, r) {
      return this.request(i.merge(r || {}, {
        method: e,
        url: t,
        data: n
      }));
    };
  }), e.exports = s;
}, function (e, t, n) {
  "use strict";

  var r = n(0);

  e.exports = function (e, t) {
    r.forEach(e, function (n, r) {
      r !== t && r.toUpperCase() === t.toUpperCase() && (e[t] = n, delete e[r]);
    });
  };
}, function (e, t, n) {
  "use strict";

  var r = n(8);

  e.exports = function (e, t, n) {
    var i = n.config.validateStatus;
    n.status && i && !i(n.status) ? t(r("Request failed with status code " + n.status, n.config, null, n.request, n)) : e(n);
  };
}, function (e, t, n) {
  "use strict";

  e.exports = function (e, t, n, r, i) {
    return e.config = t, n && (e.code = n), e.request = r, e.response = i, e;
  };
}, function (e, t, n) {
  "use strict";

  var r = n(0);

  function i(e) {
    return encodeURIComponent(e).replace(/%40/gi, "@").replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
  }

  e.exports = function (e, t, n) {
    if (!t) return e;
    var o;
    if (n) o = n(t);else if (r.isURLSearchParams(t)) o = t.toString();else {
      var a = [];
      r.forEach(t, function (e, t) {
        null != e && (r.isArray(e) ? t += "[]" : e = [e], r.forEach(e, function (e) {
          r.isDate(e) ? e = e.toISOString() : r.isObject(e) && (e = JSON.stringify(e)), a.push(i(t) + "=" + i(e));
        }));
      }), o = a.join("&");
    }
    return o && (e += (-1 === e.indexOf("?") ? "?" : "&") + o), e;
  };
}, function (e, t, n) {
  "use strict";

  var r = n(0),
      i = ["age", "authorization", "content-length", "content-type", "etag", "expires", "from", "host", "if-modified-since", "if-unmodified-since", "last-modified", "location", "max-forwards", "proxy-authorization", "referer", "retry-after", "user-agent"];

  e.exports = function (e) {
    var t,
        n,
        o,
        a = {};
    return e ? (r.forEach(e.split("\n"), function (e) {
      if (o = e.indexOf(":"), t = r.trim(e.substr(0, o)).toLowerCase(), n = r.trim(e.substr(o + 1)), t) {
        if (a[t] && i.indexOf(t) >= 0) return;
        a[t] = "set-cookie" === t ? (a[t] ? a[t] : []).concat([n]) : a[t] ? a[t] + ", " + n : n;
      }
    }), a) : a;
  };
}, function (e, t, n) {
  "use strict";

  var r = n(0);
  e.exports = r.isStandardBrowserEnv() ? function () {
    var e,
        t = /(msie|trident)/i.test(navigator.userAgent),
        n = document.createElement("a");

    function i(e) {
      var r = e;
      return t && (n.setAttribute("href", r), r = n.href), n.setAttribute("href", r), {
        href: n.href,
        protocol: n.protocol ? n.protocol.replace(/:$/, "") : "",
        host: n.host,
        search: n.search ? n.search.replace(/^\?/, "") : "",
        hash: n.hash ? n.hash.replace(/^#/, "") : "",
        hostname: n.hostname,
        port: n.port,
        pathname: "/" === n.pathname.charAt(0) ? n.pathname : "/" + n.pathname
      };
    }

    return e = i(window.location.href), function (t) {
      var n = r.isString(t) ? i(t) : t;
      return n.protocol === e.protocol && n.host === e.host;
    };
  }() : function () {
    return !0;
  };
}, function (e, t, n) {
  "use strict";

  var r = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";

  function i() {
    this.message = "String contains an invalid character";
  }

  i.prototype = new Error(), i.prototype.code = 5, i.prototype.name = "InvalidCharacterError", e.exports = function (e) {
    for (var t, n, o = String(e), a = "", s = 0, u = r; o.charAt(0 | s) || (u = "=", s % 1); a += u.charAt(63 & t >> 8 - s % 1 * 8)) {
      if ((n = o.charCodeAt(s += .75)) > 255) throw new i();
      t = t << 8 | n;
    }

    return a;
  };
}, function (e, t, n) {
  "use strict";

  var r = n(0);
  e.exports = r.isStandardBrowserEnv() ? {
    write: function write(e, t, n, i, o, a) {
      var s = [];
      s.push(e + "=" + encodeURIComponent(t)), r.isNumber(n) && s.push("expires=" + new Date(n).toGMTString()), r.isString(i) && s.push("path=" + i), r.isString(o) && s.push("domain=" + o), !0 === a && s.push("secure"), document.cookie = s.join("; ");
    },
    read: function read(e) {
      var t = document.cookie.match(new RegExp("(^|;\\s*)(" + e + ")=([^;]*)"));
      return t ? decodeURIComponent(t[3]) : null;
    },
    remove: function remove(e) {
      this.write(e, "", Date.now() - 864e5);
    }
  } : {
    write: function write() {},
    read: function read() {
      return null;
    },
    remove: function remove() {}
  };
}, function (e, t, n) {
  "use strict";

  var r = n(0);

  function i() {
    this.handlers = [];
  }

  i.prototype.use = function (e, t) {
    return this.handlers.push({
      fulfilled: e,
      rejected: t
    }), this.handlers.length - 1;
  }, i.prototype.eject = function (e) {
    this.handlers[e] && (this.handlers[e] = null);
  }, i.prototype.forEach = function (e) {
    r.forEach(this.handlers, function (t) {
      null !== t && e(t);
    });
  }, e.exports = i;
}, function (e, t, n) {
  "use strict";

  var r = n(0),
      i = n(31),
      o = n(9),
      a = n(2),
      s = n(32),
      u = n(33);

  function c(e) {
    e.cancelToken && e.cancelToken.throwIfRequested();
  }

  e.exports = function (e) {
    return c(e), e.baseURL && !s(e.url) && (e.url = u(e.baseURL, e.url)), e.headers = e.headers || {}, e.data = i(e.data, e.headers, e.transformRequest), e.headers = r.merge(e.headers.common || {}, e.headers[e.method] || {}, e.headers || {}), r.forEach(["delete", "get", "head", "post", "put", "patch", "common"], function (t) {
      delete e.headers[t];
    }), (e.adapter || a.adapter)(e).then(function (t) {
      return c(e), t.data = i(t.data, t.headers, e.transformResponse), t;
    }, function (t) {
      return o(t) || (c(e), t && t.response && (t.response.data = i(t.response.data, t.response.headers, e.transformResponse))), Promise.reject(t);
    });
  };
}, function (e, t, n) {
  "use strict";

  var r = n(0);

  e.exports = function (e, t, n) {
    return r.forEach(n, function (n) {
      e = n(e, t);
    }), e;
  };
}, function (e, t, n) {
  "use strict";

  e.exports = function (e) {
    return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e);
  };
}, function (e, t, n) {
  "use strict";

  e.exports = function (e, t) {
    return t ? e.replace(/\/+$/, "") + "/" + t.replace(/^\/+/, "") : e;
  };
}, function (e, t, n) {
  "use strict";

  var r = n(10);

  function i(e) {
    if ("function" != typeof e) throw new TypeError("executor must be a function.");
    var t;
    this.promise = new Promise(function (e) {
      t = e;
    });
    var n = this;
    e(function (e) {
      n.reason || (n.reason = new r(e), t(n.reason));
    });
  }

  i.prototype.throwIfRequested = function () {
    if (this.reason) throw this.reason;
  }, i.source = function () {
    var e;
    return {
      token: new i(function (t) {
        e = t;
      }),
      cancel: e
    };
  }, e.exports = i;
}, function (e, t, n) {
  "use strict";

  e.exports = function (e) {
    return function (t) {
      return e.apply(null, t);
    };
  };
}, function (e, t, n) {
  "use strict";

  (function (t, n) {
    var r = Object.freeze({});

    function i(e) {
      return null == e;
    }

    function o(e) {
      return null != e;
    }

    function a(e) {
      return !0 === e;
    }

    function s(e) {
      return "string" == typeof e || "number" == typeof e || "symbol" == _typeof(e) || "boolean" == typeof e;
    }

    function u(e) {
      return null !== e && "object" == _typeof(e);
    }

    var c = Object.prototype.toString;

    function l(e) {
      return "[object Object]" === c.call(e);
    }

    function f(e) {
      return "[object RegExp]" === c.call(e);
    }

    function p(e) {
      var t = parseFloat(String(e));
      return t >= 0 && Math.floor(t) === t && isFinite(e);
    }

    function d(e) {
      return null == e ? "" : "object" == _typeof(e) ? JSON.stringify(e, null, 2) : String(e);
    }

    function h(e) {
      var t = parseFloat(e);
      return isNaN(t) ? e : t;
    }

    function v(e, t) {
      for (var n = Object.create(null), r = e.split(","), i = 0; i < r.length; i++) {
        n[r[i]] = !0;
      }

      return t ? function (e) {
        return n[e.toLowerCase()];
      } : function (e) {
        return n[e];
      };
    }

    var g = v("slot,component", !0),
        m = v("key,ref,slot,slot-scope,is");

    function y(e, t) {
      if (e.length) {
        var n = e.indexOf(t);
        if (n > -1) return e.splice(n, 1);
      }
    }

    var _ = Object.prototype.hasOwnProperty;

    function b(e, t) {
      return _.call(e, t);
    }

    function w(e) {
      var t = Object.create(null);
      return function (n) {
        return t[n] || (t[n] = e(n));
      };
    }

    var T = /-(\w)/g,
        E = w(function (e) {
      return e.replace(T, function (e, t) {
        return t ? t.toUpperCase() : "";
      });
    }),
        x = w(function (e) {
      return e.charAt(0).toUpperCase() + e.slice(1);
    }),
        C = /\B([A-Z])/g,
        A = w(function (e) {
      return e.replace(C, "-$1").toLowerCase();
    });
    var S = Function.prototype.bind ? function (e, t) {
      return e.bind(t);
    } : function (e, t) {
      function n(n) {
        var r = arguments.length;
        return r ? r > 1 ? e.apply(t, arguments) : e.call(t, n) : e.call(t);
      }

      return n._length = e.length, n;
    };

    function O(e, t) {
      t = t || 0;

      for (var n = e.length - t, r = new Array(n); n--;) {
        r[n] = e[n + t];
      }

      return r;
    }

    function D(e, t) {
      for (var n in t) {
        e[n] = t[n];
      }

      return e;
    }

    function I(e) {
      for (var t = {}, n = 0; n < e.length; n++) {
        e[n] && D(t, e[n]);
      }

      return t;
    }

    function k(e, t, n) {}

    var N = function N(e, t, n) {
      return !1;
    },
        L = function L(e) {
      return e;
    };

    function j(e, t) {
      if (e === t) return !0;
      var n = u(e),
          r = u(t);
      if (!n || !r) return !n && !r && String(e) === String(t);

      try {
        var i = Array.isArray(e),
            o = Array.isArray(t);
        if (i && o) return e.length === t.length && e.every(function (e, n) {
          return j(e, t[n]);
        });
        if (e instanceof Date && t instanceof Date) return e.getTime() === t.getTime();
        if (i || o) return !1;
        var a = Object.keys(e),
            s = Object.keys(t);
        return a.length === s.length && a.every(function (n) {
          return j(e[n], t[n]);
        });
      } catch (e) {
        return !1;
      }
    }

    function P(e, t) {
      for (var n = 0; n < e.length; n++) {
        if (j(e[n], t)) return n;
      }

      return -1;
    }

    function R(e) {
      var t = !1;
      return function () {
        t || (t = !0, e.apply(this, arguments));
      };
    }

    var $ = "data-server-rendered",
        H = ["component", "directive", "filter"],
        M = ["beforeCreate", "created", "beforeMount", "mounted", "beforeUpdate", "updated", "beforeDestroy", "destroyed", "activated", "deactivated", "errorCaptured"],
        F = {
      optionMergeStrategies: Object.create(null),
      silent: !1,
      productionTip: !1,
      devtools: !1,
      performance: !1,
      errorHandler: null,
      warnHandler: null,
      ignoredElements: [],
      keyCodes: Object.create(null),
      isReservedTag: N,
      isReservedAttr: N,
      isUnknownElement: N,
      getTagNamespace: k,
      parsePlatformTagName: L,
      mustUseProp: N,
      async: !0,
      _lifecycleHooks: M
    };

    function W(e, t, n, r) {
      Object.defineProperty(e, t, {
        value: n,
        enumerable: !!r,
        writable: !0,
        configurable: !0
      });
    }

    var q = /[^\w.$]/;
    var B,
        U = ("__proto__" in {}),
        V = "undefined" != typeof window,
        z = "undefined" != typeof WXEnvironment && !!WXEnvironment.platform,
        K = z && WXEnvironment.platform.toLowerCase(),
        G = V && window.navigator.userAgent.toLowerCase(),
        X = G && /msie|trident/.test(G),
        Q = G && G.indexOf("msie 9.0") > 0,
        Y = G && G.indexOf("edge/") > 0,
        J = (G && G.indexOf("android"), G && /iphone|ipad|ipod|ios/.test(G) || "ios" === K),
        Z = (G && /chrome\/\d+/.test(G), {}.watch),
        ee = !1;
    if (V) try {
      var te = {};
      Object.defineProperty(te, "passive", {
        get: function get() {
          ee = !0;
        }
      }), window.addEventListener("test-passive", null, te);
    } catch (e) {}

    var ne = function ne() {
      return void 0 === B && (B = !V && !z && void 0 !== t && t.process && "server" === t.process.env.VUE_ENV), B;
    },
        re = V && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;

    function ie(e) {
      return "function" == typeof e && /native code/.test(e.toString());
    }

    var oe,
        ae = "undefined" != typeof Symbol && ie(Symbol) && "undefined" != typeof Reflect && ie(Reflect.ownKeys);
    oe = "undefined" != typeof Set && ie(Set) ? Set : function () {
      function e() {
        this.set = Object.create(null);
      }

      return e.prototype.has = function (e) {
        return !0 === this.set[e];
      }, e.prototype.add = function (e) {
        this.set[e] = !0;
      }, e.prototype.clear = function () {
        this.set = Object.create(null);
      }, e;
    }();

    var se = k,
        ue = 0,
        ce = function ce() {
      this.id = ue++, this.subs = [];
    };

    ce.prototype.addSub = function (e) {
      this.subs.push(e);
    }, ce.prototype.removeSub = function (e) {
      y(this.subs, e);
    }, ce.prototype.depend = function () {
      ce.target && ce.target.addDep(this);
    }, ce.prototype.notify = function () {
      var e = this.subs.slice();

      for (var t = 0, n = e.length; t < n; t++) {
        e[t].update();
      }
    }, ce.target = null;
    var le = [];

    function fe(e) {
      le.push(e), ce.target = e;
    }

    function pe() {
      le.pop(), ce.target = le[le.length - 1];
    }

    var de = function de(e, t, n, r, i, o, a, s) {
      this.tag = e, this.data = t, this.children = n, this.text = r, this.elm = i, this.ns = void 0, this.context = o, this.fnContext = void 0, this.fnOptions = void 0, this.fnScopeId = void 0, this.key = t && t.key, this.componentOptions = a, this.componentInstance = void 0, this.parent = void 0, this.raw = !1, this.isStatic = !1, this.isRootInsert = !0, this.isComment = !1, this.isCloned = !1, this.isOnce = !1, this.asyncFactory = s, this.asyncMeta = void 0, this.isAsyncPlaceholder = !1;
    },
        he = {
      child: {
        configurable: !0
      }
    };

    he.child.get = function () {
      return this.componentInstance;
    }, Object.defineProperties(de.prototype, he);

    var ve = function ve(e) {
      void 0 === e && (e = "");
      var t = new de();
      return t.text = e, t.isComment = !0, t;
    };

    function ge(e) {
      return new de(void 0, void 0, void 0, String(e));
    }

    function me(e) {
      var t = new de(e.tag, e.data, e.children && e.children.slice(), e.text, e.elm, e.context, e.componentOptions, e.asyncFactory);
      return t.ns = e.ns, t.isStatic = e.isStatic, t.key = e.key, t.isComment = e.isComment, t.fnContext = e.fnContext, t.fnOptions = e.fnOptions, t.fnScopeId = e.fnScopeId, t.asyncMeta = e.asyncMeta, t.isCloned = !0, t;
    }

    var ye = Array.prototype,
        _e = Object.create(ye);

    ["push", "pop", "shift", "unshift", "splice", "sort", "reverse"].forEach(function (e) {
      var t = ye[e];
      W(_e, e, function () {
        for (var n = [], r = arguments.length; r--;) {
          n[r] = arguments[r];
        }

        var i,
            o = t.apply(this, n),
            a = this.__ob__;

        switch (e) {
          case "push":
          case "unshift":
            i = n;
            break;

          case "splice":
            i = n.slice(2);
        }

        return i && a.observeArray(i), a.dep.notify(), o;
      });
    });
    var be = Object.getOwnPropertyNames(_e),
        we = !0;

    function Te(e) {
      we = e;
    }

    var Ee = function Ee(e) {
      var t;
      this.value = e, this.dep = new ce(), this.vmCount = 0, W(e, "__ob__", this), Array.isArray(e) ? (U ? (t = _e, e.__proto__ = t) : function (e, t, n) {
        for (var r = 0, i = n.length; r < i; r++) {
          var o = n[r];
          W(e, o, t[o]);
        }
      }(e, _e, be), this.observeArray(e)) : this.walk(e);
    };

    function xe(e, t) {
      var n;
      if (u(e) && !(e instanceof de)) return b(e, "__ob__") && e.__ob__ instanceof Ee ? n = e.__ob__ : we && !ne() && (Array.isArray(e) || l(e)) && Object.isExtensible(e) && !e._isVue && (n = new Ee(e)), t && n && n.vmCount++, n;
    }

    function Ce(e, t, n, r, i) {
      var o = new ce(),
          a = Object.getOwnPropertyDescriptor(e, t);

      if (!a || !1 !== a.configurable) {
        var s = a && a.get,
            u = a && a.set;
        s && !u || 2 !== arguments.length || (n = e[t]);
        var c = !i && xe(n);
        Object.defineProperty(e, t, {
          enumerable: !0,
          configurable: !0,
          get: function get() {
            var t = s ? s.call(e) : n;
            return ce.target && (o.depend(), c && (c.dep.depend(), Array.isArray(t) && function e(t) {
              for (var n = void 0, r = 0, i = t.length; r < i; r++) {
                (n = t[r]) && n.__ob__ && n.__ob__.dep.depend(), Array.isArray(n) && e(n);
              }
            }(t))), t;
          },
          set: function set(t) {
            var r = s ? s.call(e) : n;
            t === r || t != t && r != r || s && !u || (u ? u.call(e, t) : n = t, c = !i && xe(t), o.notify());
          }
        });
      }
    }

    function Ae(e, t, n) {
      if (Array.isArray(e) && p(t)) return e.length = Math.max(e.length, t), e.splice(t, 1, n), n;
      if (t in e && !(t in Object.prototype)) return e[t] = n, n;
      var r = e.__ob__;
      return e._isVue || r && r.vmCount ? n : r ? (Ce(r.value, t, n), r.dep.notify(), n) : (e[t] = n, n);
    }

    function Se(e, t) {
      if (Array.isArray(e) && p(t)) e.splice(t, 1);else {
        var n = e.__ob__;
        e._isVue || n && n.vmCount || b(e, t) && (delete e[t], n && n.dep.notify());
      }
    }

    Ee.prototype.walk = function (e) {
      for (var t = Object.keys(e), n = 0; n < t.length; n++) {
        Ce(e, t[n]);
      }
    }, Ee.prototype.observeArray = function (e) {
      for (var t = 0, n = e.length; t < n; t++) {
        xe(e[t]);
      }
    };
    var Oe = F.optionMergeStrategies;

    function De(e, t) {
      if (!t) return e;

      for (var n, r, i, o = Object.keys(t), a = 0; a < o.length; a++) {
        r = e[n = o[a]], i = t[n], b(e, n) ? r !== i && l(r) && l(i) && De(r, i) : Ae(e, n, i);
      }

      return e;
    }

    function Ie(e, t, n) {
      return n ? function () {
        var r = "function" == typeof t ? t.call(n, n) : t,
            i = "function" == typeof e ? e.call(n, n) : e;
        return r ? De(r, i) : i;
      } : t ? e ? function () {
        return De("function" == typeof t ? t.call(this, this) : t, "function" == typeof e ? e.call(this, this) : e);
      } : t : e;
    }

    function ke(e, t) {
      return t ? e ? e.concat(t) : Array.isArray(t) ? t : [t] : e;
    }

    function Ne(e, t, n, r) {
      var i = Object.create(e || null);
      return t ? D(i, t) : i;
    }

    Oe.data = function (e, t, n) {
      return n ? Ie(e, t, n) : t && "function" != typeof t ? e : Ie(e, t);
    }, M.forEach(function (e) {
      Oe[e] = ke;
    }), H.forEach(function (e) {
      Oe[e + "s"] = Ne;
    }), Oe.watch = function (e, t, n, r) {
      if (e === Z && (e = void 0), t === Z && (t = void 0), !t) return Object.create(e || null);
      if (!e) return t;
      var i = {};

      for (var o in D(i, e), t) {
        var a = i[o],
            s = t[o];
        a && !Array.isArray(a) && (a = [a]), i[o] = a ? a.concat(s) : Array.isArray(s) ? s : [s];
      }

      return i;
    }, Oe.props = Oe.methods = Oe.inject = Oe.computed = function (e, t, n, r) {
      if (!e) return t;
      var i = Object.create(null);
      return D(i, e), t && D(i, t), i;
    }, Oe.provide = Ie;

    var Le = function Le(e, t) {
      return void 0 === t ? e : t;
    };

    function je(e, t, n) {
      if ("function" == typeof t && (t = t.options), function (e, t) {
        var n = e.props;

        if (n) {
          var r,
              i,
              o = {};
          if (Array.isArray(n)) for (r = n.length; r--;) {
            "string" == typeof (i = n[r]) && (o[E(i)] = {
              type: null
            });
          } else if (l(n)) for (var a in n) {
            i = n[a], o[E(a)] = l(i) ? i : {
              type: i
            };
          }
          e.props = o;
        }
      }(t), function (e, t) {
        var n = e.inject;

        if (n) {
          var r = e.inject = {};
          if (Array.isArray(n)) for (var i = 0; i < n.length; i++) {
            r[n[i]] = {
              from: n[i]
            };
          } else if (l(n)) for (var o in n) {
            var a = n[o];
            r[o] = l(a) ? D({
              from: o
            }, a) : {
              from: a
            };
          }
        }
      }(t), function (e) {
        var t = e.directives;
        if (t) for (var n in t) {
          var r = t[n];
          "function" == typeof r && (t[n] = {
            bind: r,
            update: r
          });
        }
      }(t), !t._base && (t["extends"] && (e = je(e, t["extends"], n)), t.mixins)) for (var r = 0, i = t.mixins.length; r < i; r++) {
        e = je(e, t.mixins[r], n);
      }
      var o,
          a = {};

      for (o in e) {
        s(o);
      }

      for (o in t) {
        b(e, o) || s(o);
      }

      function s(r) {
        var i = Oe[r] || Le;
        a[r] = i(e[r], t[r], n, r);
      }

      return a;
    }

    function Pe(e, t, n, r) {
      if ("string" == typeof n) {
        var i = e[t];
        if (b(i, n)) return i[n];
        var o = E(n);
        if (b(i, o)) return i[o];
        var a = x(o);
        return b(i, a) ? i[a] : i[n] || i[o] || i[a];
      }
    }

    function Re(e, t, n, r) {
      var i = t[e],
          o = !b(n, e),
          a = n[e],
          s = Me(Boolean, i.type);
      if (s > -1) if (o && !b(i, "default")) a = !1;else if ("" === a || a === A(e)) {
        var u = Me(String, i.type);
        (u < 0 || s < u) && (a = !0);
      }

      if (void 0 === a) {
        a = function (e, t, n) {
          if (!b(t, "default")) return;
          var r = t["default"];
          0;
          if (e && e.$options.propsData && void 0 === e.$options.propsData[n] && void 0 !== e._props[n]) return e._props[n];
          return "function" == typeof r && "Function" !== $e(t.type) ? r.call(e) : r;
        }(r, i, e);

        var c = we;
        Te(!0), xe(a), Te(c);
      }

      return a;
    }

    function $e(e) {
      var t = e && e.toString().match(/^\s*function (\w+)/);
      return t ? t[1] : "";
    }

    function He(e, t) {
      return $e(e) === $e(t);
    }

    function Me(e, t) {
      if (!Array.isArray(t)) return He(t, e) ? 0 : -1;

      for (var n = 0, r = t.length; n < r; n++) {
        if (He(t[n], e)) return n;
      }

      return -1;
    }

    function Fe(e, t, n) {
      if (t) for (var r = t; r = r.$parent;) {
        var i = r.$options.errorCaptured;
        if (i) for (var o = 0; o < i.length; o++) {
          try {
            if (!1 === i[o].call(r, e, t, n)) return;
          } catch (e) {
            We(e, r, "errorCaptured hook");
          }
        }
      }
      We(e, t, n);
    }

    function We(e, t, n) {
      if (F.errorHandler) try {
        return F.errorHandler.call(null, e, t, n);
      } catch (e) {
        qe(e, null, "config.errorHandler");
      }
      qe(e, t, n);
    }

    function qe(e, t, n) {
      if (!V && !z || "undefined" == typeof console) throw e;
      console.error(e);
    }

    var Be,
        Ue,
        Ve = [],
        ze = !1;

    function Ke() {
      ze = !1;
      var e = Ve.slice(0);
      Ve.length = 0;

      for (var t = 0; t < e.length; t++) {
        e[t]();
      }
    }

    var Ge = !1;
    if (void 0 !== n && ie(n)) Ue = function Ue() {
      n(Ke);
    };else if ("undefined" == typeof MessageChannel || !ie(MessageChannel) && "[object MessageChannelConstructor]" !== MessageChannel.toString()) Ue = function Ue() {
      setTimeout(Ke, 0);
    };else {
      var Xe = new MessageChannel(),
          Qe = Xe.port2;
      Xe.port1.onmessage = Ke, Ue = function Ue() {
        Qe.postMessage(1);
      };
    }

    if ("undefined" != typeof Promise && ie(Promise)) {
      var Ye = Promise.resolve();

      Be = function Be() {
        Ye.then(Ke), J && setTimeout(k);
      };
    } else Be = Ue;

    function Je(e, t) {
      var n;
      if (Ve.push(function () {
        if (e) try {
          e.call(t);
        } catch (e) {
          Fe(e, t, "nextTick");
        } else n && n(t);
      }), ze || (ze = !0, Ge ? Ue() : Be()), !e && "undefined" != typeof Promise) return new Promise(function (e) {
        n = e;
      });
    }

    var Ze = new oe();

    function et(e) {
      !function e(t, n) {
        var r, i;
        var o = Array.isArray(t);
        if (!o && !u(t) || Object.isFrozen(t) || t instanceof de) return;

        if (t.__ob__) {
          var a = t.__ob__.dep.id;
          if (n.has(a)) return;
          n.add(a);
        }

        if (o) for (r = t.length; r--;) {
          e(t[r], n);
        } else for (i = Object.keys(t), r = i.length; r--;) {
          e(t[i[r]], n);
        }
      }(e, Ze), Ze.clear();
    }

    var tt,
        nt = w(function (e) {
      var t = "&" === e.charAt(0),
          n = "~" === (e = t ? e.slice(1) : e).charAt(0),
          r = "!" === (e = n ? e.slice(1) : e).charAt(0);
      return {
        name: e = r ? e.slice(1) : e,
        once: n,
        capture: r,
        passive: t
      };
    });

    function rt(e) {
      function t() {
        var e = arguments,
            n = t.fns;
        if (!Array.isArray(n)) return n.apply(null, arguments);

        for (var r = n.slice(), i = 0; i < r.length; i++) {
          r[i].apply(null, e);
        }
      }

      return t.fns = e, t;
    }

    function it(e, t, n, r, o, s) {
      var u, c, l, f;

      for (u in e) {
        c = e[u], l = t[u], f = nt(u), i(c) || (i(l) ? (i(c.fns) && (c = e[u] = rt(c)), a(f.once) && (c = e[u] = o(f.name, c, f.capture)), n(f.name, c, f.capture, f.passive, f.params)) : c !== l && (l.fns = c, e[u] = l));
      }

      for (u in t) {
        i(e[u]) && r((f = nt(u)).name, t[u], f.capture);
      }
    }

    function ot(e, t, n) {
      var r;
      e instanceof de && (e = e.data.hook || (e.data.hook = {}));
      var s = e[t];

      function u() {
        n.apply(this, arguments), y(r.fns, u);
      }

      i(s) ? r = rt([u]) : o(s.fns) && a(s.merged) ? (r = s).fns.push(u) : r = rt([s, u]), r.merged = !0, e[t] = r;
    }

    function at(e, t, n, r, i) {
      if (o(t)) {
        if (b(t, n)) return e[n] = t[n], i || delete t[n], !0;
        if (b(t, r)) return e[n] = t[r], i || delete t[r], !0;
      }

      return !1;
    }

    function st(e) {
      return s(e) ? [ge(e)] : Array.isArray(e) ? function e(t, n) {
        var r = [];
        var u, c, l, f;

        for (u = 0; u < t.length; u++) {
          i(c = t[u]) || "boolean" == typeof c || (l = r.length - 1, f = r[l], Array.isArray(c) ? c.length > 0 && (ut((c = e(c, (n || "") + "_" + u))[0]) && ut(f) && (r[l] = ge(f.text + c[0].text), c.shift()), r.push.apply(r, c)) : s(c) ? ut(f) ? r[l] = ge(f.text + c) : "" !== c && r.push(ge(c)) : ut(c) && ut(f) ? r[l] = ge(f.text + c.text) : (a(t._isVList) && o(c.tag) && i(c.key) && o(n) && (c.key = "__vlist" + n + "_" + u + "__"), r.push(c)));
        }

        return r;
      }(e) : void 0;
    }

    function ut(e) {
      return o(e) && o(e.text) && !1 === e.isComment;
    }

    function ct(e, t) {
      return (e.__esModule || ae && "Module" === e[Symbol.toStringTag]) && (e = e["default"]), u(e) ? t.extend(e) : e;
    }

    function lt(e) {
      return e.isComment && e.asyncFactory;
    }

    function ft(e) {
      if (Array.isArray(e)) for (var t = 0; t < e.length; t++) {
        var n = e[t];
        if (o(n) && (o(n.componentOptions) || lt(n))) return n;
      }
    }

    function pt(e, t) {
      tt.$on(e, t);
    }

    function dt(e, t) {
      tt.$off(e, t);
    }

    function ht(e, t) {
      var n = tt;
      return function r() {
        null !== t.apply(null, arguments) && n.$off(e, r);
      };
    }

    function vt(e, t, n) {
      tt = e, it(t, n || {}, pt, dt, ht), tt = void 0;
    }

    function gt(e, t) {
      var n = {};
      if (!e) return n;

      for (var r = 0, i = e.length; r < i; r++) {
        var o = e[r],
            a = o.data;
        if (a && a.attrs && a.attrs.slot && delete a.attrs.slot, o.context !== t && o.fnContext !== t || !a || null == a.slot) (n["default"] || (n["default"] = [])).push(o);else {
          var s = a.slot,
              u = n[s] || (n[s] = []);
          "template" === o.tag ? u.push.apply(u, o.children || []) : u.push(o);
        }
      }

      for (var c in n) {
        n[c].every(mt) && delete n[c];
      }

      return n;
    }

    function mt(e) {
      return e.isComment && !e.asyncFactory || " " === e.text;
    }

    function yt(e, t) {
      t = t || {};

      for (var n = 0; n < e.length; n++) {
        Array.isArray(e[n]) ? yt(e[n], t) : t[e[n].key] = e[n].fn;
      }

      return t;
    }

    var _t = null;

    function bt(e) {
      var t = _t;
      return _t = e, function () {
        _t = t;
      };
    }

    function wt(e) {
      for (; e && (e = e.$parent);) {
        if (e._inactive) return !0;
      }

      return !1;
    }

    function Tt(e, t) {
      if (t) {
        if (e._directInactive = !1, wt(e)) return;
      } else if (e._directInactive) return;

      if (e._inactive || null === e._inactive) {
        e._inactive = !1;

        for (var n = 0; n < e.$children.length; n++) {
          Tt(e.$children[n]);
        }

        Et(e, "activated");
      }
    }

    function Et(e, t) {
      fe();
      var n = e.$options[t];
      if (n) for (var r = 0, i = n.length; r < i; r++) {
        try {
          n[r].call(e);
        } catch (n) {
          Fe(n, e, t + " hook");
        }
      }
      e._hasHookEvent && e.$emit("hook:" + t), pe();
    }

    var xt = [],
        Ct = [],
        At = {},
        St = !1,
        Ot = !1,
        Dt = 0;

    function It() {
      var e, t;

      for (Ot = !0, xt.sort(function (e, t) {
        return e.id - t.id;
      }), Dt = 0; Dt < xt.length; Dt++) {
        (e = xt[Dt]).before && e.before(), t = e.id, At[t] = null, e.run();
      }

      var n = Ct.slice(),
          r = xt.slice();
      Dt = xt.length = Ct.length = 0, At = {}, St = Ot = !1, function (e) {
        for (var t = 0; t < e.length; t++) {
          e[t]._inactive = !0, Tt(e[t], !0);
        }
      }(n), function (e) {
        var t = e.length;

        for (; t--;) {
          var n = e[t],
              r = n.vm;
          r._watcher === n && r._isMounted && !r._isDestroyed && Et(r, "updated");
        }
      }(r), re && F.devtools && re.emit("flush");
    }

    var kt = 0,
        Nt = function Nt(e, t, n, r, i) {
      this.vm = e, i && (e._watcher = this), e._watchers.push(this), r ? (this.deep = !!r.deep, this.user = !!r.user, this.lazy = !!r.lazy, this.sync = !!r.sync, this.before = r.before) : this.deep = this.user = this.lazy = this.sync = !1, this.cb = n, this.id = ++kt, this.active = !0, this.dirty = this.lazy, this.deps = [], this.newDeps = [], this.depIds = new oe(), this.newDepIds = new oe(), this.expression = "", "function" == typeof t ? this.getter = t : (this.getter = function (e) {
        if (!q.test(e)) {
          var t = e.split(".");
          return function (e) {
            for (var n = 0; n < t.length; n++) {
              if (!e) return;
              e = e[t[n]];
            }

            return e;
          };
        }
      }(t), this.getter || (this.getter = k)), this.value = this.lazy ? void 0 : this.get();
    };

    Nt.prototype.get = function () {
      var e;
      fe(this);
      var t = this.vm;

      try {
        e = this.getter.call(t, t);
      } catch (e) {
        if (!this.user) throw e;
        Fe(e, t, 'getter for watcher "' + this.expression + '"');
      } finally {
        this.deep && et(e), pe(), this.cleanupDeps();
      }

      return e;
    }, Nt.prototype.addDep = function (e) {
      var t = e.id;
      this.newDepIds.has(t) || (this.newDepIds.add(t), this.newDeps.push(e), this.depIds.has(t) || e.addSub(this));
    }, Nt.prototype.cleanupDeps = function () {
      for (var e = this.deps.length; e--;) {
        var t = this.deps[e];
        this.newDepIds.has(t.id) || t.removeSub(this);
      }

      var n = this.depIds;
      this.depIds = this.newDepIds, this.newDepIds = n, this.newDepIds.clear(), n = this.deps, this.deps = this.newDeps, this.newDeps = n, this.newDeps.length = 0;
    }, Nt.prototype.update = function () {
      this.lazy ? this.dirty = !0 : this.sync ? this.run() : function (e) {
        var t = e.id;

        if (null == At[t]) {
          if (At[t] = !0, Ot) {
            for (var n = xt.length - 1; n > Dt && xt[n].id > e.id;) {
              n--;
            }

            xt.splice(n + 1, 0, e);
          } else xt.push(e);

          St || (St = !0, Je(It));
        }
      }(this);
    }, Nt.prototype.run = function () {
      if (this.active) {
        var e = this.get();

        if (e !== this.value || u(e) || this.deep) {
          var t = this.value;
          if (this.value = e, this.user) try {
            this.cb.call(this.vm, e, t);
          } catch (e) {
            Fe(e, this.vm, 'callback for watcher "' + this.expression + '"');
          } else this.cb.call(this.vm, e, t);
        }
      }
    }, Nt.prototype.evaluate = function () {
      this.value = this.get(), this.dirty = !1;
    }, Nt.prototype.depend = function () {
      for (var e = this.deps.length; e--;) {
        this.deps[e].depend();
      }
    }, Nt.prototype.teardown = function () {
      if (this.active) {
        this.vm._isBeingDestroyed || y(this.vm._watchers, this);

        for (var e = this.deps.length; e--;) {
          this.deps[e].removeSub(this);
        }

        this.active = !1;
      }
    };
    var Lt = {
      enumerable: !0,
      configurable: !0,
      get: k,
      set: k
    };

    function jt(e, t, n) {
      Lt.get = function () {
        return this[t][n];
      }, Lt.set = function (e) {
        this[t][n] = e;
      }, Object.defineProperty(e, n, Lt);
    }

    function Pt(e) {
      e._watchers = [];
      var t = e.$options;
      t.props && function (e, t) {
        var n = e.$options.propsData || {},
            r = e._props = {},
            i = e.$options._propKeys = [];
        e.$parent && Te(!1);

        var o = function o(_o3) {
          i.push(_o3);
          var a = Re(_o3, t, n, e);
          Ce(r, _o3, a), _o3 in e || jt(e, "_props", _o3);
        };

        for (var a in t) {
          o(a);
        }

        Te(!0);
      }(e, t.props), t.methods && function (e, t) {
        e.$options.props;

        for (var n in t) {
          e[n] = "function" != typeof t[n] ? k : S(t[n], e);
        }
      }(e, t.methods), t.data ? function (e) {
        var t = e.$options.data;
        l(t = e._data = "function" == typeof t ? function (e, t) {
          fe();

          try {
            return e.call(t, t);
          } catch (e) {
            return Fe(e, t, "data()"), {};
          } finally {
            pe();
          }
        }(t, e) : t || {}) || (t = {});
        var n = Object.keys(t),
            r = e.$options.props,
            i = (e.$options.methods, n.length);

        for (; i--;) {
          var o = n[i];
          0, r && b(r, o) || (a = void 0, 36 !== (a = (o + "").charCodeAt(0)) && 95 !== a && jt(e, "_data", o));
        }

        var a;
        xe(t, !0);
      }(e) : xe(e._data = {}, !0), t.computed && function (e, t) {
        var n = e._computedWatchers = Object.create(null),
            r = ne();

        for (var i in t) {
          var o = t[i],
              a = "function" == typeof o ? o : o.get;
          0, r || (n[i] = new Nt(e, a || k, k, Rt)), i in e || $t(e, i, o);
        }
      }(e, t.computed), t.watch && t.watch !== Z && function (e, t) {
        for (var n in t) {
          var r = t[n];
          if (Array.isArray(r)) for (var i = 0; i < r.length; i++) {
            Ft(e, n, r[i]);
          } else Ft(e, n, r);
        }
      }(e, t.watch);
    }

    var Rt = {
      lazy: !0
    };

    function $t(e, t, n) {
      var r = !ne();
      "function" == typeof n ? (Lt.get = r ? Ht(t) : Mt(n), Lt.set = k) : (Lt.get = n.get ? r && !1 !== n.cache ? Ht(t) : Mt(n.get) : k, Lt.set = n.set || k), Object.defineProperty(e, t, Lt);
    }

    function Ht(e) {
      return function () {
        var t = this._computedWatchers && this._computedWatchers[e];
        if (t) return t.dirty && t.evaluate(), ce.target && t.depend(), t.value;
      };
    }

    function Mt(e) {
      return function () {
        return e.call(this, this);
      };
    }

    function Ft(e, t, n, r) {
      return l(n) && (r = n, n = n.handler), "string" == typeof n && (n = e[n]), e.$watch(t, n, r);
    }

    function Wt(e, t) {
      if (e) {
        for (var n = Object.create(null), r = ae ? Reflect.ownKeys(e).filter(function (t) {
          return Object.getOwnPropertyDescriptor(e, t).enumerable;
        }) : Object.keys(e), i = 0; i < r.length; i++) {
          for (var o = r[i], a = e[o].from, s = t; s;) {
            if (s._provided && b(s._provided, a)) {
              n[o] = s._provided[a];
              break;
            }

            s = s.$parent;
          }

          if (!s) if ("default" in e[o]) {
            var u = e[o]["default"];
            n[o] = "function" == typeof u ? u.call(t) : u;
          } else 0;
        }

        return n;
      }
    }

    function qt(e, t) {
      var n, r, i, a, s;
      if (Array.isArray(e) || "string" == typeof e) for (n = new Array(e.length), r = 0, i = e.length; r < i; r++) {
        n[r] = t(e[r], r);
      } else if ("number" == typeof e) for (n = new Array(e), r = 0; r < e; r++) {
        n[r] = t(r + 1, r);
      } else if (u(e)) for (a = Object.keys(e), n = new Array(a.length), r = 0, i = a.length; r < i; r++) {
        s = a[r], n[r] = t(e[s], s, r);
      }
      return o(n) || (n = []), n._isVList = !0, n;
    }

    function Bt(e, t, n, r) {
      var i,
          o = this.$scopedSlots[e];
      o ? (n = n || {}, r && (n = D(D({}, r), n)), i = o(n) || t) : i = this.$slots[e] || t;
      var a = n && n.slot;
      return a ? this.$createElement("template", {
        slot: a
      }, i) : i;
    }

    function Ut(e) {
      return Pe(this.$options, "filters", e) || L;
    }

    function Vt(e, t) {
      return Array.isArray(e) ? -1 === e.indexOf(t) : e !== t;
    }

    function zt(e, t, n, r, i) {
      var o = F.keyCodes[t] || n;
      return i && r && !F.keyCodes[t] ? Vt(i, r) : o ? Vt(o, e) : r ? A(r) !== t : void 0;
    }

    function Kt(e, t, n, r, i) {
      if (n) if (u(n)) {
        var o;
        Array.isArray(n) && (n = I(n));

        var a = function a(_a2) {
          if ("class" === _a2 || "style" === _a2 || m(_a2)) o = e;else {
            var s = e.attrs && e.attrs.type;
            o = r || F.mustUseProp(t, s, _a2) ? e.domProps || (e.domProps = {}) : e.attrs || (e.attrs = {});
          }
          var u = E(_a2);
          _a2 in o || u in o || (o[_a2] = n[_a2], i && ((e.on || (e.on = {}))["update:" + u] = function (e) {
            n[_a2] = e;
          }));
        };

        for (var s in n) {
          a(s);
        }
      } else ;
      return e;
    }

    function Gt(e, t) {
      var n = this._staticTrees || (this._staticTrees = []),
          r = n[e];
      return r && !t ? r : (Qt(r = n[e] = this.$options.staticRenderFns[e].call(this._renderProxy, null, this), "__static__" + e, !1), r);
    }

    function Xt(e, t, n) {
      return Qt(e, "__once__" + t + (n ? "_" + n : ""), !0), e;
    }

    function Qt(e, t, n) {
      if (Array.isArray(e)) for (var r = 0; r < e.length; r++) {
        e[r] && "string" != typeof e[r] && Yt(e[r], t + "_" + r, n);
      } else Yt(e, t, n);
    }

    function Yt(e, t, n) {
      e.isStatic = !0, e.key = t, e.isOnce = n;
    }

    function Jt(e, t) {
      if (t) if (l(t)) {
        var n = e.on = e.on ? D({}, e.on) : {};

        for (var r in t) {
          var i = n[r],
              o = t[r];
          n[r] = i ? [].concat(i, o) : o;
        }
      } else ;
      return e;
    }

    function Zt(e) {
      e._o = Xt, e._n = h, e._s = d, e._l = qt, e._t = Bt, e._q = j, e._i = P, e._m = Gt, e._f = Ut, e._k = zt, e._b = Kt, e._v = ge, e._e = ve, e._u = yt, e._g = Jt;
    }

    function en(e, t, n, i, o) {
      var s,
          u = o.options;
      b(i, "_uid") ? (s = Object.create(i))._original = i : (s = i, i = i._original);
      var c = a(u._compiled),
          l = !c;
      this.data = e, this.props = t, this.children = n, this.parent = i, this.listeners = e.on || r, this.injections = Wt(u.inject, i), this.slots = function () {
        return gt(n, i);
      }, c && (this.$options = u, this.$slots = this.slots(), this.$scopedSlots = e.scopedSlots || r), u._scopeId ? this._c = function (e, t, n, r) {
        var o = ln(s, e, t, n, r, l);
        return o && !Array.isArray(o) && (o.fnScopeId = u._scopeId, o.fnContext = i), o;
      } : this._c = function (e, t, n, r) {
        return ln(s, e, t, n, r, l);
      };
    }

    function tn(e, t, n, r, i) {
      var o = me(e);
      return o.fnContext = n, o.fnOptions = r, t.slot && ((o.data || (o.data = {})).slot = t.slot), o;
    }

    function nn(e, t) {
      for (var n in t) {
        e[E(n)] = t[n];
      }
    }

    Zt(en.prototype);
    var rn = {
      init: function init(e, t) {
        if (e.componentInstance && !e.componentInstance._isDestroyed && e.data.keepAlive) {
          var n = e;
          rn.prepatch(n, n);
        } else {
          (e.componentInstance = function (e, t) {
            var n = {
              _isComponent: !0,
              _parentVnode: e,
              parent: t
            },
                r = e.data.inlineTemplate;
            o(r) && (n.render = r.render, n.staticRenderFns = r.staticRenderFns);
            return new e.componentOptions.Ctor(n);
          }(e, _t)).$mount(t ? e.elm : void 0, t);
        }
      },
      prepatch: function prepatch(e, t) {
        var n = t.componentOptions;
        !function (e, t, n, i, o) {
          var a = !!(o || e.$options._renderChildren || i.data.scopedSlots || e.$scopedSlots !== r);

          if (e.$options._parentVnode = i, e.$vnode = i, e._vnode && (e._vnode.parent = i), e.$options._renderChildren = o, e.$attrs = i.data.attrs || r, e.$listeners = n || r, t && e.$options.props) {
            Te(!1);

            for (var s = e._props, u = e.$options._propKeys || [], c = 0; c < u.length; c++) {
              var l = u[c],
                  f = e.$options.props;
              s[l] = Re(l, f, t, e);
            }

            Te(!0), e.$options.propsData = t;
          }

          n = n || r;
          var p = e.$options._parentListeners;
          e.$options._parentListeners = n, vt(e, n, p), a && (e.$slots = gt(o, i.context), e.$forceUpdate());
        }(t.componentInstance = e.componentInstance, n.propsData, n.listeners, t, n.children);
      },
      insert: function insert(e) {
        var t,
            n = e.context,
            r = e.componentInstance;
        r._isMounted || (r._isMounted = !0, Et(r, "mounted")), e.data.keepAlive && (n._isMounted ? ((t = r)._inactive = !1, Ct.push(t)) : Tt(r, !0));
      },
      destroy: function destroy(e) {
        var t = e.componentInstance;
        t._isDestroyed || (e.data.keepAlive ? function e(t, n) {
          if (!(n && (t._directInactive = !0, wt(t)) || t._inactive)) {
            t._inactive = !0;

            for (var r = 0; r < t.$children.length; r++) {
              e(t.$children[r]);
            }

            Et(t, "deactivated");
          }
        }(t, !0) : t.$destroy());
      }
    },
        on = Object.keys(rn);

    function an(e, t, n, s, c) {
      if (!i(e)) {
        var l = n.$options._base;

        if (u(e) && (e = l.extend(e)), "function" == typeof e) {
          var f;
          if (i(e.cid) && void 0 === (e = function (e, t, n) {
            if (a(e.error) && o(e.errorComp)) return e.errorComp;
            if (o(e.resolved)) return e.resolved;
            if (a(e.loading) && o(e.loadingComp)) return e.loadingComp;

            if (!o(e.contexts)) {
              var r = e.contexts = [n],
                  s = !0,
                  c = function c(e) {
                for (var t = 0, n = r.length; t < n; t++) {
                  r[t].$forceUpdate();
                }

                e && (r.length = 0);
              },
                  l = R(function (n) {
                e.resolved = ct(n, t), s || c(!0);
              }),
                  f = R(function (t) {
                o(e.errorComp) && (e.error = !0, c(!0));
              }),
                  p = e(l, f);

              return u(p) && ("function" == typeof p.then ? i(e.resolved) && p.then(l, f) : o(p.component) && "function" == typeof p.component.then && (p.component.then(l, f), o(p.error) && (e.errorComp = ct(p.error, t)), o(p.loading) && (e.loadingComp = ct(p.loading, t), 0 === p.delay ? e.loading = !0 : setTimeout(function () {
                i(e.resolved) && i(e.error) && (e.loading = !0, c(!1));
              }, p.delay || 200)), o(p.timeout) && setTimeout(function () {
                i(e.resolved) && f(null);
              }, p.timeout))), s = !1, e.loading ? e.loadingComp : e.resolved;
            }

            e.contexts.push(n);
          }(f = e, l, n))) return function (e, t, n, r, i) {
            var o = ve();
            return o.asyncFactory = e, o.asyncMeta = {
              data: t,
              context: n,
              children: r,
              tag: i
            }, o;
          }(f, t, n, s, c);
          t = t || {}, pn(e), o(t.model) && function (e, t) {
            var n = e.model && e.model.prop || "value",
                r = e.model && e.model.event || "input";
            (t.props || (t.props = {}))[n] = t.model.value;
            var i = t.on || (t.on = {}),
                a = i[r],
                s = t.model.callback;
            o(a) ? (Array.isArray(a) ? -1 === a.indexOf(s) : a !== s) && (i[r] = [s].concat(a)) : i[r] = s;
          }(e.options, t);

          var p = function (e, t, n) {
            var r = t.options.props;

            if (!i(r)) {
              var a = {},
                  s = e.attrs,
                  u = e.props;
              if (o(s) || o(u)) for (var c in r) {
                var l = A(c);
                at(a, u, c, l, !0) || at(a, s, c, l, !1);
              }
              return a;
            }
          }(t, e);

          if (a(e.options.functional)) return function (e, t, n, i, a) {
            var s = e.options,
                u = {},
                c = s.props;
            if (o(c)) for (var l in c) {
              u[l] = Re(l, c, t || r);
            } else o(n.attrs) && nn(u, n.attrs), o(n.props) && nn(u, n.props);
            var f = new en(n, u, a, i, e),
                p = s.render.call(null, f._c, f);
            if (p instanceof de) return tn(p, n, f.parent, s);

            if (Array.isArray(p)) {
              for (var d = st(p) || [], h = new Array(d.length), v = 0; v < d.length; v++) {
                h[v] = tn(d[v], n, f.parent, s);
              }

              return h;
            }
          }(e, p, t, n, s);
          var d = t.on;

          if (t.on = t.nativeOn, a(e.options["abstract"])) {
            var h = t.slot;
            t = {}, h && (t.slot = h);
          }

          !function (e) {
            for (var t = e.hook || (e.hook = {}), n = 0; n < on.length; n++) {
              var r = on[n],
                  i = t[r],
                  o = rn[r];
              i === o || i && i._merged || (t[r] = i ? sn(o, i) : o);
            }
          }(t);
          var v = e.options.name || c;
          return new de("vue-component-" + e.cid + (v ? "-" + v : ""), t, void 0, void 0, void 0, n, {
            Ctor: e,
            propsData: p,
            listeners: d,
            tag: c,
            children: s
          }, f);
        }
      }
    }

    function sn(e, t) {
      var n = function n(_n3, r) {
        e(_n3, r), t(_n3, r);
      };

      return n._merged = !0, n;
    }

    var un = 1,
        cn = 2;

    function ln(e, t, n, r, c, l) {
      return (Array.isArray(n) || s(n)) && (c = r, r = n, n = void 0), a(l) && (c = cn), function (e, t, n, r, s) {
        if (o(n) && o(n.__ob__)) return ve();
        o(n) && o(n.is) && (t = n.is);
        if (!t) return ve();
        0;
        Array.isArray(r) && "function" == typeof r[0] && ((n = n || {}).scopedSlots = {
          "default": r[0]
        }, r.length = 0);
        s === cn ? r = st(r) : s === un && (r = function (e) {
          for (var t = 0; t < e.length; t++) {
            if (Array.isArray(e[t])) return Array.prototype.concat.apply([], e);
          }

          return e;
        }(r));
        var c, l;

        if ("string" == typeof t) {
          var f;
          l = e.$vnode && e.$vnode.ns || F.getTagNamespace(t), c = F.isReservedTag(t) ? new de(F.parsePlatformTagName(t), n, r, void 0, void 0, e) : n && n.pre || !o(f = Pe(e.$options, "components", t)) ? new de(t, n, r, void 0, void 0, e) : an(f, n, e, r, t);
        } else c = an(t, n, e, r);

        return Array.isArray(c) ? c : o(c) ? (o(l) && function e(t, n, r) {
          t.ns = n;
          "foreignObject" === t.tag && (n = void 0, r = !0);
          if (o(t.children)) for (var s = 0, u = t.children.length; s < u; s++) {
            var c = t.children[s];
            o(c.tag) && (i(c.ns) || a(r) && "svg" !== c.tag) && e(c, n, r);
          }
        }(c, l), o(n) && function (e) {
          u(e.style) && et(e.style);
          u(e["class"]) && et(e["class"]);
        }(n), c) : ve();
      }(e, t, n, r, c);
    }

    var fn = 0;

    function pn(e) {
      var t = e.options;

      if (e["super"]) {
        var n = pn(e["super"]);

        if (n !== e.superOptions) {
          e.superOptions = n;

          var r = function (e) {
            var t,
                n = e.options,
                r = e.extendOptions,
                i = e.sealedOptions;

            for (var o in n) {
              n[o] !== i[o] && (t || (t = {}), t[o] = dn(n[o], r[o], i[o]));
            }

            return t;
          }(e);

          r && D(e.extendOptions, r), (t = e.options = je(n, e.extendOptions)).name && (t.components[t.name] = e);
        }
      }

      return t;
    }

    function dn(e, t, n) {
      if (Array.isArray(e)) {
        var r = [];
        n = Array.isArray(n) ? n : [n], t = Array.isArray(t) ? t : [t];

        for (var i = 0; i < e.length; i++) {
          (t.indexOf(e[i]) >= 0 || n.indexOf(e[i]) < 0) && r.push(e[i]);
        }

        return r;
      }

      return e;
    }

    function hn(e) {
      this._init(e);
    }

    function vn(e) {
      e.cid = 0;
      var t = 1;

      e.extend = function (e) {
        e = e || {};
        var n = this,
            r = n.cid,
            i = e._Ctor || (e._Ctor = {});
        if (i[r]) return i[r];
        var o = e.name || n.options.name;

        var a = function a(e) {
          this._init(e);
        };

        return (a.prototype = Object.create(n.prototype)).constructor = a, a.cid = t++, a.options = je(n.options, e), a["super"] = n, a.options.props && function (e) {
          var t = e.options.props;

          for (var n in t) {
            jt(e.prototype, "_props", n);
          }
        }(a), a.options.computed && function (e) {
          var t = e.options.computed;

          for (var n in t) {
            $t(e.prototype, n, t[n]);
          }
        }(a), a.extend = n.extend, a.mixin = n.mixin, a.use = n.use, H.forEach(function (e) {
          a[e] = n[e];
        }), o && (a.options.components[o] = a), a.superOptions = n.options, a.extendOptions = e, a.sealedOptions = D({}, a.options), i[r] = a, a;
      };
    }

    function gn(e) {
      return e && (e.Ctor.options.name || e.tag);
    }

    function mn(e, t) {
      return Array.isArray(e) ? e.indexOf(t) > -1 : "string" == typeof e ? e.split(",").indexOf(t) > -1 : !!f(e) && e.test(t);
    }

    function yn(e, t) {
      var n = e.cache,
          r = e.keys,
          i = e._vnode;

      for (var o in n) {
        var a = n[o];

        if (a) {
          var s = gn(a.componentOptions);
          s && !t(s) && _n(n, o, r, i);
        }
      }
    }

    function _n(e, t, n, r) {
      var i = e[t];
      !i || r && i.tag === r.tag || i.componentInstance.$destroy(), e[t] = null, y(n, t);
    }

    !function (e) {
      e.prototype._init = function (e) {
        var t = this;
        t._uid = fn++, t._isVue = !0, e && e._isComponent ? function (e, t) {
          var n = e.$options = Object.create(e.constructor.options),
              r = t._parentVnode;
          n.parent = t.parent, n._parentVnode = r;
          var i = r.componentOptions;
          n.propsData = i.propsData, n._parentListeners = i.listeners, n._renderChildren = i.children, n._componentTag = i.tag, t.render && (n.render = t.render, n.staticRenderFns = t.staticRenderFns);
        }(t, e) : t.$options = je(pn(t.constructor), e || {}, t), t._renderProxy = t, t._self = t, function (e) {
          var t = e.$options,
              n = t.parent;

          if (n && !t["abstract"]) {
            for (; n.$options["abstract"] && n.$parent;) {
              n = n.$parent;
            }

            n.$children.push(e);
          }

          e.$parent = n, e.$root = n ? n.$root : e, e.$children = [], e.$refs = {}, e._watcher = null, e._inactive = null, e._directInactive = !1, e._isMounted = !1, e._isDestroyed = !1, e._isBeingDestroyed = !1;
        }(t), function (e) {
          e._events = Object.create(null), e._hasHookEvent = !1;
          var t = e.$options._parentListeners;
          t && vt(e, t);
        }(t), function (e) {
          e._vnode = null, e._staticTrees = null;
          var t = e.$options,
              n = e.$vnode = t._parentVnode,
              i = n && n.context;
          e.$slots = gt(t._renderChildren, i), e.$scopedSlots = r, e._c = function (t, n, r, i) {
            return ln(e, t, n, r, i, !1);
          }, e.$createElement = function (t, n, r, i) {
            return ln(e, t, n, r, i, !0);
          };
          var o = n && n.data;
          Ce(e, "$attrs", o && o.attrs || r, null, !0), Ce(e, "$listeners", t._parentListeners || r, null, !0);
        }(t), Et(t, "beforeCreate"), function (e) {
          var t = Wt(e.$options.inject, e);
          t && (Te(!1), Object.keys(t).forEach(function (n) {
            Ce(e, n, t[n]);
          }), Te(!0));
        }(t), Pt(t), function (e) {
          var t = e.$options.provide;
          t && (e._provided = "function" == typeof t ? t.call(e) : t);
        }(t), Et(t, "created"), t.$options.el && t.$mount(t.$options.el);
      };
    }(hn), function (e) {
      var t = {
        get: function get() {
          return this._data;
        }
      },
          n = {
        get: function get() {
          return this._props;
        }
      };
      Object.defineProperty(e.prototype, "$data", t), Object.defineProperty(e.prototype, "$props", n), e.prototype.$set = Ae, e.prototype.$delete = Se, e.prototype.$watch = function (e, t, n) {
        if (l(t)) return Ft(this, e, t, n);
        (n = n || {}).user = !0;
        var r = new Nt(this, e, t, n);
        if (n.immediate) try {
          t.call(this, r.value);
        } catch (e) {
          Fe(e, this, 'callback for immediate watcher "' + r.expression + '"');
        }
        return function () {
          r.teardown();
        };
      };
    }(hn), function (e) {
      var t = /^hook:/;
      e.prototype.$on = function (e, n) {
        var r = this;
        if (Array.isArray(e)) for (var i = 0, o = e.length; i < o; i++) {
          r.$on(e[i], n);
        } else (r._events[e] || (r._events[e] = [])).push(n), t.test(e) && (r._hasHookEvent = !0);
        return r;
      }, e.prototype.$once = function (e, t) {
        var n = this;

        function r() {
          n.$off(e, r), t.apply(n, arguments);
        }

        return r.fn = t, n.$on(e, r), n;
      }, e.prototype.$off = function (e, t) {
        var n = this;
        if (!arguments.length) return n._events = Object.create(null), n;

        if (Array.isArray(e)) {
          for (var r = 0, i = e.length; r < i; r++) {
            n.$off(e[r], t);
          }

          return n;
        }

        var o = n._events[e];
        if (!o) return n;
        if (!t) return n._events[e] = null, n;
        if (t) for (var a, s = o.length; s--;) {
          if ((a = o[s]) === t || a.fn === t) {
            o.splice(s, 1);
            break;
          }
        }
        return n;
      }, e.prototype.$emit = function (e) {
        var t = this._events[e];

        if (t) {
          t = t.length > 1 ? O(t) : t;

          for (var n = O(arguments, 1), r = 0, i = t.length; r < i; r++) {
            try {
              t[r].apply(this, n);
            } catch (t) {
              Fe(t, this, 'event handler for "' + e + '"');
            }
          }
        }

        return this;
      };
    }(hn), function (e) {
      e.prototype._update = function (e, t) {
        var n = this,
            r = n.$el,
            i = n._vnode,
            o = bt(n);
        n._vnode = e, n.$el = i ? n.__patch__(i, e) : n.__patch__(n.$el, e, t, !1), o(), r && (r.__vue__ = null), n.$el && (n.$el.__vue__ = n), n.$vnode && n.$parent && n.$vnode === n.$parent._vnode && (n.$parent.$el = n.$el);
      }, e.prototype.$forceUpdate = function () {
        this._watcher && this._watcher.update();
      }, e.prototype.$destroy = function () {
        var e = this;

        if (!e._isBeingDestroyed) {
          Et(e, "beforeDestroy"), e._isBeingDestroyed = !0;
          var t = e.$parent;
          !t || t._isBeingDestroyed || e.$options["abstract"] || y(t.$children, e), e._watcher && e._watcher.teardown();

          for (var n = e._watchers.length; n--;) {
            e._watchers[n].teardown();
          }

          e._data.__ob__ && e._data.__ob__.vmCount--, e._isDestroyed = !0, e.__patch__(e._vnode, null), Et(e, "destroyed"), e.$off(), e.$el && (e.$el.__vue__ = null), e.$vnode && (e.$vnode.parent = null);
        }
      };
    }(hn), function (e) {
      Zt(e.prototype), e.prototype.$nextTick = function (e) {
        return Je(e, this);
      }, e.prototype._render = function () {
        var e,
            t = this,
            n = t.$options,
            i = n.render,
            o = n._parentVnode;
        o && (t.$scopedSlots = o.data.scopedSlots || r), t.$vnode = o;

        try {
          e = i.call(t._renderProxy, t.$createElement);
        } catch (n) {
          Fe(n, t, "render"), e = t._vnode;
        }

        return e instanceof de || (e = ve()), e.parent = o, e;
      };
    }(hn);
    var bn = [String, RegExp, Array],
        wn = {
      KeepAlive: {
        name: "keep-alive",
        "abstract": !0,
        props: {
          include: bn,
          exclude: bn,
          max: [String, Number]
        },
        created: function created() {
          this.cache = Object.create(null), this.keys = [];
        },
        destroyed: function destroyed() {
          for (var e in this.cache) {
            _n(this.cache, e, this.keys);
          }
        },
        mounted: function mounted() {
          var e = this;
          this.$watch("include", function (t) {
            yn(e, function (e) {
              return mn(t, e);
            });
          }), this.$watch("exclude", function (t) {
            yn(e, function (e) {
              return !mn(t, e);
            });
          });
        },
        render: function render() {
          var e = this.$slots["default"],
              t = ft(e),
              n = t && t.componentOptions;

          if (n) {
            var r = gn(n),
                i = this.include,
                o = this.exclude;
            if (i && (!r || !mn(i, r)) || o && r && mn(o, r)) return t;
            var a = this.cache,
                s = this.keys,
                u = null == t.key ? n.Ctor.cid + (n.tag ? "::" + n.tag : "") : t.key;
            a[u] ? (t.componentInstance = a[u].componentInstance, y(s, u), s.push(u)) : (a[u] = t, s.push(u), this.max && s.length > parseInt(this.max) && _n(a, s[0], s, this._vnode)), t.data.keepAlive = !0;
          }

          return t || e && e[0];
        }
      }
    };
    !function (e) {
      var t = {
        get: function get() {
          return F;
        }
      };
      Object.defineProperty(e, "config", t), e.util = {
        warn: se,
        extend: D,
        mergeOptions: je,
        defineReactive: Ce
      }, e.set = Ae, e["delete"] = Se, e.nextTick = Je, e.options = Object.create(null), H.forEach(function (t) {
        e.options[t + "s"] = Object.create(null);
      }), e.options._base = e, D(e.options.components, wn), function (e) {
        e.use = function (e) {
          var t = this._installedPlugins || (this._installedPlugins = []);
          if (t.indexOf(e) > -1) return this;
          var n = O(arguments, 1);
          return n.unshift(this), "function" == typeof e.install ? e.install.apply(e, n) : "function" == typeof e && e.apply(null, n), t.push(e), this;
        };
      }(e), function (e) {
        e.mixin = function (e) {
          return this.options = je(this.options, e), this;
        };
      }(e), vn(e), function (e) {
        H.forEach(function (t) {
          e[t] = function (e, n) {
            return n ? ("component" === t && l(n) && (n.name = n.name || e, n = this.options._base.extend(n)), "directive" === t && "function" == typeof n && (n = {
              bind: n,
              update: n
            }), this.options[t + "s"][e] = n, n) : this.options[t + "s"][e];
          };
        });
      }(e);
    }(hn), Object.defineProperty(hn.prototype, "$isServer", {
      get: ne
    }), Object.defineProperty(hn.prototype, "$ssrContext", {
      get: function get() {
        return this.$vnode && this.$vnode.ssrContext;
      }
    }), Object.defineProperty(hn, "FunctionalRenderContext", {
      value: en
    }), hn.version = "2.5.21";

    var Tn = v("style,class"),
        En = v("input,textarea,option,select,progress"),
        xn = function xn(e, t, n) {
      return "value" === n && En(e) && "button" !== t || "selected" === n && "option" === e || "checked" === n && "input" === e || "muted" === n && "video" === e;
    },
        Cn = v("contenteditable,draggable,spellcheck"),
        An = v("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,translate,truespeed,typemustmatch,visible"),
        Sn = "http://www.w3.org/1999/xlink",
        On = function On(e) {
      return ":" === e.charAt(5) && "xlink" === e.slice(0, 5);
    },
        Dn = function Dn(e) {
      return On(e) ? e.slice(6, e.length) : "";
    },
        In = function In(e) {
      return null == e || !1 === e;
    };

    function kn(e) {
      for (var t = e.data, n = e, r = e; o(r.componentInstance);) {
        (r = r.componentInstance._vnode) && r.data && (t = Nn(r.data, t));
      }

      for (; o(n = n.parent);) {
        n && n.data && (t = Nn(t, n.data));
      }

      return function (e, t) {
        if (o(e) || o(t)) return Ln(e, jn(t));
        return "";
      }(t.staticClass, t["class"]);
    }

    function Nn(e, t) {
      return {
        staticClass: Ln(e.staticClass, t.staticClass),
        "class": o(e["class"]) ? [e["class"], t["class"]] : t["class"]
      };
    }

    function Ln(e, t) {
      return e ? t ? e + " " + t : e : t || "";
    }

    function jn(e) {
      return Array.isArray(e) ? function (e) {
        for (var t, n = "", r = 0, i = e.length; r < i; r++) {
          o(t = jn(e[r])) && "" !== t && (n && (n += " "), n += t);
        }

        return n;
      }(e) : u(e) ? function (e) {
        var t = "";

        for (var n in e) {
          e[n] && (t && (t += " "), t += n);
        }

        return t;
      }(e) : "string" == typeof e ? e : "";
    }

    var Pn = {
      svg: "http://www.w3.org/2000/svg",
      math: "http://www.w3.org/1998/Math/MathML"
    },
        Rn = v("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot"),
        $n = v("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view", !0),
        Hn = function Hn(e) {
      return Rn(e) || $n(e);
    };

    function Mn(e) {
      return $n(e) ? "svg" : "math" === e ? "math" : void 0;
    }

    var Fn = Object.create(null);
    var Wn = v("text,number,password,search,email,tel,url");

    function qn(e) {
      if ("string" == typeof e) {
        var t = document.querySelector(e);
        return t || document.createElement("div");
      }

      return e;
    }

    var Bn = Object.freeze({
      createElement: function createElement(e, t) {
        var n = document.createElement(e);
        return "select" !== e ? n : (t.data && t.data.attrs && void 0 !== t.data.attrs.multiple && n.setAttribute("multiple", "multiple"), n);
      },
      createElementNS: function createElementNS(e, t) {
        return document.createElementNS(Pn[e], t);
      },
      createTextNode: function createTextNode(e) {
        return document.createTextNode(e);
      },
      createComment: function createComment(e) {
        return document.createComment(e);
      },
      insertBefore: function insertBefore(e, t, n) {
        e.insertBefore(t, n);
      },
      removeChild: function removeChild(e, t) {
        e.removeChild(t);
      },
      appendChild: function appendChild(e, t) {
        e.appendChild(t);
      },
      parentNode: function parentNode(e) {
        return e.parentNode;
      },
      nextSibling: function nextSibling(e) {
        return e.nextSibling;
      },
      tagName: function tagName(e) {
        return e.tagName;
      },
      setTextContent: function setTextContent(e, t) {
        e.textContent = t;
      },
      setStyleScope: function setStyleScope(e, t) {
        e.setAttribute(t, "");
      }
    }),
        Un = {
      create: function create(e, t) {
        Vn(t);
      },
      update: function update(e, t) {
        e.data.ref !== t.data.ref && (Vn(e, !0), Vn(t));
      },
      destroy: function destroy(e) {
        Vn(e, !0);
      }
    };

    function Vn(e, t) {
      var n = e.data.ref;

      if (o(n)) {
        var r = e.context,
            i = e.componentInstance || e.elm,
            a = r.$refs;
        t ? Array.isArray(a[n]) ? y(a[n], i) : a[n] === i && (a[n] = void 0) : e.data.refInFor ? Array.isArray(a[n]) ? a[n].indexOf(i) < 0 && a[n].push(i) : a[n] = [i] : a[n] = i;
      }
    }

    var zn = new de("", {}, []),
        Kn = ["create", "activate", "update", "remove", "destroy"];

    function Gn(e, t) {
      return e.key === t.key && (e.tag === t.tag && e.isComment === t.isComment && o(e.data) === o(t.data) && function (e, t) {
        if ("input" !== e.tag) return !0;
        var n,
            r = o(n = e.data) && o(n = n.attrs) && n.type,
            i = o(n = t.data) && o(n = n.attrs) && n.type;
        return r === i || Wn(r) && Wn(i);
      }(e, t) || a(e.isAsyncPlaceholder) && e.asyncFactory === t.asyncFactory && i(t.asyncFactory.error));
    }

    function Xn(e, t, n) {
      var r,
          i,
          a = {};

      for (r = t; r <= n; ++r) {
        o(i = e[r].key) && (a[i] = r);
      }

      return a;
    }

    var Qn = {
      create: Yn,
      update: Yn,
      destroy: function destroy(e) {
        Yn(e, zn);
      }
    };

    function Yn(e, t) {
      (e.data.directives || t.data.directives) && function (e, t) {
        var n,
            r,
            i,
            o = e === zn,
            a = t === zn,
            s = Zn(e.data.directives, e.context),
            u = Zn(t.data.directives, t.context),
            c = [],
            l = [];

        for (n in u) {
          r = s[n], i = u[n], r ? (i.oldValue = r.value, tr(i, "update", t, e), i.def && i.def.componentUpdated && l.push(i)) : (tr(i, "bind", t, e), i.def && i.def.inserted && c.push(i));
        }

        if (c.length) {
          var f = function f() {
            for (var n = 0; n < c.length; n++) {
              tr(c[n], "inserted", t, e);
            }
          };

          o ? ot(t, "insert", f) : f();
        }

        l.length && ot(t, "postpatch", function () {
          for (var n = 0; n < l.length; n++) {
            tr(l[n], "componentUpdated", t, e);
          }
        });
        if (!o) for (n in s) {
          u[n] || tr(s[n], "unbind", e, e, a);
        }
      }(e, t);
    }

    var Jn = Object.create(null);

    function Zn(e, t) {
      var n,
          r,
          i = Object.create(null);
      if (!e) return i;

      for (n = 0; n < e.length; n++) {
        (r = e[n]).modifiers || (r.modifiers = Jn), i[er(r)] = r, r.def = Pe(t.$options, "directives", r.name);
      }

      return i;
    }

    function er(e) {
      return e.rawName || e.name + "." + Object.keys(e.modifiers || {}).join(".");
    }

    function tr(e, t, n, r, i) {
      var o = e.def && e.def[t];
      if (o) try {
        o(n.elm, e, n, r, i);
      } catch (r) {
        Fe(r, n.context, "directive " + e.name + " " + t + " hook");
      }
    }

    var nr = [Un, Qn];

    function rr(e, t) {
      var n = t.componentOptions;

      if (!(o(n) && !1 === n.Ctor.options.inheritAttrs || i(e.data.attrs) && i(t.data.attrs))) {
        var r,
            a,
            s = t.elm,
            u = e.data.attrs || {},
            c = t.data.attrs || {};

        for (r in o(c.__ob__) && (c = t.data.attrs = D({}, c)), c) {
          a = c[r], u[r] !== a && ir(s, r, a);
        }

        for (r in (X || Y) && c.value !== u.value && ir(s, "value", c.value), u) {
          i(c[r]) && (On(r) ? s.removeAttributeNS(Sn, Dn(r)) : Cn(r) || s.removeAttribute(r));
        }
      }
    }

    function ir(e, t, n) {
      e.tagName.indexOf("-") > -1 ? or(e, t, n) : An(t) ? In(n) ? e.removeAttribute(t) : (n = "allowfullscreen" === t && "EMBED" === e.tagName ? "true" : t, e.setAttribute(t, n)) : Cn(t) ? e.setAttribute(t, In(n) || "false" === n ? "false" : "true") : On(t) ? In(n) ? e.removeAttributeNS(Sn, Dn(t)) : e.setAttributeNS(Sn, t, n) : or(e, t, n);
    }

    function or(e, t, n) {
      if (In(n)) e.removeAttribute(t);else {
        if (X && !Q && ("TEXTAREA" === e.tagName || "INPUT" === e.tagName) && "placeholder" === t && !e.__ieph) {
          var r = function r(t) {
            t.stopImmediatePropagation(), e.removeEventListener("input", r);
          };

          e.addEventListener("input", r), e.__ieph = !0;
        }

        e.setAttribute(t, n);
      }
    }

    var ar = {
      create: rr,
      update: rr
    };

    function sr(e, t) {
      var n = t.elm,
          r = t.data,
          a = e.data;

      if (!(i(r.staticClass) && i(r["class"]) && (i(a) || i(a.staticClass) && i(a["class"])))) {
        var s = kn(t),
            u = n._transitionClasses;
        o(u) && (s = Ln(s, jn(u))), s !== n._prevClass && (n.setAttribute("class", s), n._prevClass = s);
      }
    }

    var ur,
        cr,
        lr,
        fr,
        pr,
        dr,
        hr = {
      create: sr,
      update: sr
    },
        vr = /[\w).+\-_$\]]/;

    function gr(e) {
      var t,
          n,
          r,
          i,
          o,
          a = !1,
          s = !1,
          u = !1,
          c = !1,
          l = 0,
          f = 0,
          p = 0,
          d = 0;

      for (r = 0; r < e.length; r++) {
        if (n = t, t = e.charCodeAt(r), a) 39 === t && 92 !== n && (a = !1);else if (s) 34 === t && 92 !== n && (s = !1);else if (u) 96 === t && 92 !== n && (u = !1);else if (c) 47 === t && 92 !== n && (c = !1);else if (124 !== t || 124 === e.charCodeAt(r + 1) || 124 === e.charCodeAt(r - 1) || l || f || p) {
          switch (t) {
            case 34:
              s = !0;
              break;

            case 39:
              a = !0;
              break;

            case 96:
              u = !0;
              break;

            case 40:
              p++;
              break;

            case 41:
              p--;
              break;

            case 91:
              f++;
              break;

            case 93:
              f--;
              break;

            case 123:
              l++;
              break;

            case 125:
              l--;
          }

          if (47 === t) {
            for (var h = r - 1, v = void 0; h >= 0 && " " === (v = e.charAt(h)); h--) {
              ;
            }

            v && vr.test(v) || (c = !0);
          }
        } else void 0 === i ? (d = r + 1, i = e.slice(0, r).trim()) : g();
      }

      function g() {
        (o || (o = [])).push(e.slice(d, r).trim()), d = r + 1;
      }

      if (void 0 === i ? i = e.slice(0, r).trim() : 0 !== d && g(), o) for (r = 0; r < o.length; r++) {
        i = mr(i, o[r]);
      }
      return i;
    }

    function mr(e, t) {
      var n = t.indexOf("(");
      if (n < 0) return '_f("' + t + '")(' + e + ")";
      var r = t.slice(0, n),
          i = t.slice(n + 1);
      return '_f("' + r + '")(' + e + (")" !== i ? "," + i : i);
    }

    function yr(e) {
      console.error("[Vue compiler]: " + e);
    }

    function _r(e, t) {
      return e ? e.map(function (e) {
        return e[t];
      }).filter(function (e) {
        return e;
      }) : [];
    }

    function br(e, t, n) {
      (e.props || (e.props = [])).push({
        name: t,
        value: n
      }), e.plain = !1;
    }

    function wr(e, t, n) {
      (e.attrs || (e.attrs = [])).push({
        name: t,
        value: n
      }), e.plain = !1;
    }

    function Tr(e, t, n) {
      e.attrsMap[t] = n, e.attrsList.push({
        name: t,
        value: n
      });
    }

    function Er(e, t, n, r, i, o) {
      (e.directives || (e.directives = [])).push({
        name: t,
        rawName: n,
        value: r,
        arg: i,
        modifiers: o
      }), e.plain = !1;
    }

    function xr(e, t, n, i, o, a) {
      var s;
      i = i || r, "click" === t && (i.right ? (t = "contextmenu", delete i.right) : i.middle && (t = "mouseup")), i.capture && (delete i.capture, t = "!" + t), i.once && (delete i.once, t = "~" + t), i.passive && (delete i.passive, t = "&" + t), i["native"] ? (delete i["native"], s = e.nativeEvents || (e.nativeEvents = {})) : s = e.events || (e.events = {});
      var u = {
        value: n.trim()
      };
      i !== r && (u.modifiers = i);
      var c = s[t];
      Array.isArray(c) ? o ? c.unshift(u) : c.push(u) : s[t] = c ? o ? [u, c] : [c, u] : u, e.plain = !1;
    }

    function Cr(e, t, n) {
      var r = Ar(e, ":" + t) || Ar(e, "v-bind:" + t);
      if (null != r) return gr(r);

      if (!1 !== n) {
        var i = Ar(e, t);
        if (null != i) return JSON.stringify(i);
      }
    }

    function Ar(e, t, n) {
      var r;
      if (null != (r = e.attrsMap[t])) for (var i = e.attrsList, o = 0, a = i.length; o < a; o++) {
        if (i[o].name === t) {
          i.splice(o, 1);
          break;
        }
      }
      return n && delete e.attrsMap[t], r;
    }

    function Sr(e, t, n) {
      var r = n || {},
          i = r.number,
          o = "$$v";
      r.trim && (o = "(typeof $$v === 'string'? $$v.trim(): $$v)"), i && (o = "_n(" + o + ")");
      var a = Or(t, o);
      e.model = {
        value: "(" + t + ")",
        expression: JSON.stringify(t),
        callback: "function ($$v) {" + a + "}"
      };
    }

    function Or(e, t) {
      var n = function (e) {
        if (e = e.trim(), ur = e.length, e.indexOf("[") < 0 || e.lastIndexOf("]") < ur - 1) return (fr = e.lastIndexOf(".")) > -1 ? {
          exp: e.slice(0, fr),
          key: '"' + e.slice(fr + 1) + '"'
        } : {
          exp: e,
          key: null
        };
        cr = e, fr = pr = dr = 0;

        for (; !Ir();) {
          kr(lr = Dr()) ? Lr(lr) : 91 === lr && Nr(lr);
        }

        return {
          exp: e.slice(0, pr),
          key: e.slice(pr + 1, dr)
        };
      }(e);

      return null === n.key ? e + "=" + t : "$set(" + n.exp + ", " + n.key + ", " + t + ")";
    }

    function Dr() {
      return cr.charCodeAt(++fr);
    }

    function Ir() {
      return fr >= ur;
    }

    function kr(e) {
      return 34 === e || 39 === e;
    }

    function Nr(e) {
      var t = 1;

      for (pr = fr; !Ir();) {
        if (kr(e = Dr())) Lr(e);else if (91 === e && t++, 93 === e && t--, 0 === t) {
          dr = fr;
          break;
        }
      }
    }

    function Lr(e) {
      for (var t = e; !Ir() && (e = Dr()) !== t;) {
        ;
      }
    }

    var jr,
        Pr = "__r",
        Rr = "__c";

    function $r(e, t, n) {
      var r = jr;
      return function i() {
        null !== t.apply(null, arguments) && Mr(e, i, n, r);
      };
    }

    function Hr(e, t, n, r) {
      var i;
      t = (i = t)._withTask || (i._withTask = function () {
        Ge = !0;

        try {
          return i.apply(null, arguments);
        } finally {
          Ge = !1;
        }
      }), jr.addEventListener(e, t, ee ? {
        capture: n,
        passive: r
      } : n);
    }

    function Mr(e, t, n, r) {
      (r || jr).removeEventListener(e, t._withTask || t, n);
    }

    function Fr(e, t) {
      if (!i(e.data.on) || !i(t.data.on)) {
        var n = t.data.on || {},
            r = e.data.on || {};
        jr = t.elm, function (e) {
          if (o(e[Pr])) {
            var t = X ? "change" : "input";
            e[t] = [].concat(e[Pr], e[t] || []), delete e[Pr];
          }

          o(e[Rr]) && (e.change = [].concat(e[Rr], e.change || []), delete e[Rr]);
        }(n), it(n, r, Hr, Mr, $r, t.context), jr = void 0;
      }
    }

    var Wr = {
      create: Fr,
      update: Fr
    };

    function qr(e, t) {
      if (!i(e.data.domProps) || !i(t.data.domProps)) {
        var n,
            r,
            a = t.elm,
            s = e.data.domProps || {},
            u = t.data.domProps || {};

        for (n in o(u.__ob__) && (u = t.data.domProps = D({}, u)), s) {
          i(u[n]) && (a[n] = "");
        }

        for (n in u) {
          if (r = u[n], "textContent" === n || "innerHTML" === n) {
            if (t.children && (t.children.length = 0), r === s[n]) continue;
            1 === a.childNodes.length && a.removeChild(a.childNodes[0]);
          }

          if ("value" === n) {
            a._value = r;
            var c = i(r) ? "" : String(r);
            Br(a, c) && (a.value = c);
          } else a[n] = r;
        }
      }
    }

    function Br(e, t) {
      return !e.composing && ("OPTION" === e.tagName || function (e, t) {
        var n = !0;

        try {
          n = document.activeElement !== e;
        } catch (e) {}

        return n && e.value !== t;
      }(e, t) || function (e, t) {
        var n = e.value,
            r = e._vModifiers;

        if (o(r)) {
          if (r.lazy) return !1;
          if (r.number) return h(n) !== h(t);
          if (r.trim) return n.trim() !== t.trim();
        }

        return n !== t;
      }(e, t));
    }

    var Ur = {
      create: qr,
      update: qr
    },
        Vr = w(function (e) {
      var t = {},
          n = /:(.+)/;
      return e.split(/;(?![^(]*\))/g).forEach(function (e) {
        if (e) {
          var r = e.split(n);
          r.length > 1 && (t[r[0].trim()] = r[1].trim());
        }
      }), t;
    });

    function zr(e) {
      var t = Kr(e.style);
      return e.staticStyle ? D(e.staticStyle, t) : t;
    }

    function Kr(e) {
      return Array.isArray(e) ? I(e) : "string" == typeof e ? Vr(e) : e;
    }

    var Gr,
        Xr = /^--/,
        Qr = /\s*!important$/,
        Yr = function Yr(e, t, n) {
      if (Xr.test(t)) e.style.setProperty(t, n);else if (Qr.test(n)) e.style.setProperty(t, n.replace(Qr, ""), "important");else {
        var r = Zr(t);
        if (Array.isArray(n)) for (var i = 0, o = n.length; i < o; i++) {
          e.style[r] = n[i];
        } else e.style[r] = n;
      }
    },
        Jr = ["Webkit", "Moz", "ms"],
        Zr = w(function (e) {
      if (Gr = Gr || document.createElement("div").style, "filter" !== (e = E(e)) && e in Gr) return e;

      for (var t = e.charAt(0).toUpperCase() + e.slice(1), n = 0; n < Jr.length; n++) {
        var r = Jr[n] + t;
        if (r in Gr) return r;
      }
    });

    function ei(e, t) {
      var n = t.data,
          r = e.data;

      if (!(i(n.staticStyle) && i(n.style) && i(r.staticStyle) && i(r.style))) {
        var a,
            s,
            u = t.elm,
            c = r.staticStyle,
            l = r.normalizedStyle || r.style || {},
            f = c || l,
            p = Kr(t.data.style) || {};
        t.data.normalizedStyle = o(p.__ob__) ? D({}, p) : p;

        var d = function (e, t) {
          var n,
              r = {};
          if (t) for (var i = e; i.componentInstance;) {
            (i = i.componentInstance._vnode) && i.data && (n = zr(i.data)) && D(r, n);
          }
          (n = zr(e.data)) && D(r, n);

          for (var o = e; o = o.parent;) {
            o.data && (n = zr(o.data)) && D(r, n);
          }

          return r;
        }(t, !0);

        for (s in f) {
          i(d[s]) && Yr(u, s, "");
        }

        for (s in d) {
          (a = d[s]) !== f[s] && Yr(u, s, null == a ? "" : a);
        }
      }
    }

    var ti = {
      create: ei,
      update: ei
    },
        ni = /\s+/;

    function ri(e, t) {
      if (t && (t = t.trim())) if (e.classList) t.indexOf(" ") > -1 ? t.split(ni).forEach(function (t) {
        return e.classList.add(t);
      }) : e.classList.add(t);else {
        var n = " " + (e.getAttribute("class") || "") + " ";
        n.indexOf(" " + t + " ") < 0 && e.setAttribute("class", (n + t).trim());
      }
    }

    function ii(e, t) {
      if (t && (t = t.trim())) if (e.classList) t.indexOf(" ") > -1 ? t.split(ni).forEach(function (t) {
        return e.classList.remove(t);
      }) : e.classList.remove(t), e.classList.length || e.removeAttribute("class");else {
        for (var n = " " + (e.getAttribute("class") || "") + " ", r = " " + t + " "; n.indexOf(r) >= 0;) {
          n = n.replace(r, " ");
        }

        (n = n.trim()) ? e.setAttribute("class", n) : e.removeAttribute("class");
      }
    }

    function oi(e) {
      if (e) {
        if ("object" == _typeof(e)) {
          var t = {};
          return !1 !== e.css && D(t, ai(e.name || "v")), D(t, e), t;
        }

        return "string" == typeof e ? ai(e) : void 0;
      }
    }

    var ai = w(function (e) {
      return {
        enterClass: e + "-enter",
        enterToClass: e + "-enter-to",
        enterActiveClass: e + "-enter-active",
        leaveClass: e + "-leave",
        leaveToClass: e + "-leave-to",
        leaveActiveClass: e + "-leave-active"
      };
    }),
        si = V && !Q,
        ui = "transition",
        ci = "animation",
        li = "transition",
        fi = "transitionend",
        pi = "animation",
        di = "animationend";
    si && (void 0 === window.ontransitionend && void 0 !== window.onwebkittransitionend && (li = "WebkitTransition", fi = "webkitTransitionEnd"), void 0 === window.onanimationend && void 0 !== window.onwebkitanimationend && (pi = "WebkitAnimation", di = "webkitAnimationEnd"));
    var hi = V ? window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : setTimeout : function (e) {
      return e();
    };

    function vi(e) {
      hi(function () {
        hi(e);
      });
    }

    function gi(e, t) {
      var n = e._transitionClasses || (e._transitionClasses = []);
      n.indexOf(t) < 0 && (n.push(t), ri(e, t));
    }

    function mi(e, t) {
      e._transitionClasses && y(e._transitionClasses, t), ii(e, t);
    }

    function yi(e, t, n) {
      var r = bi(e, t),
          i = r.type,
          o = r.timeout,
          a = r.propCount;
      if (!i) return n();

      var s = i === ui ? fi : di,
          u = 0,
          c = function c() {
        e.removeEventListener(s, l), n();
      },
          l = function l(t) {
        t.target === e && ++u >= a && c();
      };

      setTimeout(function () {
        u < a && c();
      }, o + 1), e.addEventListener(s, l);
    }

    var _i = /\b(transform|all)(,|$)/;

    function bi(e, t) {
      var n,
          r = window.getComputedStyle(e),
          i = (r[li + "Delay"] || "").split(", "),
          o = (r[li + "Duration"] || "").split(", "),
          a = wi(i, o),
          s = (r[pi + "Delay"] || "").split(", "),
          u = (r[pi + "Duration"] || "").split(", "),
          c = wi(s, u),
          l = 0,
          f = 0;
      return t === ui ? a > 0 && (n = ui, l = a, f = o.length) : t === ci ? c > 0 && (n = ci, l = c, f = u.length) : f = (n = (l = Math.max(a, c)) > 0 ? a > c ? ui : ci : null) ? n === ui ? o.length : u.length : 0, {
        type: n,
        timeout: l,
        propCount: f,
        hasTransform: n === ui && _i.test(r[li + "Property"])
      };
    }

    function wi(e, t) {
      for (; e.length < t.length;) {
        e = e.concat(e);
      }

      return Math.max.apply(null, t.map(function (t, n) {
        return Ti(t) + Ti(e[n]);
      }));
    }

    function Ti(e) {
      return 1e3 * Number(e.slice(0, -1).replace(",", "."));
    }

    function Ei(e, t) {
      var n = e.elm;
      o(n._leaveCb) && (n._leaveCb.cancelled = !0, n._leaveCb());
      var r = oi(e.data.transition);

      if (!i(r) && !o(n._enterCb) && 1 === n.nodeType) {
        for (var a = r.css, s = r.type, c = r.enterClass, l = r.enterToClass, f = r.enterActiveClass, p = r.appearClass, d = r.appearToClass, v = r.appearActiveClass, g = r.beforeEnter, m = r.enter, y = r.afterEnter, _ = r.enterCancelled, b = r.beforeAppear, w = r.appear, T = r.afterAppear, E = r.appearCancelled, x = r.duration, C = _t, A = _t.$vnode; A && A.parent;) {
          C = (A = A.parent).context;
        }

        var S = !C._isMounted || !e.isRootInsert;

        if (!S || w || "" === w) {
          var O = S && p ? p : c,
              D = S && v ? v : f,
              I = S && d ? d : l,
              k = S && b || g,
              N = S && "function" == typeof w ? w : m,
              L = S && T || y,
              j = S && E || _,
              P = h(u(x) ? x.enter : x);
          0;
          var $ = !1 !== a && !Q,
              H = Ai(N),
              M = n._enterCb = R(function () {
            $ && (mi(n, I), mi(n, D)), M.cancelled ? ($ && mi(n, O), j && j(n)) : L && L(n), n._enterCb = null;
          });
          e.data.show || ot(e, "insert", function () {
            var t = n.parentNode,
                r = t && t._pending && t._pending[e.key];
            r && r.tag === e.tag && r.elm._leaveCb && r.elm._leaveCb(), N && N(n, M);
          }), k && k(n), $ && (gi(n, O), gi(n, D), vi(function () {
            mi(n, O), M.cancelled || (gi(n, I), H || (Ci(P) ? setTimeout(M, P) : yi(n, s, M)));
          })), e.data.show && (t && t(), N && N(n, M)), $ || H || M();
        }
      }
    }

    function xi(e, t) {
      var n = e.elm;
      o(n._enterCb) && (n._enterCb.cancelled = !0, n._enterCb());
      var r = oi(e.data.transition);
      if (i(r) || 1 !== n.nodeType) return t();

      if (!o(n._leaveCb)) {
        var a = r.css,
            s = r.type,
            c = r.leaveClass,
            l = r.leaveToClass,
            f = r.leaveActiveClass,
            p = r.beforeLeave,
            d = r.leave,
            v = r.afterLeave,
            g = r.leaveCancelled,
            m = r.delayLeave,
            y = r.duration,
            _ = !1 !== a && !Q,
            b = Ai(d),
            w = h(u(y) ? y.leave : y);

        0;
        var T = n._leaveCb = R(function () {
          n.parentNode && n.parentNode._pending && (n.parentNode._pending[e.key] = null), _ && (mi(n, l), mi(n, f)), T.cancelled ? (_ && mi(n, c), g && g(n)) : (t(), v && v(n)), n._leaveCb = null;
        });
        m ? m(E) : E();
      }

      function E() {
        T.cancelled || (!e.data.show && n.parentNode && ((n.parentNode._pending || (n.parentNode._pending = {}))[e.key] = e), p && p(n), _ && (gi(n, c), gi(n, f), vi(function () {
          mi(n, c), T.cancelled || (gi(n, l), b || (Ci(w) ? setTimeout(T, w) : yi(n, s, T)));
        })), d && d(n, T), _ || b || T());
      }
    }

    function Ci(e) {
      return "number" == typeof e && !isNaN(e);
    }

    function Ai(e) {
      if (i(e)) return !1;
      var t = e.fns;
      return o(t) ? Ai(Array.isArray(t) ? t[0] : t) : (e._length || e.length) > 1;
    }

    function Si(e, t) {
      !0 !== t.data.show && Ei(t);
    }

    var Oi = function (e) {
      var t,
          n,
          r = {},
          u = e.modules,
          c = e.nodeOps;

      for (t = 0; t < Kn.length; ++t) {
        for (r[Kn[t]] = [], n = 0; n < u.length; ++n) {
          o(u[n][Kn[t]]) && r[Kn[t]].push(u[n][Kn[t]]);
        }
      }

      function l(e) {
        var t = c.parentNode(e);
        o(t) && c.removeChild(t, e);
      }

      function f(e, t, n, i, s, u, l) {
        if (o(e.elm) && o(u) && (e = u[l] = me(e)), e.isRootInsert = !s, !function (e, t, n, i) {
          var s = e.data;

          if (o(s)) {
            var u = o(e.componentInstance) && s.keepAlive;
            if (o(s = s.hook) && o(s = s.init) && s(e, !1), o(e.componentInstance)) return p(e, t), d(n, e.elm, i), a(u) && function (e, t, n, i) {
              for (var a, s = e; s.componentInstance;) {
                if (s = s.componentInstance._vnode, o(a = s.data) && o(a = a.transition)) {
                  for (a = 0; a < r.activate.length; ++a) {
                    r.activate[a](zn, s);
                  }

                  t.push(s);
                  break;
                }
              }

              d(n, e.elm, i);
            }(e, t, n, i), !0;
          }
        }(e, t, n, i)) {
          var f = e.data,
              v = e.children,
              g = e.tag;
          o(g) ? (e.elm = e.ns ? c.createElementNS(e.ns, g) : c.createElement(g, e), y(e), h(e, v, t), o(f) && m(e, t), d(n, e.elm, i)) : a(e.isComment) ? (e.elm = c.createComment(e.text), d(n, e.elm, i)) : (e.elm = c.createTextNode(e.text), d(n, e.elm, i));
        }
      }

      function p(e, t) {
        o(e.data.pendingInsert) && (t.push.apply(t, e.data.pendingInsert), e.data.pendingInsert = null), e.elm = e.componentInstance.$el, g(e) ? (m(e, t), y(e)) : (Vn(e), t.push(e));
      }

      function d(e, t, n) {
        o(e) && (o(n) ? c.parentNode(n) === e && c.insertBefore(e, t, n) : c.appendChild(e, t));
      }

      function h(e, t, n) {
        if (Array.isArray(t)) for (var r = 0; r < t.length; ++r) {
          f(t[r], n, e.elm, null, !0, t, r);
        } else s(e.text) && c.appendChild(e.elm, c.createTextNode(String(e.text)));
      }

      function g(e) {
        for (; e.componentInstance;) {
          e = e.componentInstance._vnode;
        }

        return o(e.tag);
      }

      function m(e, n) {
        for (var i = 0; i < r.create.length; ++i) {
          r.create[i](zn, e);
        }

        o(t = e.data.hook) && (o(t.create) && t.create(zn, e), o(t.insert) && n.push(e));
      }

      function y(e) {
        var t;
        if (o(t = e.fnScopeId)) c.setStyleScope(e.elm, t);else for (var n = e; n;) {
          o(t = n.context) && o(t = t.$options._scopeId) && c.setStyleScope(e.elm, t), n = n.parent;
        }
        o(t = _t) && t !== e.context && t !== e.fnContext && o(t = t.$options._scopeId) && c.setStyleScope(e.elm, t);
      }

      function _(e, t, n, r, i, o) {
        for (; r <= i; ++r) {
          f(n[r], o, e, t, !1, n, r);
        }
      }

      function b(e) {
        var t,
            n,
            i = e.data;
        if (o(i)) for (o(t = i.hook) && o(t = t.destroy) && t(e), t = 0; t < r.destroy.length; ++t) {
          r.destroy[t](e);
        }
        if (o(t = e.children)) for (n = 0; n < e.children.length; ++n) {
          b(e.children[n]);
        }
      }

      function w(e, t, n, r) {
        for (; n <= r; ++n) {
          var i = t[n];
          o(i) && (o(i.tag) ? (T(i), b(i)) : l(i.elm));
        }
      }

      function T(e, t) {
        if (o(t) || o(e.data)) {
          var n,
              i = r.remove.length + 1;

          for (o(t) ? t.listeners += i : t = function (e, t) {
            function n() {
              0 == --n.listeners && l(e);
            }

            return n.listeners = t, n;
          }(e.elm, i), o(n = e.componentInstance) && o(n = n._vnode) && o(n.data) && T(n, t), n = 0; n < r.remove.length; ++n) {
            r.remove[n](e, t);
          }

          o(n = e.data.hook) && o(n = n.remove) ? n(e, t) : t();
        } else l(e.elm);
      }

      function E(e, t, n, r) {
        for (var i = n; i < r; i++) {
          var a = t[i];
          if (o(a) && Gn(e, a)) return i;
        }
      }

      function x(e, t, n, s, u, l) {
        if (e !== t) {
          o(t.elm) && o(s) && (t = s[u] = me(t));
          var p = t.elm = e.elm;
          if (a(e.isAsyncPlaceholder)) o(t.asyncFactory.resolved) ? S(e.elm, t, n) : t.isAsyncPlaceholder = !0;else if (a(t.isStatic) && a(e.isStatic) && t.key === e.key && (a(t.isCloned) || a(t.isOnce))) t.componentInstance = e.componentInstance;else {
            var d,
                h = t.data;
            o(h) && o(d = h.hook) && o(d = d.prepatch) && d(e, t);
            var v = e.children,
                m = t.children;

            if (o(h) && g(t)) {
              for (d = 0; d < r.update.length; ++d) {
                r.update[d](e, t);
              }

              o(d = h.hook) && o(d = d.update) && d(e, t);
            }

            i(t.text) ? o(v) && o(m) ? v !== m && function (e, t, n, r, a) {
              for (var s, u, l, p = 0, d = 0, h = t.length - 1, v = t[0], g = t[h], m = n.length - 1, y = n[0], b = n[m], T = !a; p <= h && d <= m;) {
                i(v) ? v = t[++p] : i(g) ? g = t[--h] : Gn(v, y) ? (x(v, y, r, n, d), v = t[++p], y = n[++d]) : Gn(g, b) ? (x(g, b, r, n, m), g = t[--h], b = n[--m]) : Gn(v, b) ? (x(v, b, r, n, m), T && c.insertBefore(e, v.elm, c.nextSibling(g.elm)), v = t[++p], b = n[--m]) : Gn(g, y) ? (x(g, y, r, n, d), T && c.insertBefore(e, g.elm, v.elm), g = t[--h], y = n[++d]) : (i(s) && (s = Xn(t, p, h)), i(u = o(y.key) ? s[y.key] : E(y, t, p, h)) ? f(y, r, e, v.elm, !1, n, d) : Gn(l = t[u], y) ? (x(l, y, r, n, d), t[u] = void 0, T && c.insertBefore(e, l.elm, v.elm)) : f(y, r, e, v.elm, !1, n, d), y = n[++d]);
              }

              p > h ? _(e, i(n[m + 1]) ? null : n[m + 1].elm, n, d, m, r) : d > m && w(0, t, p, h);
            }(p, v, m, n, l) : o(m) ? (o(e.text) && c.setTextContent(p, ""), _(p, null, m, 0, m.length - 1, n)) : o(v) ? w(0, v, 0, v.length - 1) : o(e.text) && c.setTextContent(p, "") : e.text !== t.text && c.setTextContent(p, t.text), o(h) && o(d = h.hook) && o(d = d.postpatch) && d(e, t);
          }
        }
      }

      function C(e, t, n) {
        if (a(n) && o(e.parent)) e.parent.data.pendingInsert = t;else for (var r = 0; r < t.length; ++r) {
          t[r].data.hook.insert(t[r]);
        }
      }

      var A = v("attrs,class,staticClass,staticStyle,key");

      function S(e, t, n, r) {
        var i,
            s = t.tag,
            u = t.data,
            c = t.children;
        if (r = r || u && u.pre, t.elm = e, a(t.isComment) && o(t.asyncFactory)) return t.isAsyncPlaceholder = !0, !0;
        if (o(u) && (o(i = u.hook) && o(i = i.init) && i(t, !0), o(i = t.componentInstance))) return p(t, n), !0;

        if (o(s)) {
          if (o(c)) if (e.hasChildNodes()) {
            if (o(i = u) && o(i = i.domProps) && o(i = i.innerHTML)) {
              if (i !== e.innerHTML) return !1;
            } else {
              for (var l = !0, f = e.firstChild, d = 0; d < c.length; d++) {
                if (!f || !S(f, c[d], n, r)) {
                  l = !1;
                  break;
                }

                f = f.nextSibling;
              }

              if (!l || f) return !1;
            }
          } else h(t, c, n);

          if (o(u)) {
            var v = !1;

            for (var g in u) {
              if (!A(g)) {
                v = !0, m(t, n);
                break;
              }
            }

            !v && u["class"] && et(u["class"]);
          }
        } else e.data !== t.text && (e.data = t.text);

        return !0;
      }

      return function (e, t, n, s) {
        if (!i(t)) {
          var u,
              l = !1,
              p = [];
          if (i(e)) l = !0, f(t, p);else {
            var d = o(e.nodeType);
            if (!d && Gn(e, t)) x(e, t, p, null, null, s);else {
              if (d) {
                if (1 === e.nodeType && e.hasAttribute($) && (e.removeAttribute($), n = !0), a(n) && S(e, t, p)) return C(t, p, !0), e;
                u = e, e = new de(c.tagName(u).toLowerCase(), {}, [], void 0, u);
              }

              var h = e.elm,
                  v = c.parentNode(h);
              if (f(t, p, h._leaveCb ? null : v, c.nextSibling(h)), o(t.parent)) for (var m = t.parent, y = g(t); m;) {
                for (var _ = 0; _ < r.destroy.length; ++_) {
                  r.destroy[_](m);
                }

                if (m.elm = t.elm, y) {
                  for (var T = 0; T < r.create.length; ++T) {
                    r.create[T](zn, m);
                  }

                  var E = m.data.hook.insert;
                  if (E.merged) for (var A = 1; A < E.fns.length; A++) {
                    E.fns[A]();
                  }
                } else Vn(m);

                m = m.parent;
              }
              o(v) ? w(0, [e], 0, 0) : o(e.tag) && b(e);
            }
          }
          return C(t, p, l), t.elm;
        }

        o(e) && b(e);
      };
    }({
      nodeOps: Bn,
      modules: [ar, hr, Wr, Ur, ti, V ? {
        create: Si,
        activate: Si,
        remove: function remove(e, t) {
          !0 !== e.data.show ? xi(e, t) : t();
        }
      } : {}].concat(nr)
    });

    Q && document.addEventListener("selectionchange", function () {
      var e = document.activeElement;
      e && e.vmodel && Ri(e, "input");
    });
    var Di = {
      inserted: function inserted(e, t, n, r) {
        "select" === n.tag ? (r.elm && !r.elm._vOptions ? ot(n, "postpatch", function () {
          Di.componentUpdated(e, t, n);
        }) : Ii(e, t, n.context), e._vOptions = [].map.call(e.options, Li)) : ("textarea" === n.tag || Wn(e.type)) && (e._vModifiers = t.modifiers, t.modifiers.lazy || (e.addEventListener("compositionstart", ji), e.addEventListener("compositionend", Pi), e.addEventListener("change", Pi), Q && (e.vmodel = !0)));
      },
      componentUpdated: function componentUpdated(e, t, n) {
        if ("select" === n.tag) {
          Ii(e, t, n.context);
          var r = e._vOptions,
              i = e._vOptions = [].map.call(e.options, Li);
          if (i.some(function (e, t) {
            return !j(e, r[t]);
          })) (e.multiple ? t.value.some(function (e) {
            return Ni(e, i);
          }) : t.value !== t.oldValue && Ni(t.value, i)) && Ri(e, "change");
        }
      }
    };

    function Ii(e, t, n) {
      ki(e, t, n), (X || Y) && setTimeout(function () {
        ki(e, t, n);
      }, 0);
    }

    function ki(e, t, n) {
      var r = t.value,
          i = e.multiple;

      if (!i || Array.isArray(r)) {
        for (var o, a, s = 0, u = e.options.length; s < u; s++) {
          if (a = e.options[s], i) o = P(r, Li(a)) > -1, a.selected !== o && (a.selected = o);else if (j(Li(a), r)) return void (e.selectedIndex !== s && (e.selectedIndex = s));
        }

        i || (e.selectedIndex = -1);
      }
    }

    function Ni(e, t) {
      return t.every(function (t) {
        return !j(t, e);
      });
    }

    function Li(e) {
      return "_value" in e ? e._value : e.value;
    }

    function ji(e) {
      e.target.composing = !0;
    }

    function Pi(e) {
      e.target.composing && (e.target.composing = !1, Ri(e.target, "input"));
    }

    function Ri(e, t) {
      var n = document.createEvent("HTMLEvents");
      n.initEvent(t, !0, !0), e.dispatchEvent(n);
    }

    function $i(e) {
      return !e.componentInstance || e.data && e.data.transition ? e : $i(e.componentInstance._vnode);
    }

    var Hi = {
      model: Di,
      show: {
        bind: function bind(e, t, n) {
          var r = t.value,
              i = (n = $i(n)).data && n.data.transition,
              o = e.__vOriginalDisplay = "none" === e.style.display ? "" : e.style.display;
          r && i ? (n.data.show = !0, Ei(n, function () {
            e.style.display = o;
          })) : e.style.display = r ? o : "none";
        },
        update: function update(e, t, n) {
          var r = t.value;
          !r != !t.oldValue && ((n = $i(n)).data && n.data.transition ? (n.data.show = !0, r ? Ei(n, function () {
            e.style.display = e.__vOriginalDisplay;
          }) : xi(n, function () {
            e.style.display = "none";
          })) : e.style.display = r ? e.__vOriginalDisplay : "none");
        },
        unbind: function unbind(e, t, n, r, i) {
          i || (e.style.display = e.__vOriginalDisplay);
        }
      }
    },
        Mi = {
      name: String,
      appear: Boolean,
      css: Boolean,
      mode: String,
      type: String,
      enterClass: String,
      leaveClass: String,
      enterToClass: String,
      leaveToClass: String,
      enterActiveClass: String,
      leaveActiveClass: String,
      appearClass: String,
      appearActiveClass: String,
      appearToClass: String,
      duration: [Number, String, Object]
    };

    function Fi(e) {
      var t = e && e.componentOptions;
      return t && t.Ctor.options["abstract"] ? Fi(ft(t.children)) : e;
    }

    function Wi(e) {
      var t = {},
          n = e.$options;

      for (var r in n.propsData) {
        t[r] = e[r];
      }

      var i = n._parentListeners;

      for (var o in i) {
        t[E(o)] = i[o];
      }

      return t;
    }

    function qi(e, t) {
      if (/\d-keep-alive$/.test(t.tag)) return e("keep-alive", {
        props: t.componentOptions.propsData
      });
    }

    var Bi = function Bi(e) {
      return e.tag || lt(e);
    },
        Ui = function Ui(e) {
      return "show" === e.name;
    },
        Vi = {
      name: "transition",
      props: Mi,
      "abstract": !0,
      render: function render(e) {
        var t = this,
            n = this.$slots["default"];

        if (n && (n = n.filter(Bi)).length) {
          0;
          var r = this.mode;
          0;
          var i = n[0];
          if (function (e) {
            for (; e = e.parent;) {
              if (e.data.transition) return !0;
            }
          }(this.$vnode)) return i;
          var o = Fi(i);
          if (!o) return i;
          if (this._leaving) return qi(e, i);
          var a = "__transition-" + this._uid + "-";
          o.key = null == o.key ? o.isComment ? a + "comment" : a + o.tag : s(o.key) ? 0 === String(o.key).indexOf(a) ? o.key : a + o.key : o.key;
          var u = (o.data || (o.data = {})).transition = Wi(this),
              c = this._vnode,
              l = Fi(c);

          if (o.data.directives && o.data.directives.some(Ui) && (o.data.show = !0), l && l.data && !function (e, t) {
            return t.key === e.key && t.tag === e.tag;
          }(o, l) && !lt(l) && (!l.componentInstance || !l.componentInstance._vnode.isComment)) {
            var f = l.data.transition = D({}, u);
            if ("out-in" === r) return this._leaving = !0, ot(f, "afterLeave", function () {
              t._leaving = !1, t.$forceUpdate();
            }), qi(e, i);

            if ("in-out" === r) {
              if (lt(o)) return c;

              var p,
                  d = function d() {
                p();
              };

              ot(u, "afterEnter", d), ot(u, "enterCancelled", d), ot(f, "delayLeave", function (e) {
                p = e;
              });
            }
          }

          return i;
        }
      }
    },
        zi = D({
      tag: String,
      moveClass: String
    }, Mi);

    function Ki(e) {
      e.elm._moveCb && e.elm._moveCb(), e.elm._enterCb && e.elm._enterCb();
    }

    function Gi(e) {
      e.data.newPos = e.elm.getBoundingClientRect();
    }

    function Xi(e) {
      var t = e.data.pos,
          n = e.data.newPos,
          r = t.left - n.left,
          i = t.top - n.top;

      if (r || i) {
        e.data.moved = !0;
        var o = e.elm.style;
        o.transform = o.WebkitTransform = "translate(" + r + "px," + i + "px)", o.transitionDuration = "0s";
      }
    }

    delete zi.mode;
    var Qi = {
      Transition: Vi,
      TransitionGroup: {
        props: zi,
        beforeMount: function beforeMount() {
          var e = this,
              t = this._update;

          this._update = function (n, r) {
            var i = bt(e);
            e.__patch__(e._vnode, e.kept, !1, !0), e._vnode = e.kept, i(), t.call(e, n, r);
          };
        },
        render: function render(e) {
          for (var t = this.tag || this.$vnode.data.tag || "span", n = Object.create(null), r = this.prevChildren = this.children, i = this.$slots["default"] || [], o = this.children = [], a = Wi(this), s = 0; s < i.length; s++) {
            var u = i[s];
            if (u.tag) if (null != u.key && 0 !== String(u.key).indexOf("__vlist")) o.push(u), n[u.key] = u, (u.data || (u.data = {})).transition = a;else ;
          }

          if (r) {
            for (var c = [], l = [], f = 0; f < r.length; f++) {
              var p = r[f];
              p.data.transition = a, p.data.pos = p.elm.getBoundingClientRect(), n[p.key] ? c.push(p) : l.push(p);
            }

            this.kept = e(t, null, c), this.removed = l;
          }

          return e(t, null, o);
        },
        updated: function updated() {
          var e = this.prevChildren,
              t = this.moveClass || (this.name || "v") + "-move";
          e.length && this.hasMove(e[0].elm, t) && (e.forEach(Ki), e.forEach(Gi), e.forEach(Xi), this._reflow = document.body.offsetHeight, e.forEach(function (e) {
            if (e.data.moved) {
              var n = e.elm,
                  r = n.style;
              gi(n, t), r.transform = r.WebkitTransform = r.transitionDuration = "", n.addEventListener(fi, n._moveCb = function e(r) {
                r && r.target !== n || r && !/transform$/.test(r.propertyName) || (n.removeEventListener(fi, e), n._moveCb = null, mi(n, t));
              });
            }
          }));
        },
        methods: {
          hasMove: function hasMove(e, t) {
            if (!si) return !1;
            if (this._hasMove) return this._hasMove;
            var n = e.cloneNode();
            e._transitionClasses && e._transitionClasses.forEach(function (e) {
              ii(n, e);
            }), ri(n, t), n.style.display = "none", this.$el.appendChild(n);
            var r = bi(n);
            return this.$el.removeChild(n), this._hasMove = r.hasTransform;
          }
        }
      }
    };
    hn.config.mustUseProp = xn, hn.config.isReservedTag = Hn, hn.config.isReservedAttr = Tn, hn.config.getTagNamespace = Mn, hn.config.isUnknownElement = function (e) {
      if (!V) return !0;
      if (Hn(e)) return !1;
      if (e = e.toLowerCase(), null != Fn[e]) return Fn[e];
      var t = document.createElement(e);
      return e.indexOf("-") > -1 ? Fn[e] = t.constructor === window.HTMLUnknownElement || t.constructor === window.HTMLElement : Fn[e] = /HTMLUnknownElement/.test(t.toString());
    }, D(hn.options.directives, Hi), D(hn.options.components, Qi), hn.prototype.__patch__ = V ? Oi : k, hn.prototype.$mount = function (e, t) {
      return function (e, t, n) {
        var r;
        return e.$el = t, e.$options.render || (e.$options.render = ve), Et(e, "beforeMount"), r = function r() {
          e._update(e._render(), n);
        }, new Nt(e, r, k, {
          before: function before() {
            e._isMounted && !e._isDestroyed && Et(e, "beforeUpdate");
          }
        }, !0), n = !1, null == e.$vnode && (e._isMounted = !0, Et(e, "mounted")), e;
      }(this, e = e && V ? qn(e) : void 0, t);
    }, V && setTimeout(function () {
      F.devtools && re && re.emit("init", hn);
    }, 0);
    var Yi = /\{\{((?:.|\r?\n)+?)\}\}/g,
        Ji = /[-.*+?^${}()|[\]\/\\]/g,
        Zi = w(function (e) {
      var t = e[0].replace(Ji, "\\$&"),
          n = e[1].replace(Ji, "\\$&");
      return new RegExp(t + "((?:.|\\n)+?)" + n, "g");
    });
    var eo = {
      staticKeys: ["staticClass"],
      transformNode: function transformNode(e, t) {
        t.warn;
        var n = Ar(e, "class");
        n && (e.staticClass = JSON.stringify(n));
        var r = Cr(e, "class", !1);
        r && (e.classBinding = r);
      },
      genData: function genData(e) {
        var t = "";
        return e.staticClass && (t += "staticClass:" + e.staticClass + ","), e.classBinding && (t += "class:" + e.classBinding + ","), t;
      }
    };

    var to,
        no = {
      staticKeys: ["staticStyle"],
      transformNode: function transformNode(e, t) {
        t.warn;
        var n = Ar(e, "style");
        n && (e.staticStyle = JSON.stringify(Vr(n)));
        var r = Cr(e, "style", !1);
        r && (e.styleBinding = r);
      },
      genData: function genData(e) {
        var t = "";
        return e.staticStyle && (t += "staticStyle:" + e.staticStyle + ","), e.styleBinding && (t += "style:(" + e.styleBinding + "),"), t;
      }
    },
        ro = function ro(e) {
      return (to = to || document.createElement("div")).innerHTML = e, to.textContent;
    },
        io = v("area,base,br,col,embed,frame,hr,img,input,isindex,keygen,link,meta,param,source,track,wbr"),
        oo = v("colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source"),
        ao = v("address,article,aside,base,blockquote,body,caption,col,colgroup,dd,details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,title,tr,track"),
        so = /^\s*([^\s"'<>\/=]+)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/,
        uo = "[a-zA-Z_][\\w\\-\\.]*",
        co = "((?:" + uo + "\\:)?" + uo + ")",
        lo = new RegExp("^<" + co),
        fo = /^\s*(\/?)>/,
        po = new RegExp("^<\\/" + co + "[^>]*>"),
        ho = /^<!DOCTYPE [^>]+>/i,
        vo = /^<!\--/,
        go = /^<!\[/,
        mo = v("script,style,textarea", !0),
        yo = {},
        _o = {
      "&lt;": "<",
      "&gt;": ">",
      "&quot;": '"',
      "&amp;": "&",
      "&#10;": "\n",
      "&#9;": "\t"
    },
        bo = /&(?:lt|gt|quot|amp);/g,
        wo = /&(?:lt|gt|quot|amp|#10|#9);/g,
        To = v("pre,textarea", !0),
        Eo = function Eo(e, t) {
      return e && To(e) && "\n" === t[0];
    };

    function xo(e, t) {
      var n = t ? wo : bo;
      return e.replace(n, function (e) {
        return _o[e];
      });
    }

    var Co,
        Ao,
        So,
        Oo,
        Do,
        Io,
        ko,
        No,
        Lo = /^@|^v-on:/,
        jo = /^v-|^@|^:/,
        Po = /([\s\S]*?)\s+(?:in|of)\s+([\s\S]*)/,
        Ro = /,([^,\}\]]*)(?:,([^,\}\]]*))?$/,
        $o = /^\(|\)$/g,
        Ho = /:(.*)$/,
        Mo = /^:|^v-bind:/,
        Fo = /\.[^.]+/g,
        Wo = w(ro);

    function qo(e, t, n) {
      return {
        type: 1,
        tag: e,
        attrsList: t,
        attrsMap: Go(t),
        parent: n,
        children: []
      };
    }

    function Bo(e, t) {
      Co = t.warn || yr, Io = t.isPreTag || N, ko = t.mustUseProp || N, No = t.getTagNamespace || N, So = _r(t.modules, "transformNode"), Oo = _r(t.modules, "preTransformNode"), Do = _r(t.modules, "postTransformNode"), Ao = t.delimiters;
      var n,
          r,
          i = [],
          o = !1 !== t.preserveWhitespace,
          a = !1,
          s = !1;

      function u(e) {
        e.pre && (a = !1), Io(e.tag) && (s = !1);

        for (var n = 0; n < Do.length; n++) {
          Do[n](e, t);
        }
      }

      return function (e, t) {
        for (var n, r, i = [], o = t.expectHTML, a = t.isUnaryTag || N, s = t.canBeLeftOpenTag || N, u = 0; e;) {
          if (n = e, r && mo(r)) {
            var c = 0,
                l = r.toLowerCase(),
                f = yo[l] || (yo[l] = new RegExp("([\\s\\S]*?)(</" + l + "[^>]*>)", "i")),
                p = e.replace(f, function (e, n, r) {
              return c = r.length, mo(l) || "noscript" === l || (n = n.replace(/<!\--([\s\S]*?)-->/g, "$1").replace(/<!\[CDATA\[([\s\S]*?)]]>/g, "$1")), Eo(l, n) && (n = n.slice(1)), t.chars && t.chars(n), "";
            });
            u += e.length - p.length, e = p, A(l, u - c, u);
          } else {
            var d = e.indexOf("<");

            if (0 === d) {
              if (vo.test(e)) {
                var h = e.indexOf("--\x3e");

                if (h >= 0) {
                  t.shouldKeepComment && t.comment(e.substring(4, h)), E(h + 3);
                  continue;
                }
              }

              if (go.test(e)) {
                var v = e.indexOf("]>");

                if (v >= 0) {
                  E(v + 2);
                  continue;
                }
              }

              var g = e.match(ho);

              if (g) {
                E(g[0].length);
                continue;
              }

              var m = e.match(po);

              if (m) {
                var y = u;
                E(m[0].length), A(m[1], y, u);
                continue;
              }

              var _ = x();

              if (_) {
                C(_), Eo(_.tagName, e) && E(1);
                continue;
              }
            }

            var b = void 0,
                w = void 0,
                T = void 0;

            if (d >= 0) {
              for (w = e.slice(d); !(po.test(w) || lo.test(w) || vo.test(w) || go.test(w) || (T = w.indexOf("<", 1)) < 0);) {
                d += T, w = e.slice(d);
              }

              b = e.substring(0, d), E(d);
            }

            d < 0 && (b = e, e = ""), t.chars && b && t.chars(b);
          }

          if (e === n) {
            t.chars && t.chars(e);
            break;
          }
        }

        function E(t) {
          u += t, e = e.substring(t);
        }

        function x() {
          var t = e.match(lo);

          if (t) {
            var n,
                r,
                i = {
              tagName: t[1],
              attrs: [],
              start: u
            };

            for (E(t[0].length); !(n = e.match(fo)) && (r = e.match(so));) {
              E(r[0].length), i.attrs.push(r);
            }

            if (n) return i.unarySlash = n[1], E(n[0].length), i.end = u, i;
          }
        }

        function C(e) {
          var n = e.tagName,
              u = e.unarySlash;
          o && ("p" === r && ao(n) && A(r), s(n) && r === n && A(n));

          for (var c = a(n) || !!u, l = e.attrs.length, f = new Array(l), p = 0; p < l; p++) {
            var d = e.attrs[p],
                h = d[3] || d[4] || d[5] || "",
                v = "a" === n && "href" === d[1] ? t.shouldDecodeNewlinesForHref : t.shouldDecodeNewlines;
            f[p] = {
              name: d[1],
              value: xo(h, v)
            };
          }

          c || (i.push({
            tag: n,
            lowerCasedTag: n.toLowerCase(),
            attrs: f
          }), r = n), t.start && t.start(n, f, c, e.start, e.end);
        }

        function A(e, n, o) {
          var a, s;
          if (null == n && (n = u), null == o && (o = u), e) for (s = e.toLowerCase(), a = i.length - 1; a >= 0 && i[a].lowerCasedTag !== s; a--) {
            ;
          } else a = 0;

          if (a >= 0) {
            for (var c = i.length - 1; c >= a; c--) {
              t.end && t.end(i[c].tag, n, o);
            }

            i.length = a, r = a && i[a - 1].tag;
          } else "br" === s ? t.start && t.start(e, [], !0, n, o) : "p" === s && (t.start && t.start(e, [], !1, n, o), t.end && t.end(e, n, o));
        }

        A();
      }(e, {
        warn: Co,
        expectHTML: t.expectHTML,
        isUnaryTag: t.isUnaryTag,
        canBeLeftOpenTag: t.canBeLeftOpenTag,
        shouldDecodeNewlines: t.shouldDecodeNewlines,
        shouldDecodeNewlinesForHref: t.shouldDecodeNewlinesForHref,
        shouldKeepComment: t.comments,
        start: function start(e, o, c) {
          var l = r && r.ns || No(e);
          X && "svg" === l && (o = function (e) {
            for (var t = [], n = 0; n < e.length; n++) {
              var r = e[n];
              Xo.test(r.name) || (r.name = r.name.replace(Qo, ""), t.push(r));
            }

            return t;
          }(o));
          var f,
              p = qo(e, o, r);
          l && (p.ns = l), "style" !== (f = p).tag && ("script" !== f.tag || f.attrsMap.type && "text/javascript" !== f.attrsMap.type) || ne() || (p.forbidden = !0);

          for (var d = 0; d < Oo.length; d++) {
            p = Oo[d](p, t) || p;
          }

          function h(e) {
            0;
          }

          if (a || (!function (e) {
            null != Ar(e, "v-pre") && (e.pre = !0);
          }(p), p.pre && (a = !0)), Io(p.tag) && (s = !0), a ? function (e) {
            var t = e.attrsList.length;
            if (t) for (var n = e.attrs = new Array(t), r = 0; r < t; r++) {
              n[r] = {
                name: e.attrsList[r].name,
                value: JSON.stringify(e.attrsList[r].value)
              };
            } else e.pre || (e.plain = !0);
          }(p) : p.processed || (Vo(p), function (e) {
            var t = Ar(e, "v-if");
            if (t) e["if"] = t, zo(e, {
              exp: t,
              block: e
            });else {
              null != Ar(e, "v-else") && (e["else"] = !0);
              var n = Ar(e, "v-else-if");
              n && (e.elseif = n);
            }
          }(p), function (e) {
            null != Ar(e, "v-once") && (e.once = !0);
          }(p), Uo(p, t)), n ? i.length || n["if"] && (p.elseif || p["else"]) && (h(), zo(n, {
            exp: p.elseif,
            block: p
          })) : (n = p, h()), r && !p.forbidden) if (p.elseif || p["else"]) !function (e, t) {
            var n = function (e) {
              var t = e.length;

              for (; t--;) {
                if (1 === e[t].type) return e[t];
                e.pop();
              }
            }(t.children);

            n && n["if"] && zo(n, {
              exp: e.elseif,
              block: e
            });
          }(p, r);else if (p.slotScope) {
            r.plain = !1;
            var v = p.slotTarget || '"default"';
            (r.scopedSlots || (r.scopedSlots = {}))[v] = p;
          } else r.children.push(p), p.parent = r;
          c ? u(p) : (r = p, i.push(p));
        },
        end: function end() {
          var e = i[i.length - 1],
              t = e.children[e.children.length - 1];
          t && 3 === t.type && " " === t.text && !s && e.children.pop(), i.length -= 1, r = i[i.length - 1], u(e);
        },
        chars: function chars(e) {
          if (r && (!X || "textarea" !== r.tag || r.attrsMap.placeholder !== e)) {
            var t,
                n,
                i = r.children;
            if (e = s || e.trim() ? "script" === (t = r).tag || "style" === t.tag ? e : Wo(e) : o && i.length ? " " : "") !a && " " !== e && (n = function (e, t) {
              var n = t ? Zi(t) : Yi;

              if (n.test(e)) {
                for (var r, i, o, a = [], s = [], u = n.lastIndex = 0; r = n.exec(e);) {
                  (i = r.index) > u && (s.push(o = e.slice(u, i)), a.push(JSON.stringify(o)));
                  var c = gr(r[1].trim());
                  a.push("_s(" + c + ")"), s.push({
                    "@binding": c
                  }), u = i + r[0].length;
                }

                return u < e.length && (s.push(o = e.slice(u)), a.push(JSON.stringify(o))), {
                  expression: a.join("+"),
                  tokens: s
                };
              }
            }(e, Ao)) ? i.push({
              type: 2,
              expression: n.expression,
              tokens: n.tokens,
              text: e
            }) : " " === e && i.length && " " === i[i.length - 1].text || i.push({
              type: 3,
              text: e
            });
          }
        },
        comment: function comment(e) {
          r.children.push({
            type: 3,
            text: e,
            isComment: !0
          });
        }
      }), n;
    }

    function Uo(e, t) {
      var n, r;
      !function (e) {
        var t = Cr(e, "key");

        if (t) {
          e.key = t;
        }
      }(e), e.plain = !e.key && !e.attrsList.length, (r = Cr(n = e, "ref")) && (n.ref = r, n.refInFor = function (e) {
        for (var t = e; t;) {
          if (void 0 !== t["for"]) return !0;
          t = t.parent;
        }

        return !1;
      }(n)), function (e) {
        if ("slot" === e.tag) e.slotName = Cr(e, "name");else {
          var t;
          "template" === e.tag ? (t = Ar(e, "scope"), e.slotScope = t || Ar(e, "slot-scope")) : (t = Ar(e, "slot-scope")) && (e.slotScope = t);
          var n = Cr(e, "slot");
          n && (e.slotTarget = '""' === n ? '"default"' : n, "template" === e.tag || e.slotScope || wr(e, "slot", n));
        }
      }(e), function (e) {
        var t;
        (t = Cr(e, "is")) && (e.component = t);
        null != Ar(e, "inline-template") && (e.inlineTemplate = !0);
      }(e);

      for (var i = 0; i < So.length; i++) {
        e = So[i](e, t) || e;
      }

      !function (e) {
        var t,
            n,
            r,
            i,
            o,
            a,
            s,
            u = e.attrsList;

        for (t = 0, n = u.length; t < n; t++) {
          if (r = i = u[t].name, o = u[t].value, jo.test(r)) {
            if (e.hasBindings = !0, (a = Ko(r)) && (r = r.replace(Fo, "")), Mo.test(r)) r = r.replace(Mo, ""), o = gr(o), s = !1, a && (a.prop && (s = !0, "innerHtml" === (r = E(r)) && (r = "innerHTML")), a.camel && (r = E(r)), a.sync && xr(e, "update:" + E(r), Or(o, "$event"))), s || !e.component && ko(e.tag, e.attrsMap.type, r) ? br(e, r, o) : wr(e, r, o);else if (Lo.test(r)) r = r.replace(Lo, ""), xr(e, r, o, a, !1);else {
              var c = (r = r.replace(jo, "")).match(Ho),
                  l = c && c[1];
              l && (r = r.slice(0, -(l.length + 1))), Er(e, r, i, o, l, a);
            }
          } else wr(e, r, JSON.stringify(o)), !e.component && "muted" === r && ko(e.tag, e.attrsMap.type, r) && br(e, r, "true");
        }
      }(e);
    }

    function Vo(e) {
      var t;

      if (t = Ar(e, "v-for")) {
        var n = function (e) {
          var t = e.match(Po);
          if (!t) return;
          var n = {};
          n["for"] = t[2].trim();
          var r = t[1].trim().replace($o, ""),
              i = r.match(Ro);
          i ? (n.alias = r.replace(Ro, "").trim(), n.iterator1 = i[1].trim(), i[2] && (n.iterator2 = i[2].trim())) : n.alias = r;
          return n;
        }(t);

        n && D(e, n);
      }
    }

    function zo(e, t) {
      e.ifConditions || (e.ifConditions = []), e.ifConditions.push(t);
    }

    function Ko(e) {
      var t = e.match(Fo);

      if (t) {
        var n = {};
        return t.forEach(function (e) {
          n[e.slice(1)] = !0;
        }), n;
      }
    }

    function Go(e) {
      for (var t = {}, n = 0, r = e.length; n < r; n++) {
        t[e[n].name] = e[n].value;
      }

      return t;
    }

    var Xo = /^xmlns:NS\d+/,
        Qo = /^NS\d+:/;

    function Yo(e) {
      return qo(e.tag, e.attrsList.slice(), e.parent);
    }

    var Jo = [eo, no, {
      preTransformNode: function preTransformNode(e, t) {
        if ("input" === e.tag) {
          var n,
              r = e.attrsMap;
          if (!r["v-model"]) return;

          if ((r[":type"] || r["v-bind:type"]) && (n = Cr(e, "type")), r.type || n || !r["v-bind"] || (n = "(" + r["v-bind"] + ").type"), n) {
            var i = Ar(e, "v-if", !0),
                o = i ? "&&(" + i + ")" : "",
                a = null != Ar(e, "v-else", !0),
                s = Ar(e, "v-else-if", !0),
                u = Yo(e);
            Vo(u), Tr(u, "type", "checkbox"), Uo(u, t), u.processed = !0, u["if"] = "(" + n + ")==='checkbox'" + o, zo(u, {
              exp: u["if"],
              block: u
            });
            var c = Yo(e);
            Ar(c, "v-for", !0), Tr(c, "type", "radio"), Uo(c, t), zo(u, {
              exp: "(" + n + ")==='radio'" + o,
              block: c
            });
            var l = Yo(e);
            return Ar(l, "v-for", !0), Tr(l, ":type", n), Uo(l, t), zo(u, {
              exp: i,
              block: l
            }), a ? u["else"] = !0 : s && (u.elseif = s), u;
          }
        }
      }
    }];
    var Zo,
        ea,
        ta = {
      expectHTML: !0,
      modules: Jo,
      directives: {
        model: function model(e, t, n) {
          n;
          var r = t.value,
              i = t.modifiers,
              o = e.tag,
              a = e.attrsMap.type;
          if (e.component) return Sr(e, r, i), !1;
          if ("select" === o) !function (e, t, n) {
            var r = 'var $$selectedVal = Array.prototype.filter.call($event.target.options,function(o){return o.selected}).map(function(o){var val = "_value" in o ? o._value : o.value;return ' + (n && n.number ? "_n(val)" : "val") + "});";
            r = r + " " + Or(t, "$event.target.multiple ? $$selectedVal : $$selectedVal[0]"), xr(e, "change", r, null, !0);
          }(e, r, i);else if ("input" === o && "checkbox" === a) !function (e, t, n) {
            var r = n && n.number,
                i = Cr(e, "value") || "null",
                o = Cr(e, "true-value") || "true",
                a = Cr(e, "false-value") || "false";
            br(e, "checked", "Array.isArray(" + t + ")?_i(" + t + "," + i + ")>-1" + ("true" === o ? ":(" + t + ")" : ":_q(" + t + "," + o + ")")), xr(e, "change", "var $$a=" + t + ",$$el=$event.target,$$c=$$el.checked?(" + o + "):(" + a + ");if(Array.isArray($$a)){var $$v=" + (r ? "_n(" + i + ")" : i) + ",$$i=_i($$a,$$v);if($$el.checked){$$i<0&&(" + Or(t, "$$a.concat([$$v])") + ")}else{$$i>-1&&(" + Or(t, "$$a.slice(0,$$i).concat($$a.slice($$i+1))") + ")}}else{" + Or(t, "$$c") + "}", null, !0);
          }(e, r, i);else if ("input" === o && "radio" === a) !function (e, t, n) {
            var r = n && n.number,
                i = Cr(e, "value") || "null";
            br(e, "checked", "_q(" + t + "," + (i = r ? "_n(" + i + ")" : i) + ")"), xr(e, "change", Or(t, i), null, !0);
          }(e, r, i);else if ("input" === o || "textarea" === o) !function (e, t, n) {
            var r = e.attrsMap.type,
                i = n || {},
                o = i.lazy,
                a = i.number,
                s = i.trim,
                u = !o && "range" !== r,
                c = o ? "change" : "range" === r ? Pr : "input",
                l = "$event.target.value";
            s && (l = "$event.target.value.trim()"), a && (l = "_n(" + l + ")");
            var f = Or(t, l);
            u && (f = "if($event.target.composing)return;" + f), br(e, "value", "(" + t + ")"), xr(e, c, f, null, !0), (s || a) && xr(e, "blur", "$forceUpdate()");
          }(e, r, i);else if (!F.isReservedTag(o)) return Sr(e, r, i), !1;
          return !0;
        },
        text: function text(e, t) {
          t.value && br(e, "textContent", "_s(" + t.value + ")");
        },
        html: function html(e, t) {
          t.value && br(e, "innerHTML", "_s(" + t.value + ")");
        }
      },
      isPreTag: function isPreTag(e) {
        return "pre" === e;
      },
      isUnaryTag: io,
      mustUseProp: xn,
      canBeLeftOpenTag: oo,
      isReservedTag: Hn,
      getTagNamespace: Mn,
      staticKeys: function (e) {
        return e.reduce(function (e, t) {
          return e.concat(t.staticKeys || []);
        }, []).join(",");
      }(Jo)
    },
        na = w(function (e) {
      return v("type,tag,attrsList,attrsMap,plain,parent,children,attrs" + (e ? "," + e : ""));
    });

    function ra(e, t) {
      e && (Zo = na(t.staticKeys || ""), ea = t.isReservedTag || N, function e(t) {
        t["static"] = function (e) {
          if (2 === e.type) return !1;
          if (3 === e.type) return !0;
          return !(!e.pre && (e.hasBindings || e["if"] || e["for"] || g(e.tag) || !ea(e.tag) || function (e) {
            for (; e.parent;) {
              if ("template" !== (e = e.parent).tag) return !1;
              if (e["for"]) return !0;
            }

            return !1;
          }(e) || !Object.keys(e).every(Zo)));
        }(t);

        if (1 === t.type) {
          if (!ea(t.tag) && "slot" !== t.tag && null == t.attrsMap["inline-template"]) return;

          for (var n = 0, r = t.children.length; n < r; n++) {
            var i = t.children[n];
            e(i), i["static"] || (t["static"] = !1);
          }

          if (t.ifConditions) for (var o = 1, a = t.ifConditions.length; o < a; o++) {
            var s = t.ifConditions[o].block;
            e(s), s["static"] || (t["static"] = !1);
          }
        }
      }(e), function e(t, n) {
        if (1 === t.type) {
          if ((t["static"] || t.once) && (t.staticInFor = n), t["static"] && t.children.length && (1 !== t.children.length || 3 !== t.children[0].type)) return void (t.staticRoot = !0);
          if (t.staticRoot = !1, t.children) for (var r = 0, i = t.children.length; r < i; r++) {
            e(t.children[r], n || !!t["for"]);
          }
          if (t.ifConditions) for (var o = 1, a = t.ifConditions.length; o < a; o++) {
            e(t.ifConditions[o].block, n);
          }
        }
      }(e, !1));
    }

    var ia = /^([\w$_]+|\([^)]*?\))\s*=>|^function\s*\(/,
        oa = /^[A-Za-z_$][\w$]*(?:\.[A-Za-z_$][\w$]*|\['[^']*?']|\["[^"]*?"]|\[\d+]|\[[A-Za-z_$][\w$]*])*$/,
        aa = {
      esc: 27,
      tab: 9,
      enter: 13,
      space: 32,
      up: 38,
      left: 37,
      right: 39,
      down: 40,
      "delete": [8, 46]
    },
        sa = {
      esc: ["Esc", "Escape"],
      tab: "Tab",
      enter: "Enter",
      space: [" ", "Spacebar"],
      up: ["Up", "ArrowUp"],
      left: ["Left", "ArrowLeft"],
      right: ["Right", "ArrowRight"],
      down: ["Down", "ArrowDown"],
      "delete": ["Backspace", "Delete", "Del"]
    },
        ua = function ua(e) {
      return "if(" + e + ")return null;";
    },
        ca = {
      stop: "$event.stopPropagation();",
      prevent: "$event.preventDefault();",
      self: ua("$event.target !== $event.currentTarget"),
      ctrl: ua("!$event.ctrlKey"),
      shift: ua("!$event.shiftKey"),
      alt: ua("!$event.altKey"),
      meta: ua("!$event.metaKey"),
      left: ua("'button' in $event && $event.button !== 0"),
      middle: ua("'button' in $event && $event.button !== 1"),
      right: ua("'button' in $event && $event.button !== 2")
    };

    function la(e, t) {
      var n = t ? "nativeOn:{" : "on:{";

      for (var r in e) {
        n += '"' + r + '":' + fa(r, e[r]) + ",";
      }

      return n.slice(0, -1) + "}";
    }

    function fa(e, t) {
      if (!t) return "function(){}";
      if (Array.isArray(t)) return "[" + t.map(function (t) {
        return fa(e, t);
      }).join(",") + "]";
      var n = oa.test(t.value),
          r = ia.test(t.value);

      if (t.modifiers) {
        var i = "",
            o = "",
            a = [];

        for (var s in t.modifiers) {
          if (ca[s]) o += ca[s], aa[s] && a.push(s);else if ("exact" === s) {
            var u = t.modifiers;
            o += ua(["ctrl", "shift", "alt", "meta"].filter(function (e) {
              return !u[e];
            }).map(function (e) {
              return "$event." + e + "Key";
            }).join("||"));
          } else a.push(s);
        }

        return a.length && (i += function (e) {
          return "if(!('button' in $event)&&" + e.map(pa).join("&&") + ")return null;";
        }(a)), o && (i += o), "function($event){" + i + (n ? "return " + t.value + "($event)" : r ? "return (" + t.value + ")($event)" : t.value) + "}";
      }

      return n || r ? t.value : "function($event){" + t.value + "}";
    }

    function pa(e) {
      var t = parseInt(e, 10);
      if (t) return "$event.keyCode!==" + t;
      var n = aa[e],
          r = sa[e];
      return "_k($event.keyCode," + JSON.stringify(e) + "," + JSON.stringify(n) + ",$event.key," + JSON.stringify(r) + ")";
    }

    var da = {
      on: function on(e, t) {
        e.wrapListeners = function (e) {
          return "_g(" + e + "," + t.value + ")";
        };
      },
      bind: function bind(e, t) {
        e.wrapData = function (n) {
          return "_b(" + n + ",'" + e.tag + "'," + t.value + "," + (t.modifiers && t.modifiers.prop ? "true" : "false") + (t.modifiers && t.modifiers.sync ? ",true" : "") + ")";
        };
      },
      cloak: k
    },
        ha = function ha(e) {
      this.options = e, this.warn = e.warn || yr, this.transforms = _r(e.modules, "transformCode"), this.dataGenFns = _r(e.modules, "genData"), this.directives = D(D({}, da), e.directives);
      var t = e.isReservedTag || N;
      this.maybeComponent = function (e) {
        return !(t(e.tag) && !e.component);
      }, this.onceId = 0, this.staticRenderFns = [], this.pre = !1;
    };

    function va(e, t) {
      var n = new ha(t);
      return {
        render: "with(this){return " + (e ? ga(e, n) : '_c("div")') + "}",
        staticRenderFns: n.staticRenderFns
      };
    }

    function ga(e, t) {
      if (e.parent && (e.pre = e.pre || e.parent.pre), e.staticRoot && !e.staticProcessed) return ma(e, t);
      if (e.once && !e.onceProcessed) return ya(e, t);
      if (e["for"] && !e.forProcessed) return function (e, t, n, r) {
        var i = e["for"],
            o = e.alias,
            a = e.iterator1 ? "," + e.iterator1 : "",
            s = e.iterator2 ? "," + e.iterator2 : "";
        0;
        return e.forProcessed = !0, (r || "_l") + "((" + i + "),function(" + o + a + s + "){return " + (n || ga)(e, t) + "})";
      }(e, t);
      if (e["if"] && !e.ifProcessed) return _a(e, t);

      if ("template" !== e.tag || e.slotTarget || t.pre) {
        if ("slot" === e.tag) return function (e, t) {
          var n = e.slotName || '"default"',
              r = Ta(e, t),
              i = "_t(" + n + (r ? "," + r : ""),
              o = e.attrs && "{" + e.attrs.map(function (e) {
            return E(e.name) + ":" + e.value;
          }).join(",") + "}",
              a = e.attrsMap["v-bind"];
          !o && !a || r || (i += ",null");
          o && (i += "," + o);
          a && (i += (o ? "" : ",null") + "," + a);
          return i + ")";
        }(e, t);
        var n;
        if (e.component) n = function (e, t, n) {
          var r = t.inlineTemplate ? null : Ta(t, n, !0);
          return "_c(" + e + "," + ba(t, n) + (r ? "," + r : "") + ")";
        }(e.component, e, t);else {
          var r;
          (!e.plain || e.pre && t.maybeComponent(e)) && (r = ba(e, t));
          var i = e.inlineTemplate ? null : Ta(e, t, !0);
          n = "_c('" + e.tag + "'" + (r ? "," + r : "") + (i ? "," + i : "") + ")";
        }

        for (var o = 0; o < t.transforms.length; o++) {
          n = t.transforms[o](e, n);
        }

        return n;
      }

      return Ta(e, t) || "void 0";
    }

    function ma(e, t) {
      e.staticProcessed = !0;
      var n = t.pre;
      return e.pre && (t.pre = e.pre), t.staticRenderFns.push("with(this){return " + ga(e, t) + "}"), t.pre = n, "_m(" + (t.staticRenderFns.length - 1) + (e.staticInFor ? ",true" : "") + ")";
    }

    function ya(e, t) {
      if (e.onceProcessed = !0, e["if"] && !e.ifProcessed) return _a(e, t);

      if (e.staticInFor) {
        for (var n = "", r = e.parent; r;) {
          if (r["for"]) {
            n = r.key;
            break;
          }

          r = r.parent;
        }

        return n ? "_o(" + ga(e, t) + "," + t.onceId++ + "," + n + ")" : ga(e, t);
      }

      return ma(e, t);
    }

    function _a(e, t, n, r) {
      return e.ifProcessed = !0, function e(t, n, r, i) {
        if (!t.length) return i || "_e()";
        var o = t.shift();
        return o.exp ? "(" + o.exp + ")?" + a(o.block) + ":" + e(t, n, r, i) : "" + a(o.block);

        function a(e) {
          return r ? r(e, n) : e.once ? ya(e, n) : ga(e, n);
        }
      }(e.ifConditions.slice(), t, n, r);
    }

    function ba(e, t) {
      var n = "{",
          r = function (e, t) {
        var n = e.directives;
        if (!n) return;
        var r,
            i,
            o,
            a,
            s = "directives:[",
            u = !1;

        for (r = 0, i = n.length; r < i; r++) {
          o = n[r], a = !0;
          var c = t.directives[o.name];
          c && (a = !!c(e, o, t.warn)), a && (u = !0, s += '{name:"' + o.name + '",rawName:"' + o.rawName + '"' + (o.value ? ",value:(" + o.value + "),expression:" + JSON.stringify(o.value) : "") + (o.arg ? ',arg:"' + o.arg + '"' : "") + (o.modifiers ? ",modifiers:" + JSON.stringify(o.modifiers) : "") + "},");
        }

        if (u) return s.slice(0, -1) + "]";
      }(e, t);

      r && (n += r + ","), e.key && (n += "key:" + e.key + ","), e.ref && (n += "ref:" + e.ref + ","), e.refInFor && (n += "refInFor:true,"), e.pre && (n += "pre:true,"), e.component && (n += 'tag:"' + e.tag + '",');

      for (var i = 0; i < t.dataGenFns.length; i++) {
        n += t.dataGenFns[i](e);
      }

      if (e.attrs && (n += "attrs:{" + Ca(e.attrs) + "},"), e.props && (n += "domProps:{" + Ca(e.props) + "},"), e.events && (n += la(e.events, !1) + ","), e.nativeEvents && (n += la(e.nativeEvents, !0) + ","), e.slotTarget && !e.slotScope && (n += "slot:" + e.slotTarget + ","), e.scopedSlots && (n += function (e, t) {
        return "scopedSlots:_u([" + Object.keys(e).map(function (n) {
          return wa(n, e[n], t);
        }).join(",") + "])";
      }(e.scopedSlots, t) + ","), e.model && (n += "model:{value:" + e.model.value + ",callback:" + e.model.callback + ",expression:" + e.model.expression + "},"), e.inlineTemplate) {
        var o = function (e, t) {
          var n = e.children[0];
          0;

          if (1 === n.type) {
            var r = va(n, t.options);
            return "inlineTemplate:{render:function(){" + r.render + "},staticRenderFns:[" + r.staticRenderFns.map(function (e) {
              return "function(){" + e + "}";
            }).join(",") + "]}";
          }
        }(e, t);

        o && (n += o + ",");
      }

      return n = n.replace(/,$/, "") + "}", e.wrapData && (n = e.wrapData(n)), e.wrapListeners && (n = e.wrapListeners(n)), n;
    }

    function wa(e, t, n) {
      return t["for"] && !t.forProcessed ? function (e, t, n) {
        var r = t["for"],
            i = t.alias,
            o = t.iterator1 ? "," + t.iterator1 : "",
            a = t.iterator2 ? "," + t.iterator2 : "";
        return t.forProcessed = !0, "_l((" + r + "),function(" + i + o + a + "){return " + wa(e, t, n) + "})";
      }(e, t, n) : "{key:" + e + ",fn:" + ("function(" + String(t.slotScope) + "){return " + ("template" === t.tag ? t["if"] ? "(" + t["if"] + ")?" + (Ta(t, n) || "undefined") + ":undefined" : Ta(t, n) || "undefined" : ga(t, n)) + "}") + "}";
    }

    function Ta(e, t, n, r, i) {
      var o = e.children;

      if (o.length) {
        var a = o[0];

        if (1 === o.length && a["for"] && "template" !== a.tag && "slot" !== a.tag) {
          var s = n ? t.maybeComponent(a) ? ",1" : ",0" : "";
          return "" + (r || ga)(a, t) + s;
        }

        var u = n ? function (e, t) {
          for (var n = 0, r = 0; r < e.length; r++) {
            var i = e[r];

            if (1 === i.type) {
              if (Ea(i) || i.ifConditions && i.ifConditions.some(function (e) {
                return Ea(e.block);
              })) {
                n = 2;
                break;
              }

              (t(i) || i.ifConditions && i.ifConditions.some(function (e) {
                return t(e.block);
              })) && (n = 1);
            }
          }

          return n;
        }(o, t.maybeComponent) : 0,
            c = i || xa;
        return "[" + o.map(function (e) {
          return c(e, t);
        }).join(",") + "]" + (u ? "," + u : "");
      }
    }

    function Ea(e) {
      return void 0 !== e["for"] || "template" === e.tag || "slot" === e.tag;
    }

    function xa(e, t) {
      return 1 === e.type ? ga(e, t) : 3 === e.type && e.isComment ? (r = e, "_e(" + JSON.stringify(r.text) + ")") : "_v(" + (2 === (n = e).type ? n.expression : Aa(JSON.stringify(n.text))) + ")";
      var n, r;
    }

    function Ca(e) {
      for (var t = "", n = 0; n < e.length; n++) {
        var r = e[n];
        t += '"' + r.name + '":' + Aa(r.value) + ",";
      }

      return t.slice(0, -1);
    }

    function Aa(e) {
      return e.replace(/\u2028/g, "\\u2028").replace(/\u2029/g, "\\u2029");
    }

    new RegExp("\\b" + "do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,super,throw,while,yield,delete,export,import,return,switch,default,extends,finally,continue,debugger,function,arguments".split(",").join("\\b|\\b") + "\\b"), new RegExp("\\b" + "delete,typeof,void".split(",").join("\\s*\\([^\\)]*\\)|\\b") + "\\s*\\([^\\)]*\\)");

    function Sa(e, t) {
      try {
        return new Function(e);
      } catch (n) {
        return t.push({
          err: n,
          code: e
        }), k;
      }
    }

    function Oa(e) {
      var t = Object.create(null);
      return function (n, r, i) {
        (r = D({}, r)).warn;
        delete r.warn;
        var o = r.delimiters ? String(r.delimiters) + n : n;
        if (t[o]) return t[o];
        var a = e(n, r);
        var s = {},
            u = [];
        return s.render = Sa(a.render, u), s.staticRenderFns = a.staticRenderFns.map(function (e) {
          return Sa(e, u);
        }), t[o] = s;
      };
    }

    var Da,
        Ia,
        ka = (Da = function Da(e, t) {
      var n = Bo(e.trim(), t);
      !1 !== t.optimize && ra(n, t);
      var r = va(n, t);
      return {
        ast: n,
        render: r.render,
        staticRenderFns: r.staticRenderFns
      };
    }, function (e) {
      function t(t, n) {
        var r = Object.create(e),
            i = [],
            o = [];
        if (r.warn = function (e, t) {
          (t ? o : i).push(e);
        }, n) for (var a in n.modules && (r.modules = (e.modules || []).concat(n.modules)), n.directives && (r.directives = D(Object.create(e.directives || null), n.directives)), n) {
          "modules" !== a && "directives" !== a && (r[a] = n[a]);
        }
        var s = Da(t, r);
        return s.errors = i, s.tips = o, s;
      }

      return {
        compile: t,
        compileToFunctions: Oa(t)
      };
    })(ta),
        Na = (ka.compile, ka.compileToFunctions);

    function La(e) {
      return (Ia = Ia || document.createElement("div")).innerHTML = e ? '<a href="\n"/>' : '<div a="\n"/>', Ia.innerHTML.indexOf("&#10;") > 0;
    }

    var ja = !!V && La(!1),
        Pa = !!V && La(!0),
        Ra = w(function (e) {
      var t = qn(e);
      return t && t.innerHTML;
    }),
        $a = hn.prototype.$mount;
    hn.prototype.$mount = function (e, t) {
      if ((e = e && qn(e)) === document.body || e === document.documentElement) return this;
      var n = this.$options;

      if (!n.render) {
        var r = n.template;
        if (r) {
          if ("string" == typeof r) "#" === r.charAt(0) && (r = Ra(r));else {
            if (!r.nodeType) return this;
            r = r.innerHTML;
          }
        } else e && (r = function (e) {
          if (e.outerHTML) return e.outerHTML;
          var t = document.createElement("div");
          return t.appendChild(e.cloneNode(!0)), t.innerHTML;
        }(e));

        if (r) {
          0;
          var i = Na(r, {
            shouldDecodeNewlines: ja,
            shouldDecodeNewlinesForHref: Pa,
            delimiters: n.delimiters,
            comments: n.comments
          }, this),
              o = i.render,
              a = i.staticRenderFns;
          n.render = o, n.staticRenderFns = a;
        }
      }

      return $a.call(this, e, t);
    }, hn.compile = Na, e.exports = hn;
  }).call(this, n(1), n(37).setImmediate);
}, function (e, t, n) {
  (function (e) {
    var r = void 0 !== e && e || "undefined" != typeof self && self || window,
        i = Function.prototype.apply;

    function o(e, t) {
      this._id = e, this._clearFn = t;
    }

    t.setTimeout = function () {
      return new o(i.call(setTimeout, r, arguments), clearTimeout);
    }, t.setInterval = function () {
      return new o(i.call(setInterval, r, arguments), clearInterval);
    }, t.clearTimeout = t.clearInterval = function (e) {
      e && e.close();
    }, o.prototype.unref = o.prototype.ref = function () {}, o.prototype.close = function () {
      this._clearFn.call(r, this._id);
    }, t.enroll = function (e, t) {
      clearTimeout(e._idleTimeoutId), e._idleTimeout = t;
    }, t.unenroll = function (e) {
      clearTimeout(e._idleTimeoutId), e._idleTimeout = -1;
    }, t._unrefActive = t.active = function (e) {
      clearTimeout(e._idleTimeoutId);
      var t = e._idleTimeout;
      t >= 0 && (e._idleTimeoutId = setTimeout(function () {
        e._onTimeout && e._onTimeout();
      }, t));
    }, n(38), t.setImmediate = "undefined" != typeof self && self.setImmediate || void 0 !== e && e.setImmediate || this && this.setImmediate, t.clearImmediate = "undefined" != typeof self && self.clearImmediate || void 0 !== e && e.clearImmediate || this && this.clearImmediate;
  }).call(this, n(1));
}, function (e, t, n) {
  (function (e, t) {
    !function (e, n) {
      "use strict";

      if (!e.setImmediate) {
        var r,
            i,
            o,
            a,
            s,
            u = 1,
            c = {},
            l = !1,
            f = e.document,
            p = Object.getPrototypeOf && Object.getPrototypeOf(e);
        p = p && p.setTimeout ? p : e, "[object process]" === {}.toString.call(e.process) ? r = function r(e) {
          t.nextTick(function () {
            h(e);
          });
        } : !function () {
          if (e.postMessage && !e.importScripts) {
            var t = !0,
                n = e.onmessage;
            return e.onmessage = function () {
              t = !1;
            }, e.postMessage("", "*"), e.onmessage = n, t;
          }
        }() ? e.MessageChannel ? ((o = new MessageChannel()).port1.onmessage = function (e) {
          h(e.data);
        }, r = function r(e) {
          o.port2.postMessage(e);
        }) : f && "onreadystatechange" in f.createElement("script") ? (i = f.documentElement, r = function r(e) {
          var t = f.createElement("script");
          t.onreadystatechange = function () {
            h(e), t.onreadystatechange = null, i.removeChild(t), t = null;
          }, i.appendChild(t);
        }) : r = function r(e) {
          setTimeout(h, 0, e);
        } : (a = "setImmediate$" + Math.random() + "$", s = function s(t) {
          t.source === e && "string" == typeof t.data && 0 === t.data.indexOf(a) && h(+t.data.slice(a.length));
        }, e.addEventListener ? e.addEventListener("message", s, !1) : e.attachEvent("onmessage", s), r = function r(t) {
          e.postMessage(a + t, "*");
        }), p.setImmediate = function (e) {
          "function" != typeof e && (e = new Function("" + e));

          for (var t = new Array(arguments.length - 1), n = 0; n < t.length; n++) {
            t[n] = arguments[n + 1];
          }

          var i = {
            callback: e,
            args: t
          };
          return c[u] = i, r(u), u++;
        }, p.clearImmediate = d;
      }

      function d(e) {
        delete c[e];
      }

      function h(e) {
        if (l) setTimeout(h, 0, e);else {
          var t = c[e];

          if (t) {
            l = !0;

            try {
              !function (e) {
                var t = e.callback,
                    r = e.args;

                switch (r.length) {
                  case 0:
                    t();
                    break;

                  case 1:
                    t(r[0]);
                    break;

                  case 2:
                    t(r[0], r[1]);
                    break;

                  case 3:
                    t(r[0], r[1], r[2]);
                    break;

                  default:
                    t.apply(n, r);
                }
              }(t);
            } finally {
              d(e), l = !1;
            }
          }
        }
      }
    }("undefined" == typeof self ? void 0 === e ? this : e : self);
  }).call(this, n(1), n(6));
}, function (e, t, n) {
  "use strict";

  n.r(t);

  var r = function (e, t, n, r, i, o, a, s) {
    var u,
        c = "function" == typeof e ? e.options : e;
    if (t && (c.render = t, c.staticRenderFns = n, c._compiled = !0), r && (c.functional = !0), o && (c._scopeId = "data-v-" + o), a ? (u = function u(e) {
      (e = e || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) || "undefined" == typeof __VUE_SSR_CONTEXT__ || (e = __VUE_SSR_CONTEXT__), i && i.call(this, e), e && e._registeredComponents && e._registeredComponents.add(a);
    }, c._ssrRegister = u) : i && (u = s ? function () {
      i.call(this, this.$root.$options.shadowRoot);
    } : i), u) if (c.functional) {
      c._injectStyles = u;
      var l = c.render;

      c.render = function (e, t) {
        return u.call(t), l(e, t);
      };
    } else {
      var f = c.beforeCreate;
      c.beforeCreate = f ? [].concat(f, u) : [u];
    }
    return {
      exports: e,
      options: c
    };
  }({
    mounted: function mounted() {
      console.log("Component mounted.");
    }
  }, function () {
    this.$createElement;
    this._self._c;
    return this._m(0);
  }, [function () {
    var e = this.$createElement,
        t = this._self._c || e;
    return t("div", {
      staticClass: "container"
    }, [t("div", {
      staticClass: "row justify-content-center"
    }, [t("div", {
      staticClass: "col-md-8"
    }, [t("div", {
      staticClass: "card"
    }, [t("div", {
      staticClass: "card-header"
    }, [this._v("Example Component")]), this._v(" "), t("div", {
      staticClass: "card-body"
    }, [this._v("\n                    I'm an example component.\n                ")])])])])]);
  }], !1, null, null, null);

  r.options.__file = "ExampleComponent.vue";
  t["default"] = r.exports;
}, function (e, t) {}]);
})();

/******/ })()
;